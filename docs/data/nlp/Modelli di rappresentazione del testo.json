{
  "title": "Modelli di Rappresentazione del Testo",
  "content": "<style>pre { line-height: 125%; }\ntd.linenos .normal { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }\nspan.linenos { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }\ntd.linenos .special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }\nspan.linenos.special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }\n.codehilite .hll { background-color: #ffffcc }\n.codehilite { background: #f8f8f8; }\n.codehilite .c { color: #3D7B7B; font-style: italic } /* Comment */\n.codehilite .err { border: 1px solid #F00 } /* Error */\n.codehilite .k { color: #008000; font-weight: bold } /* Keyword */\n.codehilite .o { color: #666 } /* Operator */\n.codehilite .ch { color: #3D7B7B; font-style: italic } /* Comment.Hashbang */\n.codehilite .cm { color: #3D7B7B; font-style: italic } /* Comment.Multiline */\n.codehilite .cp { color: #9C6500 } /* Comment.Preproc */\n.codehilite .cpf { color: #3D7B7B; font-style: italic } /* Comment.PreprocFile */\n.codehilite .c1 { color: #3D7B7B; font-style: italic } /* Comment.Single */\n.codehilite .cs { color: #3D7B7B; font-style: italic } /* Comment.Special */\n.codehilite .gd { color: #A00000 } /* Generic.Deleted */\n.codehilite .ge { font-style: italic } /* Generic.Emph */\n.codehilite .ges { font-weight: bold; font-style: italic } /* Generic.EmphStrong */\n.codehilite .gr { color: #E40000 } /* Generic.Error */\n.codehilite .gh { color: #000080; font-weight: bold } /* Generic.Heading */\n.codehilite .gi { color: #008400 } /* Generic.Inserted */\n.codehilite .go { color: #717171 } /* Generic.Output */\n.codehilite .gp { color: #000080; font-weight: bold } /* Generic.Prompt */\n.codehilite .gs { font-weight: bold } /* Generic.Strong */\n.codehilite .gu { color: #800080; font-weight: bold } /* Generic.Subheading */\n.codehilite .gt { color: #04D } /* Generic.Traceback */\n.codehilite .kc { color: #008000; font-weight: bold } /* Keyword.Constant */\n.codehilite .kd { color: #008000; font-weight: bold } /* Keyword.Declaration */\n.codehilite .kn { color: #008000; font-weight: bold } /* Keyword.Namespace */\n.codehilite .kp { color: #008000 } /* Keyword.Pseudo */\n.codehilite .kr { color: #008000; font-weight: bold } /* Keyword.Reserved */\n.codehilite .kt { color: #B00040 } /* Keyword.Type */\n.codehilite .m { color: #666 } /* Literal.Number */\n.codehilite .s { color: #BA2121 } /* Literal.String */\n.codehilite .na { color: #687822 } /* Name.Attribute */\n.codehilite .nb { color: #008000 } /* Name.Builtin */\n.codehilite .nc { color: #00F; font-weight: bold } /* Name.Class */\n.codehilite .no { color: #800 } /* Name.Constant */\n.codehilite .nd { color: #A2F } /* Name.Decorator */\n.codehilite .ni { color: #717171; font-weight: bold } /* Name.Entity */\n.codehilite .ne { color: #CB3F38; font-weight: bold } /* Name.Exception */\n.codehilite .nf { color: #00F } /* Name.Function */\n.codehilite .nl { color: #767600 } /* Name.Label */\n.codehilite .nn { color: #00F; font-weight: bold } /* Name.Namespace */\n.codehilite .nt { color: #008000; font-weight: bold } /* Name.Tag */\n.codehilite .nv { color: #19177C } /* Name.Variable */\n.codehilite .ow { color: #A2F; font-weight: bold } /* Operator.Word */\n.codehilite .w { color: #BBB } /* Text.Whitespace */\n.codehilite .mb { color: #666 } /* Literal.Number.Bin */\n.codehilite .mf { color: #666 } /* Literal.Number.Float */\n.codehilite .mh { color: #666 } /* Literal.Number.Hex */\n.codehilite .mi { color: #666 } /* Literal.Number.Integer */\n.codehilite .mo { color: #666 } /* Literal.Number.Oct */\n.codehilite .sa { color: #BA2121 } /* Literal.String.Affix */\n.codehilite .sb { color: #BA2121 } /* Literal.String.Backtick */\n.codehilite .sc { color: #BA2121 } /* Literal.String.Char */\n.codehilite .dl { color: #BA2121 } /* Literal.String.Delimiter */\n.codehilite .sd { color: #BA2121; font-style: italic } /* Literal.String.Doc */\n.codehilite .s2 { color: #BA2121 } /* Literal.String.Double */\n.codehilite .se { color: #AA5D1F; font-weight: bold } /* Literal.String.Escape */\n.codehilite .sh { color: #BA2121 } /* Literal.String.Heredoc */\n.codehilite .si { color: #A45A77; font-weight: bold } /* Literal.String.Interpol */\n.codehilite .sx { color: #008000 } /* Literal.String.Other */\n.codehilite .sr { color: #A45A77 } /* Literal.String.Regex */\n.codehilite .s1 { color: #BA2121 } /* Literal.String.Single */\n.codehilite .ss { color: #19177C } /* Literal.String.Symbol */\n.codehilite .bp { color: #008000 } /* Name.Builtin.Pseudo */\n.codehilite .fm { color: #00F } /* Name.Function.Magic */\n.codehilite .vc { color: #19177C } /* Name.Variable.Class */\n.codehilite .vg { color: #19177C } /* Name.Variable.Global */\n.codehilite .vi { color: #19177C } /* Name.Variable.Instance */\n.codehilite .vm { color: #19177C } /* Name.Variable.Magic */\n.codehilite .il { color: #666 } /* Literal.Number.Integer.Long */\n\n/* Styling per blocchi di codice */\n.codehilite {\n    background: transparent !important;\n    border-radius: 8px;\n    overflow: hidden;\n}\n.codehilite pre {\n    background: transparent !important;\n    margin: 0 !important;\n    padding: 20px !important;\n    font-family: 'Monaco', 'Menlo', 'Consolas', monospace !important;\n    font-size: 14px !important;\n    line-height: 1.5 !important;\n    white-space: pre !important;\n    overflow-x: auto !important;\n    color: inherit !important;\n}\n.codehilite code {\n    background: transparent !important;\n    padding: 0 !important;\n    font-family: inherit !important;\n}\n\n\n.code-wrapper { \n    position: relative; \n}\n.copy-button {\n    position: absolute; \n    top: 12px; \n    right: 12px; \n    padding: 6px 12px; \n    font-size: 12px;\n    cursor: pointer; \n    border: none; \n    border-radius: 4px; \n    background: rgba(255,255,255,0.9);\n    color: #374151; \n    transition: all 0.2s ease;\n    font-weight: 500;\n}\n.copy-button:hover { \n    background: rgba(255,255,255,1);\n    transform: translateY(-1px);\n}\n\n\ndetails.code-container {\n    border: 1px solid #e5e7eb; \n    border-radius: 12px; \n    background: #f9fafb;\n    margin: 16px 0;\n    transition: all 0.3s ease;\n}\ndetails.code-container summary {\n    padding: 12px 16px;\n    font-size: 14px; \n    color: #6b7280; \n    cursor: pointer; \n    outline: none; \n    user-select: none;\n    font-weight: 500;\n}\ndetails.code-container[open] summary::after { \n    content: \" (Hide Code)\"; \n    color: #9ca3af; \n}\ndetails.code-container:not([open]) summary::after { \n    content: \" (Show Code)\"; \n    color: #d1d5db; \n}\ndetails.code-container .code-wrapper {\n    padding: 0;\n    margin: 0;\n}\n</style>\n<p>In NLP (Natural Language Processing), i modelli di rappresentazione del testo sono fondamentali per trasformare le parole in forme numeriche utilizzabili dagli algoritmi di Machine Learning e Deep Learning. Esistono diverse tecniche, dalle più semplici alle più avanzate, ciascuna con vantaggi e limitazioni.</p>\n<h2 id=\"one-hot-encoding\">One-Hot Encoding</h2>\n<h3 id=\"funzionamento\">Funzionamento</h3>\n<ul>\n<li>Ogni parola di un corpus viene rappresentata come un vettore binario.</li>\n<li>La lunghezza del vettore è pari alla dimensione del vocabolario.</li>\n<li>Solo una posizione del vettore è impostata a 1 (indicando la parola), mentre tutte le altre sono 0.</li>\n</ul>\n<h3 id=\"limiti\">Limiti</h3>\n<ul>\n<li><strong>Sparsità</strong>: Poiché il vocabolario può essere molto grande, i vettori risultano molto lunghi e con molti zeri (alta dimensionalità).</li>\n<li><strong>Mancanza di relazioni semantiche</strong>: Non vi è alcuna informazione sulla similarità tra parole. Ad esempio, &ldquo;gatto&rdquo; e &ldquo;felino&rdquo; non hanno alcuna relazione esplicita nella rappresentazione one-hot.</li>\n</ul>\n<h2 id=\"word-embeddings\">Word Embeddings</h2>\n<p>Word embeddings sono vettori densi che rappresentano le parole in uno spazio continuo di dimensioni ridotte. Questo permette di catturare relazioni semantiche tra parole simili.</p>\n<h3 id=\"word2vec-mikolov-et-al-2013\"><strong>word2vec</strong> (Mikolov et al., 2013)</h3>\n<ul>\n<li>Utilizza reti neurali shallow per apprendere rappresentazioni densi e continue delle parole.</li>\n<li>Due principali architetture:</li>\n<li><strong>CBOW (Continuous Bag of Words)</strong>: Predice una parola data una finestra di contesto.</li>\n<li><strong>Skip-gram</strong>: Predice il contesto data una parola centrale.</li>\n<li>Cattura analogie semantiche: ad esempio, la relazione vettoriale tra &ldquo;re&rdquo; e &ldquo;uomo&rdquo; è simile a quella tra &ldquo;regina&rdquo; e &ldquo;donna&rdquo; (operazioni vettoriali: <code>re - uomo + donna ≈ regina</code>).</li>\n</ul>\n<h3 id=\"bert-devlin-et-al-2019\"><strong>BERT</strong> (Devlin et al., 2019)</h3>\n<ul>\n<li>Basato sull&rsquo;architettura Transformer.</li>\n<li>Apprendimento <strong>bidirezionale</strong>: a differenza di modelli precedenti come word2vec, BERT tiene conto del contesto sia a sinistra che a destra della parola target.</li>\n<li>Addestrato su grandi quantità di testo utilizzando due compiti principali:</li>\n<li><strong>Masked Language Model (MLM)</strong>: alcune parole sono nascoste e il modello deve predirle.</li>\n<li><strong>Next Sentence Prediction (NSP)</strong>: il modello apprende relazioni tra frasi consecutive.</li>\n<li>Ampiamente utilizzato per il fine-tuning su vari compiti NLP come classificazione del testo, Named Entity Recognition (NER) e question answering.</li>\n</ul>\n<h2 id=\"architetture-avanzate\">Architetture Avanzate</h2>\n<h3 id=\"gpt-generative-pre-trained-transformer\"><strong>GPT (Generative Pre-trained Transformer)</strong></h3>\n<ul>\n<li>Modello basato su Transformer <strong>unidirezionale</strong>.</li>\n<li>Pre-addestrato su grandi corpus di testo e fine-tunato per la generazione di testo.</li>\n<li>Usato per applicazioni come chatbot, completamento automatico e scrittura assistita.</li>\n</ul>\n<h3 id=\"t5-text-to-text-transfer-transformer\"><strong>T5 (Text-to-Text Transfer Transformer)</strong></h3>\n<ul>\n<li>Approccio task-agnostic: tutti i problemi NLP vengono convertiti in un formato di input/output testuale.</li>\n<li>Esempi di task:</li>\n<li><strong>Traduzione</strong>: &ldquo;Translate English to French: How are you?&rdquo; → &ldquo;Comment ça va?&rdquo;</li>\n<li><strong>Riassunto</strong>: &ldquo;Summarize: Questo articolo discute&hellip;&rdquo; → &ldquo;L&rsquo;articolo tratta di&hellip;&rdquo;</li>\n<li>Molto flessibile e utilizzato per diverse applicazioni NLP avanzate.</li>\n</ul>\n<h2 id=\"conclusione\">Conclusione</h2>\n<p>I modelli di rappresentazione del testo si sono evoluti notevolmente nel tempo, passando da semplici tecniche basate su vettori binari a potenti architetture di deep learning. La scelta del modello dipende dal compito specifico e dalle risorse computazionali disponibili.</p>\n<hr />\n<p><strong>Etichette</strong>: #NLP #WordEmbeddings #Transformer<br />\n<strong>Collegamenti</strong>: <span class=\"text-gray-600\">Deep Learning</span>, <a href=\"/theory/nlp/Introduzione all'NLP\" class=\"text-blue-600 hover:underline\">Introduzione all&rsquo;NLP</a></p>"
}