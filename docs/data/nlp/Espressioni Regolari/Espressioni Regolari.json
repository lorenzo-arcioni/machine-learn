{
  "title": "Espressioni Regolari (Regex)",
  "content": "<style>pre { line-height: 125%; }\ntd.linenos .normal { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }\nspan.linenos { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }\ntd.linenos .special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }\nspan.linenos.special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }\n.codehilite .hll { background-color: #ffffcc }\n.codehilite { background: #f8f8f8; }\n.codehilite .c { color: #3D7B7B; font-style: italic } /* Comment */\n.codehilite .err { border: 1px solid #F00 } /* Error */\n.codehilite .k { color: #008000; font-weight: bold } /* Keyword */\n.codehilite .o { color: #666 } /* Operator */\n.codehilite .ch { color: #3D7B7B; font-style: italic } /* Comment.Hashbang */\n.codehilite .cm { color: #3D7B7B; font-style: italic } /* Comment.Multiline */\n.codehilite .cp { color: #9C6500 } /* Comment.Preproc */\n.codehilite .cpf { color: #3D7B7B; font-style: italic } /* Comment.PreprocFile */\n.codehilite .c1 { color: #3D7B7B; font-style: italic } /* Comment.Single */\n.codehilite .cs { color: #3D7B7B; font-style: italic } /* Comment.Special */\n.codehilite .gd { color: #A00000 } /* Generic.Deleted */\n.codehilite .ge { font-style: italic } /* Generic.Emph */\n.codehilite .ges { font-weight: bold; font-style: italic } /* Generic.EmphStrong */\n.codehilite .gr { color: #E40000 } /* Generic.Error */\n.codehilite .gh { color: #000080; font-weight: bold } /* Generic.Heading */\n.codehilite .gi { color: #008400 } /* Generic.Inserted */\n.codehilite .go { color: #717171 } /* Generic.Output */\n.codehilite .gp { color: #000080; font-weight: bold } /* Generic.Prompt */\n.codehilite .gs { font-weight: bold } /* Generic.Strong */\n.codehilite .gu { color: #800080; font-weight: bold } /* Generic.Subheading */\n.codehilite .gt { color: #04D } /* Generic.Traceback */\n.codehilite .kc { color: #008000; font-weight: bold } /* Keyword.Constant */\n.codehilite .kd { color: #008000; font-weight: bold } /* Keyword.Declaration */\n.codehilite .kn { color: #008000; font-weight: bold } /* Keyword.Namespace */\n.codehilite .kp { color: #008000 } /* Keyword.Pseudo */\n.codehilite .kr { color: #008000; font-weight: bold } /* Keyword.Reserved */\n.codehilite .kt { color: #B00040 } /* Keyword.Type */\n.codehilite .m { color: #666 } /* Literal.Number */\n.codehilite .s { color: #BA2121 } /* Literal.String */\n.codehilite .na { color: #687822 } /* Name.Attribute */\n.codehilite .nb { color: #008000 } /* Name.Builtin */\n.codehilite .nc { color: #00F; font-weight: bold } /* Name.Class */\n.codehilite .no { color: #800 } /* Name.Constant */\n.codehilite .nd { color: #A2F } /* Name.Decorator */\n.codehilite .ni { color: #717171; font-weight: bold } /* Name.Entity */\n.codehilite .ne { color: #CB3F38; font-weight: bold } /* Name.Exception */\n.codehilite .nf { color: #00F } /* Name.Function */\n.codehilite .nl { color: #767600 } /* Name.Label */\n.codehilite .nn { color: #00F; font-weight: bold } /* Name.Namespace */\n.codehilite .nt { color: #008000; font-weight: bold } /* Name.Tag */\n.codehilite .nv { color: #19177C } /* Name.Variable */\n.codehilite .ow { color: #A2F; font-weight: bold } /* Operator.Word */\n.codehilite .w { color: #BBB } /* Text.Whitespace */\n.codehilite .mb { color: #666 } /* Literal.Number.Bin */\n.codehilite .mf { color: #666 } /* Literal.Number.Float */\n.codehilite .mh { color: #666 } /* Literal.Number.Hex */\n.codehilite .mi { color: #666 } /* Literal.Number.Integer */\n.codehilite .mo { color: #666 } /* Literal.Number.Oct */\n.codehilite .sa { color: #BA2121 } /* Literal.String.Affix */\n.codehilite .sb { color: #BA2121 } /* Literal.String.Backtick */\n.codehilite .sc { color: #BA2121 } /* Literal.String.Char */\n.codehilite .dl { color: #BA2121 } /* Literal.String.Delimiter */\n.codehilite .sd { color: #BA2121; font-style: italic } /* Literal.String.Doc */\n.codehilite .s2 { color: #BA2121 } /* Literal.String.Double */\n.codehilite .se { color: #AA5D1F; font-weight: bold } /* Literal.String.Escape */\n.codehilite .sh { color: #BA2121 } /* Literal.String.Heredoc */\n.codehilite .si { color: #A45A77; font-weight: bold } /* Literal.String.Interpol */\n.codehilite .sx { color: #008000 } /* Literal.String.Other */\n.codehilite .sr { color: #A45A77 } /* Literal.String.Regex */\n.codehilite .s1 { color: #BA2121 } /* Literal.String.Single */\n.codehilite .ss { color: #19177C } /* Literal.String.Symbol */\n.codehilite .bp { color: #008000 } /* Name.Builtin.Pseudo */\n.codehilite .fm { color: #00F } /* Name.Function.Magic */\n.codehilite .vc { color: #19177C } /* Name.Variable.Class */\n.codehilite .vg { color: #19177C } /* Name.Variable.Global */\n.codehilite .vi { color: #19177C } /* Name.Variable.Instance */\n.codehilite .vm { color: #19177C } /* Name.Variable.Magic */\n.codehilite .il { color: #666 } /* Literal.Number.Integer.Long */\n\n/* Styling per blocchi di codice */\n.codehilite {\n    background: transparent !important;\n    border-radius: 8px;\n    overflow: hidden;\n}\n.codehilite pre {\n    background: transparent !important;\n    margin: 0 !important;\n    padding: 20px !important;\n    font-family: 'Monaco', 'Menlo', 'Consolas', monospace !important;\n    font-size: 14px !important;\n    line-height: 1.5 !important;\n    white-space: pre !important;\n    overflow-x: auto !important;\n    color: inherit !important;\n}\n.codehilite code {\n    background: transparent !important;\n    padding: 0 !important;\n    font-family: inherit !important;\n}\n\n\n.code-wrapper { \n    position: relative; \n}\n.copy-button {\n    position: absolute; \n    top: 12px; \n    right: 12px; \n    padding: 6px 12px; \n    font-size: 12px;\n    cursor: pointer; \n    border: none; \n    border-radius: 4px; \n    background: rgba(255,255,255,0.9);\n    color: #374151; \n    transition: all 0.2s ease;\n    font-weight: 500;\n}\n.copy-button:hover { \n    background: rgba(255,255,255,1);\n    transform: translateY(-1px);\n}\n\n\ndetails.code-container {\n    border: 1px solid #e5e7eb; \n    border-radius: 12px; \n    background: #f9fafb;\n    margin: 16px 0;\n    transition: all 0.3s ease;\n}\ndetails.code-container summary {\n    padding: 12px 16px;\n    font-size: 14px; \n    color: #6b7280; \n    cursor: pointer; \n    outline: none; \n    user-select: none;\n    font-weight: 500;\n}\ndetails.code-container[open] summary::after { \n    content: \" (Hide Code)\"; \n    color: #9ca3af; \n}\ndetails.code-container:not([open]) summary::after { \n    content: \" (Show Code)\"; \n    color: #d1d5db; \n}\ndetails.code-container .code-wrapper {\n    padding: 0;\n    margin: 0;\n}\n</style>\n<h2 id=\"cosa-sono-le-regex\">Cosa sono le Regex?</h2>\n<ul>\n<li><strong>Definizione</strong>: Sequenze di caratteri che definiscono un pattern di ricerca, utilizzate per individuare, estrarre o sostituire testo. Fanno parte dei <strong>rule-based systems</strong>.</li>\n<li><strong>Scopo principale</strong>: Automatizzare operazioni di testo complesse (es. validare email, estrarre dati).</li>\n<li><strong>Esempi di utilizzo</strong>:</li>\n<li>Ricerca di parole chiave in documenti.</li>\n<li>Pulizia di dataset testuali.</li>\n<li>Sostituzioni avanzate in editor di codice.</li>\n<li><strong>Pattern Matching</strong>: Processo di identificazione di sequenze testuali che corrispondono a un formato specifico definito dal pattern. Le regex permettono di cercare, validare o estrarre porzioni di testo seguendo regole flessibili (es. trovare tutti i numeri in un documento).</li>\n</ul>\n<h2 id=\"strumenti-per-testare-le-regex\">Strumenti per Testare le Regex</h2>\n<ul>\n<li><strong>Regex101</strong> (<a href=\"https://regex101.com/\">link</a>): Piattaforma web con debugger integrato e spiegazioni dettagliate.</li>\n<li><strong>Python</strong> (<code>re</code> module): Libreria standard per manipolare regex (<a href=\"https://www.programiz.com/python-programming/regex\">esempi</a>).</li>\n<li><strong>Java</strong>: Utilizza <code>java.util.regex</code> per operazioni avanzate (<a href=\"https://www.w3schools.com/java/java_regex.asp\">guide</a>).</li>\n<li><strong>Perl</strong>: Linguaggio storico per regex, con operatori come <code>s///</code> per sostituzioni.</li>\n</ul>\n<h2 id=\"sintassi-base-delle-regex\">Sintassi Base delle Regex</h2>\n<h3 id=\"come-funziona-il-pattern-matching\">Come Funziona il Pattern Matching</h3>\n<p>Il pattern matching con regex si basa su regole di sintassi che combinano:<br />\n- <strong>Caratteri letterali</strong>: Cercano corrispondenze esatte (es. <code>cane</code> trova solo &ldquo;cane&rdquo;).<br />\n- <strong>Quantificatori</strong>: Specificano quante volte un elemento pu√≤ ripetersi (es. <code>?</code>, <code>+</code>, <code>*</code>).<br />\n- <strong>Ancore</strong>: Definiscono la posizione nel testo (es. <code>^</code> per l&rsquo;inizio riga, <code>$</code> per la fine).<br />\n- <strong>Classi di caratteri</strong>: Raggruppano opzioni valide (es. <code>[aeiou]</code> per vocali).\n- <strong>Range</strong>: Definiscono un intervallo di caratteri (es. <code>[a-z]</code> per lettere minuscole).\n- <strong>Gruppi</strong>: Isolano parti del pattern con <code>()</code> per riferimenti o operazioni specifiche.<br />\n- <strong>Alternanza</strong>: Permettono scelte tra opzioni con <code>|</code> (es. <code>gatto|cane</code>).<br />\n- <strong>Escape</strong>: I metacaratteri speciali (es. <code>.</code>, <code>*</code>) richiedono <code>\\</code> per essere cercati letteralmente (es. <code>\\.</code>).  </p>\n<h3 id=\"caratteri-letterali\">Caratteri Letterali</h3>\n<ul>\n<li><strong>Caratteri Literali</strong>: <code>a</code>, <code>b</code>, <code>c</code>, <code>d</code>, <code>e</code>, <code>f</code>, <code>g</code>, <code>h</code>, <code>i</code>, <code>j</code>, <code>k</code>, <code>l</code>, <code>m</code>, <code>n</code>, <code>o</code>, <code>p</code>, <code>q</code>, <code>r</code>, <code>s</code>, <code>t</code>, <code>u</code>, <code>v</code>, <code>w</code>, <code>x</code>, <code>y</code>, <code>z</code>.</li>\n<li><strong>Caratteri Numerici</strong>: <code>0</code>, <code>1</code>, <code>2</code>, <code>3</code>, <code>4</code>, <code>5</code>, <code>6</code>, <code>7</code>, <code>8</code>, <code>9</code>. </li>\n<li><strong>Caratteri Speciali</strong>: <code>\\space</code>, <code>\\t</code>, <code>\\n</code>, <code>\\r</code>, <code>\\f</code>, <code>\\b</code>, <code>\\a</code>, <code>\\e</code>, <code>\\0</code>, <code>\\xHH</code>, <code>\\uHHHH</code>, <code>\\UHHHHHHHH</code>.</li>\n<li><strong>Carattere di Escape</strong>: <code>\\</code>, <code>\\\\</code>, <code>\\n</code>, <code>\\t</code>, <code>\\r</code>, <code>\\f</code>, <code>\\b</code>, <code>\\a</code>, <code>\\e</code>, <code>\\0</code>, <code>\\xHH</code>, <code>\\uHHHH</code>, <code>\\UHHHHHHHH</code>.</li>\n</ul>\n<h3 id=\"metacaratteri\">Metacaratteri</h3>\n<table>\n<thead>\n<tr>\n<th>Simbolo</th>\n<th>Funzione</th>\n<th>Esempio</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>[]</code></td>\n<td>Definisce un set di caratteri ammessi.</td>\n<td><code>[Aa]mico</code> ‚Üí &ldquo;Amico&rdquo; o &ldquo;amico&rdquo;</td>\n</tr>\n<tr>\n<td><code>^</code></td>\n<td>1) Negazione dentro <code>[]</code>.<br>2) Inizio della riga.</td>\n<td><code>[^a-z]</code> ‚Üí Non lettere minuscole.<br><code>^Ciao</code> ‚Üí &ldquo;Ciao&rdquo; solo all&rsquo;inizio.</td>\n</tr>\n<tr>\n<td><code>?</code></td>\n<td>Zero o una occorrenza del carattere precedente.</td>\n<td><code>colou?r</code> ‚Üí &ldquo;color&rdquo; o &ldquo;colour&rdquo;</td>\n</tr>\n<tr>\n<td><code>.</code></td>\n<td>Qualsiasi carattere (tranne newline).</td>\n<td><code>b.t</code> ‚Üí &ldquo;bat&rdquo;, &ldquo;b@t&rdquo;, &ldquo;b3t&rdquo;</td>\n</tr>\n<tr>\n<td><code>*</code></td>\n<td>Zero o pi√π occorrenze del carattere precedente.</td>\n<td><code>lo*l</code> ‚Üí &ldquo;ll&rdquo;, &ldquo;lol&rdquo;, &ldquo;loooool&rdquo;</td>\n</tr>\n<tr>\n<td><code>+</code></td>\n<td>Una o pi√π occorrenze del carattere precedente.</td>\n<td><code>a+</code> ‚Üí &ldquo;a&rdquo;, &ldquo;aa&rdquo;, &ldquo;aaa&rdquo;</td>\n</tr>\n<tr>\n<td><code>{n,m}</code></td>\n<td>Da <code>n</code> a <code>m</code> occorrenze.</td>\n<td><code>a{2,4}</code> ‚Üí &ldquo;aa&rdquo;, &ldquo;aaa&rdquo;, &ldquo;aaaa&rdquo;</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"alias-utili\">Alias Utili</h3>\n<ul>\n<li><code>\\d</code>: Cifra numerica (<code>[0-9]</code>).</li>\n<li><code>\\w</code>: Carattere alfanumerico o underscore (<code>[a-zA-Z0-9_]</code>).</li>\n<li><code>\\s</code>: Spazio bianco (spazio, tab, newline).</li>\n<li><code>\\b</code>: Inizio o fine di una parola.</li>\n<li><code>\\D</code>, <code>\\W</code>, <code>\\S</code>, <code>\\B</code>: Negazioni dei precedenti.</li>\n<li><code>\\n</code>: Newline.</li>\n<li><code>\\t</code>: Tab.</li>\n<li><code>\\r</code>: Carattere di ritorno.</li>\n<li><code>\\f</code>: Carattere di fine riga.</li>\n<li><code>\\*</code>, <code>\\+</code>, <code>\\?</code>: Alias per <code>*</code>, <code>+</code>, <code>?</code>.</li>\n</ul>\n<h2 id=\"gruppi-di-cattura\">Gruppi di cattura</h2>\n<p>Le <strong>parentesi tonde</strong> <code>()</code> nelle espressioni regolari vengono utilizzate per definire <strong>gruppi di cattura</strong>. Questi gruppi possono essere utilizzati per riferirsi ai sottostringhe cercate e per eseguire operazioni di sostituzione.</p>\n<h3 id=\"esempio\">Esempio</h3>\n<div class=\"codehilite\"><pre><span></span><code>/(\\w+) (\\w+)/\n</code></pre></div>\n\n<p>Questa espressione cerca due parole separati da uno spazio. Se applicata alla stringa &ldquo;Nome Cognome&rdquo;, cattura &ldquo;Nome&rdquo; e &ldquo;Cognome&rdquo;.</p>\n<h2 id=\"esercizio-guidato-trovare-la-parola-the\">Esercizio Guidato: Trovare la Parola &ldquo;the&rdquo;</h2>\n<ol>\n<li><strong>Primo tentativo</strong>: `/the/ ‚Üí Trova &ldquo;the&rdquo; ma anche &ldquo;there&rdquo;, &ldquo;other&rdquo; (falsi positivi).**</li>\n<li><strong>Matching case-insensitive</strong>: <code>/[tT]he/ ‚Üí Trova \"The\" e \"the\".</code></li>\n<li>\n<p><strong>Evitare parole contenenti &ldquo;the&rdquo;</strong>:<br />\n<code>/[^a-zA-Z][tT]he[^a-zA-Z]/ ‚Üí \" the \" in \"Catch the ball\"</code> ma non in <code>Mathematic</code>. </p>\n</li>\n<li>\n<p><strong>Pattern avanzato</strong>:<br />\n<code>/(^|[^a-zA-Z])[tT]he([^a-zA-Z]|$)/ ‚Üí Considera inizio/fine riga.</code><br>\n   Cerca la parola &ldquo;the&rdquo; o &ldquo;The&rdquo; solo quando isolata (circondata da caratteri non alfabetici, spazi, punteggiatura, inizio/fine riga) compresi quando inizia o finisce una frase.</p>\n</li>\n</ol>\n<p><strong>Problemi comuni</strong>:\n- <strong>Falsi positivi</strong>: Match indesiderati (es. &ldquo;there&rdquo;).\n- <strong>Falsi negativi</strong>: Mancato match di &ldquo;The&rdquo; all&rsquo;inizio frase.\n- <strong>Bilanciamento</strong>: Aumentare la <strong>precisione</strong> (ridurre falsi positivi) e il <strong>recall</strong> (ridurre falsi negativi).</p>\n<h2 id=\"registri-parentesi-per-riferimenti\">Registri (Parentesi per Riferimenti)</h2>\n<p>Le <strong>parentesi tonde</strong> <code>()</code> registrano le occorrenze trovate nelle espressioni regolari in dei cosi detti <strong>registri</strong>.</p>\n<h3 id=\"sintassi-di-base\">Sintassi di Base</h3>\n<p>Un gruppo di cattura √® definito con <code>()</code> e pu√≤ essere richiamato con <code>\\n</code>, dove <code>n</code> √® il numero del gruppo nell&rsquo;ordine in cui compare.</p>\n<p><strong>Esempio</strong>:</p>\n<div class=\"codehilite\"><pre><span></span><code>/(\\d+)-(\\d+)/\n</code></pre></div>\n\n<p>Questa regex cattura due numeri separati da un trattino <code>-</code>:\n- <code>\\1</code> si riferisce al primo numero.\n- <code>\\2</code> si riferisce al secondo numero.</p>\n<p>Se applicata alla stringa <code>2023-2024</code>, cattura <code>2023</code> come <code>\\1</code> e <code>2024</code> come <code>\\2</code>.</p>\n<h3 id=\"applicazione-riorganizzazione-del-testo\">Applicazione: Riorganizzazione del Testo</h3>\n<p>I riferimenti ai gruppi catturati vengono utilizzati nelle operazioni di sostituzione.</p>\n<p><strong>Esempio</strong>:</p>\n<div class=\"codehilite\"><pre><span></span><code>s/(\\w+) (\\w+)/\\2 \\1/\n</code></pre></div>\n\n<p>Questa espressione inverte la posizione di due parole:\n- Input: <code>Nome Cognome</code>\n- Output: <code>Cognome Nome</code></p>\n<h3 id=\"altri-esempi-di-utilizzo\">Altri Esempi di Utilizzo</h3>\n<h4 id=\"1-estrazione-del-dominio-da-unemail\">1. Estrazione del Dominio da un&rsquo;Email</h4>\n<div class=\"codehilite\"><pre><span></span><code>/(\\w+)@(\\w+\\.\\w+)/\n</code></pre></div>\n\n<ul>\n<li><code>\\1</code> rappresenta il nome utente.</li>\n<li><code>\\2</code> rappresenta il dominio dell&rsquo;email.</li>\n</ul>\n<p>Se applicata a <code>esempio@email.com</code>, cattura:\n- <code>esempio</code> come <code>\\1</code>\n- <code>email.com</code> come <code>\\2</code></p>\n<h4 id=\"2-riformattazione-della-data\">2. Riformattazione della Data</h4>\n<p>Se una data √® scritta come <code>2024/03/26</code> e la si vuole convertire in <code>26-03-2024</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>s/(\\d{4})/(\\d{2})/(\\d{2})/\\3-\\2-\\1/\n</code></pre></div>\n\n<ul>\n<li><code>\\1</code> √® l&rsquo;anno.</li>\n<li><code>\\2</code> √® il mese.</li>\n<li><code>\\3</code> √® il giorno.</li>\n</ul>\n<p>Risultato della sostituzione: <code>26-03-2024</code>.</p>\n<h3 id=\"conclusione\">Conclusione</h3>\n<p>I <strong>registri</strong> e i <strong>gruppi di cattura</strong> sono strumenti potenti per manipolare il testo con le espressioni regolari. Sono utili per:\n- Estrarre informazioni specifiche.\n- Riordinare parti di una stringa.\n- Modificare il formato di dati testuali.</p>\n<h2 id=\"caso-storico-eliza-1966\">Caso Storico: ELIZA (1966)</h2>\n<p>Descrizione: Primo chatbot che simulava uno psicologo rogersiano.</p>\n<p>Funzionamento:</p>\n<ul>\n<li>\n<p>Utilizzava regex semplici per identificare parole chiave (es. &ldquo;madre&rdquo;, &ldquo;triste&rdquo;).</p>\n</li>\n<li>\n<p>Generava risposte predefinite basate su sostituzioni (es. &ldquo;Dimmi di pi√π sulla tua famiglia&rdquo;).</p>\n</li>\n</ul>\n<p>Limitazioni: Nessuna comprensione semantica, solo pattern matching superficiale.</p>\n<p><a href=\"https://www.youtube.com/watch?v=4sngIh0YJtk\" target=\"_blank\">ELIZA, video dimostrativo della funzionalit√†</a></p>\n<h2 id=\"risorse\">Risorse</h2>\n<ul>\n<li>\n<p>Libro: Speech and Language Processing (Jurafsky &amp; Martin).</p>\n</li>\n<li>\n<p>Tool online: Regex101 per testare pattern.</p>\n</li>\n<li>\n<p>Etichette: #Regex #NLP #PatternMatching</p>\n</li>\n<li>\n<p>Collegamenti: <a href=\"/theory/nlp/Introduzione all'NLP\" class=\"text-blue-600 hover:underline\">Introduzione all&rsquo;NLP</a>, <span class=\"text-gray-600\">Elaborazione del Testo</span></p>\n</li>\n</ul>"
}