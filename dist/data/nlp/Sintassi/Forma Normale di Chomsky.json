{
  "title": "Forma Normale di Chomsky (CNF)",
  "content": "<style>pre { line-height: 125%; }\ntd.linenos .normal { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }\nspan.linenos { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }\ntd.linenos .special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }\nspan.linenos.special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }\n.codehilite .hll { background-color: #ffffcc }\n.codehilite { background: #f8f8f8; }\n.codehilite .c { color: #3D7B7B; font-style: italic } /* Comment */\n.codehilite .err { border: 1px solid #F00 } /* Error */\n.codehilite .k { color: #008000; font-weight: bold } /* Keyword */\n.codehilite .o { color: #666 } /* Operator */\n.codehilite .ch { color: #3D7B7B; font-style: italic } /* Comment.Hashbang */\n.codehilite .cm { color: #3D7B7B; font-style: italic } /* Comment.Multiline */\n.codehilite .cp { color: #9C6500 } /* Comment.Preproc */\n.codehilite .cpf { color: #3D7B7B; font-style: italic } /* Comment.PreprocFile */\n.codehilite .c1 { color: #3D7B7B; font-style: italic } /* Comment.Single */\n.codehilite .cs { color: #3D7B7B; font-style: italic } /* Comment.Special */\n.codehilite .gd { color: #A00000 } /* Generic.Deleted */\n.codehilite .ge { font-style: italic } /* Generic.Emph */\n.codehilite .ges { font-weight: bold; font-style: italic } /* Generic.EmphStrong */\n.codehilite .gr { color: #E40000 } /* Generic.Error */\n.codehilite .gh { color: #000080; font-weight: bold } /* Generic.Heading */\n.codehilite .gi { color: #008400 } /* Generic.Inserted */\n.codehilite .go { color: #717171 } /* Generic.Output */\n.codehilite .gp { color: #000080; font-weight: bold } /* Generic.Prompt */\n.codehilite .gs { font-weight: bold } /* Generic.Strong */\n.codehilite .gu { color: #800080; font-weight: bold } /* Generic.Subheading */\n.codehilite .gt { color: #04D } /* Generic.Traceback */\n.codehilite .kc { color: #008000; font-weight: bold } /* Keyword.Constant */\n.codehilite .kd { color: #008000; font-weight: bold } /* Keyword.Declaration */\n.codehilite .kn { color: #008000; font-weight: bold } /* Keyword.Namespace */\n.codehilite .kp { color: #008000 } /* Keyword.Pseudo */\n.codehilite .kr { color: #008000; font-weight: bold } /* Keyword.Reserved */\n.codehilite .kt { color: #B00040 } /* Keyword.Type */\n.codehilite .m { color: #666 } /* Literal.Number */\n.codehilite .s { color: #BA2121 } /* Literal.String */\n.codehilite .na { color: #687822 } /* Name.Attribute */\n.codehilite .nb { color: #008000 } /* Name.Builtin */\n.codehilite .nc { color: #00F; font-weight: bold } /* Name.Class */\n.codehilite .no { color: #800 } /* Name.Constant */\n.codehilite .nd { color: #A2F } /* Name.Decorator */\n.codehilite .ni { color: #717171; font-weight: bold } /* Name.Entity */\n.codehilite .ne { color: #CB3F38; font-weight: bold } /* Name.Exception */\n.codehilite .nf { color: #00F } /* Name.Function */\n.codehilite .nl { color: #767600 } /* Name.Label */\n.codehilite .nn { color: #00F; font-weight: bold } /* Name.Namespace */\n.codehilite .nt { color: #008000; font-weight: bold } /* Name.Tag */\n.codehilite .nv { color: #19177C } /* Name.Variable */\n.codehilite .ow { color: #A2F; font-weight: bold } /* Operator.Word */\n.codehilite .w { color: #BBB } /* Text.Whitespace */\n.codehilite .mb { color: #666 } /* Literal.Number.Bin */\n.codehilite .mf { color: #666 } /* Literal.Number.Float */\n.codehilite .mh { color: #666 } /* Literal.Number.Hex */\n.codehilite .mi { color: #666 } /* Literal.Number.Integer */\n.codehilite .mo { color: #666 } /* Literal.Number.Oct */\n.codehilite .sa { color: #BA2121 } /* Literal.String.Affix */\n.codehilite .sb { color: #BA2121 } /* Literal.String.Backtick */\n.codehilite .sc { color: #BA2121 } /* Literal.String.Char */\n.codehilite .dl { color: #BA2121 } /* Literal.String.Delimiter */\n.codehilite .sd { color: #BA2121; font-style: italic } /* Literal.String.Doc */\n.codehilite .s2 { color: #BA2121 } /* Literal.String.Double */\n.codehilite .se { color: #AA5D1F; font-weight: bold } /* Literal.String.Escape */\n.codehilite .sh { color: #BA2121 } /* Literal.String.Heredoc */\n.codehilite .si { color: #A45A77; font-weight: bold } /* Literal.String.Interpol */\n.codehilite .sx { color: #008000 } /* Literal.String.Other */\n.codehilite .sr { color: #A45A77 } /* Literal.String.Regex */\n.codehilite .s1 { color: #BA2121 } /* Literal.String.Single */\n.codehilite .ss { color: #19177C } /* Literal.String.Symbol */\n.codehilite .bp { color: #008000 } /* Name.Builtin.Pseudo */\n.codehilite .fm { color: #00F } /* Name.Function.Magic */\n.codehilite .vc { color: #19177C } /* Name.Variable.Class */\n.codehilite .vg { color: #19177C } /* Name.Variable.Global */\n.codehilite .vi { color: #19177C } /* Name.Variable.Instance */\n.codehilite .vm { color: #19177C } /* Name.Variable.Magic */\n.codehilite .il { color: #666 } /* Literal.Number.Integer.Long */\n\n/* Styling per blocchi di codice */\n.codehilite {\n    background: transparent !important;\n    border-radius: 8px;\n    overflow: hidden;\n}\n.codehilite pre {\n    background: transparent !important;\n    margin: 0 !important;\n    padding: 20px !important;\n    font-family: 'Monaco', 'Menlo', 'Consolas', monospace !important;\n    font-size: 14px !important;\n    line-height: 1.5 !important;\n    white-space: pre !important;\n    overflow-x: auto !important;\n    color: inherit !important;\n}\n.codehilite code {\n    background: transparent !important;\n    padding: 0 !important;\n    font-family: inherit !important;\n}\n\n\n.code-wrapper { \n    position: relative; \n}\n.copy-button {\n    position: absolute; \n    top: 12px; \n    right: 12px; \n    padding: 6px 12px; \n    font-size: 12px;\n    cursor: pointer; \n    border: none; \n    border-radius: 4px; \n    background: rgba(255,255,255,0.9);\n    color: #374151; \n    transition: all 0.2s ease;\n    font-weight: 500;\n}\n.copy-button:hover { \n    background: rgba(255,255,255,1);\n    transform: translateY(-1px);\n}\n\n\ndetails.code-container {\n    border: 1px solid #e5e7eb; \n    border-radius: 12px; \n    background: #f9fafb;\n    margin: 16px 0;\n    transition: all 0.3s ease;\n}\ndetails.code-container summary {\n    padding: 12px 16px;\n    font-size: 14px; \n    color: #6b7280; \n    cursor: pointer; \n    outline: none; \n    user-select: none;\n    font-weight: 500;\n}\ndetails.code-container[open] summary::after { \n    content: \" (Hide Code)\"; \n    color: #9ca3af; \n}\ndetails.code-container:not([open]) summary::after { \n    content: \" (Show Code)\"; \n    color: #d1d5db; \n}\ndetails.code-container .code-wrapper {\n    padding: 0;\n    margin: 0;\n}\n/* Blocchi di codice sempre visibili */\n.code-visible {\n    border: 1px solid #e5e7eb;\n    border-radius: 12px;\n    background: #f9fafb;\n    margin: 16px 0;\n}\n.code-visible .code-wrapper {\n    padding: 0;\n    margin: 0;\n}\n</style>\n<p>La <strong>Forma Normale di Chomsky</strong> (CNF) è una particolare forma di rappresentazione delle <strong><a href=\"/theory/nlp/Sintassi/Grammatiche Context-free\" class=\"text-blue-600 hover:underline\">grammatiche libere dal contesto</a></strong> (CFG), utile in molti algoritmi di analisi sintattica, come l&rsquo;algoritmo di <strong><a href=\"/theory/nlp/Sintassi/Algoritmo CKY\" class=\"text-blue-600 hover:underline\">Cocke–Younger–Kasami (CYK)</a></strong>.</p>\n<h2 id=\"definizione-formale\">Definizione Formale</h2>\n<p>Una grammatica </p>\n$$\nG = (V, \\Sigma, R, S)\n$$\n<p>dove:</p>\n<ul>\n<li>$V$ è l&rsquo;insieme dei simboli <em>non terminali</em> (categorie sintattiche come frasi o sintagmi)</li>\n<li>$\\Sigma$ è l&rsquo;insieme dei simboli <em>terminali</em> (le parole o i simboli del lessico)</li>\n<li>$R$ è l&rsquo;insieme delle <em>produzioni</em> o <em>regole</em> della forma $A \\rightarrow B$, con $A \\in V$ e $B \\in (V \\cup \\Sigma)^*$. Quindi $R \\subseteq V \\times (V \\cup \\Sigma)^*$.</li>\n<li>$S$ è il simbolo iniziale, da cui parte la derivazione. Quindi, $S \\in V \\land \\exists(S, \\beta) \\in R \\land \\beta \\neq \\epsilon$</li>\n</ul>\n<p>è in <strong>Forma Normale di Chomsky</strong> se tutte le sue produzioni sono della forma:</p>\n<ul>\n<li>$A \\rightarrow BC$ dove $A, B, C \\in V$ e $B, C \\neq S$ (produzione binaria)</li>\n<li>$A \\rightarrow a$ dove $a \\in \\Sigma$ (produzione terminale)</li>\n</ul>\n<p><strong>Eccezione (solo per il simbolo iniziale):</strong></p>\n<ul>\n<li>$S \\rightarrow \\varepsilon$ è permesso <strong>solo se</strong> $\\varepsilon \\in L(G)$</li>\n</ul>\n<h2 id=\"proprieta-delle-grammatiche-in-cnf\">Proprietà delle grammatiche in CNF</h2>\n<ol>\n<li>\n<p><strong>Equivalenza</strong>: Ogni grammatica libera dal contesto può essere trasformata in una grammatica equivalente in CNF (cioè genera lo stesso linguaggio).</p>\n</li>\n<li>\n<p><strong>Utilità computazionale</strong>: Le grammatiche in CNF sono fondamentali per l’analisi sintattica algoritmica, in particolare per:</p>\n</li>\n<li>Algoritmi di parsing bottom-up come <strong>CYK</strong></li>\n<li>\n<p>Analisi di ambiguità e minimizzazione</p>\n</li>\n<li>\n<p><strong>Forma standardizzata</strong>: Essendo le produzioni molto restrittive, la CNF è una base utile per dimostrazioni teoriche, come il teorema di Pumping per CFG.</p>\n</li>\n<li>\n<p><strong>Lunghezza delle derivazioni</strong>: Ogni stringa di lunghezza $n$ derivata da una grammatica in CNF richiede esattamente $2n - 1$ passaggi (produzioni), se $\\varepsilon$ non è incluso.</p>\n</li>\n</ol>\n<h2 id=\"algoritmo-di-conversione-in-cnf\">Algoritmo di conversione in CNF</h2>\n<p>La conversione di una grammatica $G$ in CNF avviene attraverso una serie di <strong>trasformazioni equivalenti</strong>. Ecco l&rsquo;algoritmo passo passo:</p>\n<h3 id=\"passo-1-aggiunta-di-un-nuovo-simbolo-iniziale\">Passo 1: Aggiunta di un nuovo simbolo iniziale</h3>\n<p>Aggiungiamo un nuovo simbolo iniziale $S_0 \\notin V$ e la produzione:</p>\n$$\nS_0 \\rightarrow S\n$$\n<p>Questo assicura che il simbolo iniziale originale non compaia mai a destra di una produzione (utile in seguito).</p>\n<h3 id=\"passo-2-rimozione-delle-produzioni-math_inline_36\">Passo 2: Rimozione delle produzioni $\\varepsilon$</h3>\n<p>Per ogni produzione del tipo $A \\rightarrow \\varepsilon$, rimuovila e:\n- Per ogni altra produzione che contiene $A$, aggiungi una versione alternativa della produzione con $A$ rimosso.</p>\n<p>Ripeti finché non ci sono più produzioni $\\varepsilon$, tranne eventualmente $S_0 \\rightarrow \\varepsilon$ se necessario.</p>\n<h3 id=\"passo-3-rimozione-delle-unita\">Passo 3: Rimozione delle unità</h3>\n<p>Elimina tutte le produzioni di tipo $A \\rightarrow B$, dove $A, B \\in V$.</p>\n<p>Per ogni $A \\rightarrow B$, sostituisci con le produzioni di $B$, cioè aggiungi tutte le produzioni $B \\rightarrow \\alpha$ come $A \\rightarrow \\alpha$, finché non ci sono più produzioni unitarie.</p>\n<h3 id=\"passo-4-rimozione-dei-simboli-inutili\">Passo 4: Rimozione dei simboli inutili</h3>\n<p>Elimina:\n1. <strong>Simboli non generativi</strong>: simboli che non portano ad alcuna stringa terminale.\n2. <strong>Simboli non raggiungibili</strong>: simboli che non sono raggiunti partendo da $S_0$.</p>\n<h3 id=\"passo-5-conversione-delle-produzioni\">Passo 5: Conversione delle produzioni</h3>\n<p>Ora tutte le produzioni devono essere trasformate per rispettare la CNF:</p>\n<h4 id=\"a-terminali-in-produzioni-lunghe\">a. Terminali in produzioni lunghe</h4>\n<p>Se una produzione ha terminali con altri simboli, come:</p>\n$$\nA \\rightarrow aB\n$$\n<p>Sostituisci $a$ con una nuova variabile $X_a$, aggiungendo la produzione:</p>\n$$\nX_a \\rightarrow a\n$$\n<p>Ora:</p>\n$$\nA \\rightarrow X_a B\n$$\n<p>Ripeti per ogni terminale non isolato.</p>\n<h4 id=\"b-produzioni-con-piu-di-due-variabili\">b. Produzioni con più di due variabili</h4>\n<p>Se hai produzioni come:</p>\n$$\nA \\rightarrow B C D\n$$\n<p>Suddividile in binarie introducendo nuove variabili:</p>\n$$\nA \\rightarrow B X_1 \\\\\nX_1 \\rightarrow C D\n$$\n<p>E se necessario:</p>\n$$\nX_1 \\rightarrow C X_2 \\\\\nX_2 \\rightarrow D E\n$$\n<p>Fino ad avere solo produzioni binarie.</p>\n<h2 id=\"esempio-pratico\">Esempio pratico</h2>\n<h3 id=\"grammatica-originale\">Grammatica originale</h3>\n$$\nS \\rightarrow aSb \\mid \\varepsilon\n$$\n<h3 id=\"passo-1-nuovo-simbolo-iniziale\">Passo 1: Nuovo simbolo iniziale</h3>\n$$\nS_0 \\rightarrow S\n$$\n<h3 id=\"passo-2-eliminazione-math_inline_51\">Passo 2: Eliminazione $\\varepsilon$</h3>\n<p>Poiché $S \\rightarrow \\varepsilon$, aggiungiamo:</p>\n$$\nS \\rightarrow aSb \\\\\nS \\rightarrow ab\n$$\n<p>Eliminiamo $S \\rightarrow \\varepsilon$</p>\n<h3 id=\"passo-3-nessuna-produzione-unitaria\">Passo 3: Nessuna produzione unitaria</h3>\n<h3 id=\"passo-4-tutti-i-simboli-sono-utili\">Passo 4: Tutti i simboli sono utili</h3>\n<h3 id=\"passo-5-cnf\">Passo 5: CNF</h3>\n<p>Sostituiamo i terminali:</p>\n$$\nA \\rightarrow a \\quad B \\rightarrow b\n$$\n<p>Convertiamo:</p>\n$$\nS \\rightarrow aSb \\Rightarrow A S B \\Rightarrow S \\rightarrow A X_1 \\\\\nX_1 \\rightarrow S B\n$$\n$$\nS \\rightarrow ab \\Rightarrow A B\n$$\n<p>Produzioni finali:</p>\n$$\nS_0 \\rightarrow S \\\\\nS \\rightarrow A X_1 \\mid A B \\\\\nX_1 \\rightarrow S B \\\\\nA \\rightarrow a \\\\\nB \\rightarrow b\n$$\n<h2 id=\"conclusioni\">Conclusioni</h2>\n<p>Le grammatiche in Forma Normale di Chomsky sono un pilastro dell&rsquo;informatica teorica e fondamentali per l&rsquo;analisi sintattica. Comprenderne la trasformazione permette di applicare potenti strumenti algoritmici ai linguaggi formali e allo studio della computabilità.</p>"
}