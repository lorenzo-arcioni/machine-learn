{
  "title": "üî§ Dense Word Embeddings",
  "content": "<style>pre { line-height: 125%; }\ntd.linenos .normal { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }\nspan.linenos { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }\ntd.linenos .special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }\nspan.linenos.special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }\n.codehilite .hll { background-color: #ffffcc }\n.codehilite { background: #f8f8f8; }\n.codehilite .c { color: #3D7B7B; font-style: italic } /* Comment */\n.codehilite .err { border: 1px solid #F00 } /* Error */\n.codehilite .k { color: #008000; font-weight: bold } /* Keyword */\n.codehilite .o { color: #666 } /* Operator */\n.codehilite .ch { color: #3D7B7B; font-style: italic } /* Comment.Hashbang */\n.codehilite .cm { color: #3D7B7B; font-style: italic } /* Comment.Multiline */\n.codehilite .cp { color: #9C6500 } /* Comment.Preproc */\n.codehilite .cpf { color: #3D7B7B; font-style: italic } /* Comment.PreprocFile */\n.codehilite .c1 { color: #3D7B7B; font-style: italic } /* Comment.Single */\n.codehilite .cs { color: #3D7B7B; font-style: italic } /* Comment.Special */\n.codehilite .gd { color: #A00000 } /* Generic.Deleted */\n.codehilite .ge { font-style: italic } /* Generic.Emph */\n.codehilite .ges { font-weight: bold; font-style: italic } /* Generic.EmphStrong */\n.codehilite .gr { color: #E40000 } /* Generic.Error */\n.codehilite .gh { color: #000080; font-weight: bold } /* Generic.Heading */\n.codehilite .gi { color: #008400 } /* Generic.Inserted */\n.codehilite .go { color: #717171 } /* Generic.Output */\n.codehilite .gp { color: #000080; font-weight: bold } /* Generic.Prompt */\n.codehilite .gs { font-weight: bold } /* Generic.Strong */\n.codehilite .gu { color: #800080; font-weight: bold } /* Generic.Subheading */\n.codehilite .gt { color: #04D } /* Generic.Traceback */\n.codehilite .kc { color: #008000; font-weight: bold } /* Keyword.Constant */\n.codehilite .kd { color: #008000; font-weight: bold } /* Keyword.Declaration */\n.codehilite .kn { color: #008000; font-weight: bold } /* Keyword.Namespace */\n.codehilite .kp { color: #008000 } /* Keyword.Pseudo */\n.codehilite .kr { color: #008000; font-weight: bold } /* Keyword.Reserved */\n.codehilite .kt { color: #B00040 } /* Keyword.Type */\n.codehilite .m { color: #666 } /* Literal.Number */\n.codehilite .s { color: #BA2121 } /* Literal.String */\n.codehilite .na { color: #687822 } /* Name.Attribute */\n.codehilite .nb { color: #008000 } /* Name.Builtin */\n.codehilite .nc { color: #00F; font-weight: bold } /* Name.Class */\n.codehilite .no { color: #800 } /* Name.Constant */\n.codehilite .nd { color: #A2F } /* Name.Decorator */\n.codehilite .ni { color: #717171; font-weight: bold } /* Name.Entity */\n.codehilite .ne { color: #CB3F38; font-weight: bold } /* Name.Exception */\n.codehilite .nf { color: #00F } /* Name.Function */\n.codehilite .nl { color: #767600 } /* Name.Label */\n.codehilite .nn { color: #00F; font-weight: bold } /* Name.Namespace */\n.codehilite .nt { color: #008000; font-weight: bold } /* Name.Tag */\n.codehilite .nv { color: #19177C } /* Name.Variable */\n.codehilite .ow { color: #A2F; font-weight: bold } /* Operator.Word */\n.codehilite .w { color: #BBB } /* Text.Whitespace */\n.codehilite .mb { color: #666 } /* Literal.Number.Bin */\n.codehilite .mf { color: #666 } /* Literal.Number.Float */\n.codehilite .mh { color: #666 } /* Literal.Number.Hex */\n.codehilite .mi { color: #666 } /* Literal.Number.Integer */\n.codehilite .mo { color: #666 } /* Literal.Number.Oct */\n.codehilite .sa { color: #BA2121 } /* Literal.String.Affix */\n.codehilite .sb { color: #BA2121 } /* Literal.String.Backtick */\n.codehilite .sc { color: #BA2121 } /* Literal.String.Char */\n.codehilite .dl { color: #BA2121 } /* Literal.String.Delimiter */\n.codehilite .sd { color: #BA2121; font-style: italic } /* Literal.String.Doc */\n.codehilite .s2 { color: #BA2121 } /* Literal.String.Double */\n.codehilite .se { color: #AA5D1F; font-weight: bold } /* Literal.String.Escape */\n.codehilite .sh { color: #BA2121 } /* Literal.String.Heredoc */\n.codehilite .si { color: #A45A77; font-weight: bold } /* Literal.String.Interpol */\n.codehilite .sx { color: #008000 } /* Literal.String.Other */\n.codehilite .sr { color: #A45A77 } /* Literal.String.Regex */\n.codehilite .s1 { color: #BA2121 } /* Literal.String.Single */\n.codehilite .ss { color: #19177C } /* Literal.String.Symbol */\n.codehilite .bp { color: #008000 } /* Name.Builtin.Pseudo */\n.codehilite .fm { color: #00F } /* Name.Function.Magic */\n.codehilite .vc { color: #19177C } /* Name.Variable.Class */\n.codehilite .vg { color: #19177C } /* Name.Variable.Global */\n.codehilite .vi { color: #19177C } /* Name.Variable.Instance */\n.codehilite .vm { color: #19177C } /* Name.Variable.Magic */\n.codehilite .il { color: #666 } /* Literal.Number.Integer.Long */\n\n/* Styling per blocchi di codice */\n.codehilite {\n    background: transparent !important;\n    border-radius: 8px;\n    overflow: hidden;\n}\n.codehilite pre {\n    background: transparent !important;\n    margin: 0 !important;\n    padding: 20px !important;\n    font-family: 'Monaco', 'Menlo', 'Consolas', monospace !important;\n    font-size: 14px !important;\n    line-height: 1.5 !important;\n    white-space: pre !important;\n    overflow-x: auto !important;\n    color: inherit !important;\n}\n.codehilite code {\n    background: transparent !important;\n    padding: 0 !important;\n    font-family: inherit !important;\n}\n\n\n.code-wrapper { \n    position: relative; \n}\n.copy-button {\n    position: absolute; \n    top: 12px; \n    right: 12px; \n    padding: 6px 12px; \n    font-size: 12px;\n    cursor: pointer; \n    border: none; \n    border-radius: 4px; \n    background: rgba(255,255,255,0.9);\n    color: #374151; \n    transition: all 0.2s ease;\n    font-weight: 500;\n}\n.copy-button:hover { \n    background: rgba(255,255,255,1);\n    transform: translateY(-1px);\n}\n\n\ndetails.code-container {\n    border: 1px solid #e5e7eb; \n    border-radius: 12px; \n    background: #f9fafb;\n    margin: 16px 0;\n    transition: all 0.3s ease;\n}\ndetails.code-container summary {\n    padding: 12px 16px;\n    font-size: 14px; \n    color: #6b7280; \n    cursor: pointer; \n    outline: none; \n    user-select: none;\n    font-weight: 500;\n}\ndetails.code-container[open] summary::after { \n    content: \" (Hide Code)\"; \n    color: #9ca3af; \n}\ndetails.code-container:not([open]) summary::after { \n    content: \" (Show Code)\"; \n    color: #d1d5db; \n}\ndetails.code-container .code-wrapper {\n    padding: 0;\n    margin: 0;\n}\n</style>\n<h2 id=\"concetti-chiave\">üß† Concetti Chiave</h2>\n<p>I <strong>word embeddings densi</strong> sono rappresentazioni continue e distribuite delle parole in uno spazio vettoriale a bassa dimensione ($\\mathbb{R}^d$). Raspresentano uno sviluppo fondamentale nell‚ÄôNLP moderno perch√© permettono ai modelli di <strong>catturare somiglianze semantiche</strong> tra le parole.</p>\n<h3 id=\"obiettivo\">‚úÖ Obiettivo</h3>\n<blockquote>\n<p>Mappare ogni parola $w \\in \\mathcal{V}$ (vocabolario) in un vettore continuo $\\mathbf{w} \\in \\mathbb{R}^d$ con $d \\ll |\\mathcal{V}|$</p>\n</blockquote>\n<h2 id=\"perche-embeddings-densi\">üîç Perch√© embeddings &ldquo;densi&rdquo;?</h2>\n<p>Con i <a href=\"/theory/nlp/Semantica/Vector Semantics/Sparse Word Embeddings\" class=\"text-blue-600 hover:underline\">Sparse Word Embeddings</a> (come one-hot encoding o matrici sparse TF-IDF):</p>\n<ul>\n<li>üü• I vettori sono <strong>sparsi</strong>: la maggior parte delle componenti √® zero.</li>\n<li>üü• Non catturano <strong>relazioni semantiche</strong> (es. ‚Äúgatto‚Äù e ‚Äúfelino‚Äù sono ortogonali).</li>\n<li>üü• Non generalizzano bene.</li>\n</ul>\n<p>Con i dense word embeddings:</p>\n<ul>\n<li>‚úÖ Le parole <strong>semanticamente simili</strong> hanno vettori <strong>vicini</strong> (es. distanza coseno piccola)</li>\n<li>‚úÖ Le rappresentazioni sono <strong>dense</strong>: tutti i valori sono reali e significativi</li>\n<li>‚úÖ I modelli possono sfruttare <strong>algebra lineare</strong> semantica:<br />\n  $\\text{king} - \\text{man} + \\text{woman} \\approx \\text{queen}$</li>\n</ul>\n<h2 id=\"formato-matematico\">‚öôÔ∏è Formato matematico</h2>\n<p>Dati:</p>\n<ul>\n<li>Un vocabolario $\\mathcal{V}$</li>\n<li>Ogni parola $w_i$ √® rappresentata da un vettore $\\mathbf{w}_i \\in \\mathbb{R}^d$</li>\n<li>Una matrice $\\mathbf{W} \\in \\mathbb{R}^{|\\mathcal V| \\times d}$ che contiene tutti gli embeddings come righe</li>\n</ul>\n<p>Allora:</p>\n$$\n\\mathbf{W} = \n\\begin{bmatrix}\n\\text{--------- }\\mathbf{w}_1^\\top \\text{ ---------}\\\\\n\\text{--------- }\\mathbf{w}_2^\\top \\text{ ---------}\\\\\n\\vdots \\\\\n\\text{--------- }\\mathbf{w}_V^\\top \\text{ ---------}\n\\end{bmatrix}\n$$\n<p>Con:\n- $d$: dimensione dello spazio semantico (tipicamente 50-300)\n- Ogni riga: un vettore di embedding per una parola</p>\n<h2 id=\"come-si-apprendono\">üß™ Come si apprendono?</h2>\n<p>Esistono diversi approcci per apprendere embeddings:</p>\n<h3 id=\"1-predictive-basati-su-modelli-linguistici-word2vec-fasttext\">1. üè∑Ô∏è Predictive: basati su modelli linguistici (<a href=\"/theory/nlp/Semantica/Vector Semantics/Word2Vec\" class=\"text-blue-600 hover:underline\">Word2Vec</a>, FastText)</h3>\n<ul>\n<li>Usano una rete neurale shallow per predire parole basate sul contesto o viceversa</li>\n<li>Si basano sull&rsquo;ipotesi di distribuzionalit√†:<blockquote>\n<p>&ldquo;Parole che appaiono in contesti simili hanno significati simili&rdquo; (Harris, 1954)</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"word2vec-cbow-e-skip-gram\">üìå <a href=\"/theory/nlp/Semantica/Vector Semantics/Word2Vec\" class=\"text-blue-600 hover:underline\">Word2Vec</a> (CBOW e Skip-gram)</h4>\n<ul>\n<li><strong>CBOW (Continuous Bag of Words)</strong>: predice una parola dato il suo contesto</li>\n<li><strong>Skip-Gram</strong>: predice le parole del contesto dato una parola centrale</li>\n</ul>\n<h5 id=\"skip-gram-formulazione\">Skip-Gram: formulazione</h5>\n<p>Dati $T$ token $(w_1, \\dots, w_T)$, massimizziamo:</p>\n$$\n\\mathcal{L} = \\sum_{t=1}^T \\sum_{-c \\le j \\le c, j \\neq 0} \\log P(w_{t+j} \\mid w_t)\n$$\n<p>Dove $c$ √® la dimensione della finestra di contesto.</p>\n<p>La probabilit√† condizionata √® modellata tramite softmax:</p>\n$$\nP(w_o \\mid w_i) = \\frac{\\exp\\left(\\mathbf{v}_{w_o}^\\top \\cdot \\mathbf{v}_{w_i}\\right)}{\\sum_{w \\in \\mathcal{V}} \\exp\\left(\\mathbf{v}_w^\\top \\cdot \\mathbf{v}_{w_i}\\right)}\n$$\n<blockquote>\n<p>‚ö†Ô∏è Calcolo costoso per vocabolari grandi ‚Üí si usano trucchi: <strong>Negative Sampling</strong>, <strong>Hierarchical Softmax</strong></p>\n</blockquote>\n<h3 id=\"2-count-based-basati-su-co-occorrenze-es-glove\">2. üìä Count-based: basati su co-occorrenze (es. GloVe)</h3>\n<ul>\n<li>Costruiscono una <strong>matrice di co-occorrenza</strong> globale $X \\in \\mathbb{R}^{V \\times V}$, dove $X_{ij}$ √® quante volte $w_j$ appare nel contesto di $w_i$</li>\n<li>Idea: l‚Äôembedding di una parola deve catturare le <strong>statistiche di co-occorrenza</strong> con tutte le altre</li>\n</ul>\n<h4 id=\"glove-global-vectors-for-word-representation\">GloVe: Global Vectors for Word Representation</h4>\n<p>Minimizza:</p>\n$$\nJ = \\sum_{i,j=1}^{V} f(X_{ij}) \\left( \\mathbf{w}_i^\\top \\tilde{\\mathbf{w}}_j + b_i + \\tilde{b}_j - \\log X_{ij} \\right)^2\n$$\n<ul>\n<li>$\\mathbf{w}_i$, $\\tilde{\\mathbf{w}}_j$: embeddings per parola e contesto</li>\n<li>$b_i$, $\\tilde{b}_j$: bias</li>\n<li>$f(x)$: funzione peso per regolare l‚Äôinfluenza delle co-occorrenze molto frequenti</li>\n</ul>\n<h2 id=\"proprieta-geometriche-emergenti\">üßÆ Propriet√† geometriche emergenti</h2>\n<ul>\n<li>Le parole con significato simile formano <strong>cluster</strong> nello spazio $\\mathbb{R}^d$</li>\n<li>Relazioni semantiche lineari diventano <strong>operazioni vettoriali</strong></li>\n<li>Gli assi principali possono catturare dimensioni latenti come <strong>genere</strong>, <strong>tempo</strong>, <strong>concretezza</strong></li>\n</ul>\n<h2 id=\"embeddings-pre-addestrati\">üíæ Embeddings Pre-Addestrati</h2>\n<p>Sono disponibili embeddings gi√† addestrati su enormi corpora:</p>\n<ul>\n<li><strong><a href=\"/theory/nlp/Semantica/Vector Semantics/Word2Vec\" class=\"text-blue-600 hover:underline\">Word2Vec</a></strong> (Google News)</li>\n<li><strong>GloVe</strong> (Wikipedia + Gigaword)</li>\n<li><strong>FastText</strong> (Facebook AI)</li>\n<li><strong>ELMo</strong>, <strong>BERT</strong> (contextual embeddings ‚Üí pi√π avanzati)</li>\n</ul>\n<p>Vantaggi:</p>\n<ul>\n<li>üöÄ Riutilizzabili in downstream tasks</li>\n<li>üìà Migliorano le performance anche su dataset piccoli</li>\n</ul>\n<h2 id=\"limitazioni\">üìâ Limitazioni</h2>\n<ul>\n<li>Non contestualizzati: ogni parola ha <strong>una sola rappresentazione</strong>, anche se pu√≤ avere <strong>pi√π significati</strong> (es. <em>banca</em> come istituto finanziario o riva del fiume)</li>\n<li>Non aggiornabili in tempo reale durante training fine-tuning</li>\n<li>Hanno <strong>bias</strong> (di genere, razza, ecc.) appresi dal corpus</li>\n</ul>\n<h2 id=\"conclusione\">üîö Conclusione</h2>\n<p>I word embeddings densi hanno rivoluzionato il NLP grazie alla loro capacit√† di:</p>\n<ul>\n<li>Rappresentare il significato distribuzionale in forma compatta</li>\n<li>Catturare similarit√† semantiche e sintattiche</li>\n<li>Abilitare tecniche avanzate di NLP (classificazione, similarit√†, clustering, ecc.)</li>\n</ul>\n<p>Sono alla base dei modelli <strong>contestualizzati</strong> moderni (BERT, GPT), che ne estendono la filosofia.</p>\n<h3 id=\"riassumendo-i-principali-vantaggi-sono\">‚úÖ Riassumendo, i principali vantaggi sono:</h3>\n<ul>\n<li><strong>Compattezza</strong>: ogni parola √® rappresentata da un vettore $d$-dimensionale, dove $d$ √® gestibile computazionalmente (tipicamente 100‚Äì300).</li>\n<li><strong>Semanticit√†</strong>: parole simili semanticamente hanno vettori geometricamente vicini.</li>\n<li><strong>Operazioni vettoriali significative</strong>: le differenze tra vettori spesso riflettono analogie semantiche coerenti.</li>\n<li><strong>Riutilizzabilit√†</strong>: possono essere pre-addestrati su grandi corpora e impiegati in numerose applicazioni downstream.</li>\n</ul>\n<h3 id=\"tuttavia-presentano-anche-alcune-criticita\">‚ö†Ô∏è Tuttavia, presentano anche alcune criticit√†:</h3>\n<ul>\n<li>La rappresentazione √® <strong>statica</strong>: ogni parola ha un solo embedding, indipendentemente dal contesto in cui appare.</li>\n<li>Sono soggetti a <strong>bias</strong> insiti nei dati di addestramento (sessuali, razziali, culturali, ecc.).</li>\n<li>Non gestiscono ambiguit√† lessicali, polisemia o variazioni contestuali in modo naturale.</li>\n</ul>\n<p>Per queste ragioni, negli ultimi anni si √® evoluta una nuova generazione di rappresentazioni: gli <strong>embeddings contestualizzati</strong> (es. ELMo, BERT, GPT), i quali, invece di assegnare un unico vettore a ciascuna parola, generano una rappresentazione dinamica <strong>dipendente dal contesto locale</strong>.</p>"
}