{
  "title": "Sparse VSMs (Vector Space Models Sparsi)",
  "content": "<style>pre { line-height: 125%; }\ntd.linenos .normal { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }\nspan.linenos { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }\ntd.linenos .special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }\nspan.linenos.special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }\n.codehilite .hll { background-color: #ffffcc }\n.codehilite { background: #f8f8f8; }\n.codehilite .c { color: #3D7B7B; font-style: italic } /* Comment */\n.codehilite .err { border: 1px solid #F00 } /* Error */\n.codehilite .k { color: #008000; font-weight: bold } /* Keyword */\n.codehilite .o { color: #666 } /* Operator */\n.codehilite .ch { color: #3D7B7B; font-style: italic } /* Comment.Hashbang */\n.codehilite .cm { color: #3D7B7B; font-style: italic } /* Comment.Multiline */\n.codehilite .cp { color: #9C6500 } /* Comment.Preproc */\n.codehilite .cpf { color: #3D7B7B; font-style: italic } /* Comment.PreprocFile */\n.codehilite .c1 { color: #3D7B7B; font-style: italic } /* Comment.Single */\n.codehilite .cs { color: #3D7B7B; font-style: italic } /* Comment.Special */\n.codehilite .gd { color: #A00000 } /* Generic.Deleted */\n.codehilite .ge { font-style: italic } /* Generic.Emph */\n.codehilite .ges { font-weight: bold; font-style: italic } /* Generic.EmphStrong */\n.codehilite .gr { color: #E40000 } /* Generic.Error */\n.codehilite .gh { color: #000080; font-weight: bold } /* Generic.Heading */\n.codehilite .gi { color: #008400 } /* Generic.Inserted */\n.codehilite .go { color: #717171 } /* Generic.Output */\n.codehilite .gp { color: #000080; font-weight: bold } /* Generic.Prompt */\n.codehilite .gs { font-weight: bold } /* Generic.Strong */\n.codehilite .gu { color: #800080; font-weight: bold } /* Generic.Subheading */\n.codehilite .gt { color: #04D } /* Generic.Traceback */\n.codehilite .kc { color: #008000; font-weight: bold } /* Keyword.Constant */\n.codehilite .kd { color: #008000; font-weight: bold } /* Keyword.Declaration */\n.codehilite .kn { color: #008000; font-weight: bold } /* Keyword.Namespace */\n.codehilite .kp { color: #008000 } /* Keyword.Pseudo */\n.codehilite .kr { color: #008000; font-weight: bold } /* Keyword.Reserved */\n.codehilite .kt { color: #B00040 } /* Keyword.Type */\n.codehilite .m { color: #666 } /* Literal.Number */\n.codehilite .s { color: #BA2121 } /* Literal.String */\n.codehilite .na { color: #687822 } /* Name.Attribute */\n.codehilite .nb { color: #008000 } /* Name.Builtin */\n.codehilite .nc { color: #00F; font-weight: bold } /* Name.Class */\n.codehilite .no { color: #800 } /* Name.Constant */\n.codehilite .nd { color: #A2F } /* Name.Decorator */\n.codehilite .ni { color: #717171; font-weight: bold } /* Name.Entity */\n.codehilite .ne { color: #CB3F38; font-weight: bold } /* Name.Exception */\n.codehilite .nf { color: #00F } /* Name.Function */\n.codehilite .nl { color: #767600 } /* Name.Label */\n.codehilite .nn { color: #00F; font-weight: bold } /* Name.Namespace */\n.codehilite .nt { color: #008000; font-weight: bold } /* Name.Tag */\n.codehilite .nv { color: #19177C } /* Name.Variable */\n.codehilite .ow { color: #A2F; font-weight: bold } /* Operator.Word */\n.codehilite .w { color: #BBB } /* Text.Whitespace */\n.codehilite .mb { color: #666 } /* Literal.Number.Bin */\n.codehilite .mf { color: #666 } /* Literal.Number.Float */\n.codehilite .mh { color: #666 } /* Literal.Number.Hex */\n.codehilite .mi { color: #666 } /* Literal.Number.Integer */\n.codehilite .mo { color: #666 } /* Literal.Number.Oct */\n.codehilite .sa { color: #BA2121 } /* Literal.String.Affix */\n.codehilite .sb { color: #BA2121 } /* Literal.String.Backtick */\n.codehilite .sc { color: #BA2121 } /* Literal.String.Char */\n.codehilite .dl { color: #BA2121 } /* Literal.String.Delimiter */\n.codehilite .sd { color: #BA2121; font-style: italic } /* Literal.String.Doc */\n.codehilite .s2 { color: #BA2121 } /* Literal.String.Double */\n.codehilite .se { color: #AA5D1F; font-weight: bold } /* Literal.String.Escape */\n.codehilite .sh { color: #BA2121 } /* Literal.String.Heredoc */\n.codehilite .si { color: #A45A77; font-weight: bold } /* Literal.String.Interpol */\n.codehilite .sx { color: #008000 } /* Literal.String.Other */\n.codehilite .sr { color: #A45A77 } /* Literal.String.Regex */\n.codehilite .s1 { color: #BA2121 } /* Literal.String.Single */\n.codehilite .ss { color: #19177C } /* Literal.String.Symbol */\n.codehilite .bp { color: #008000 } /* Name.Builtin.Pseudo */\n.codehilite .fm { color: #00F } /* Name.Function.Magic */\n.codehilite .vc { color: #19177C } /* Name.Variable.Class */\n.codehilite .vg { color: #19177C } /* Name.Variable.Global */\n.codehilite .vi { color: #19177C } /* Name.Variable.Instance */\n.codehilite .vm { color: #19177C } /* Name.Variable.Magic */\n.codehilite .il { color: #666 } /* Literal.Number.Integer.Long */\n\n/* Styling per blocchi di codice */\n.codehilite {\n    background: transparent !important;\n    border-radius: 8px;\n    overflow: hidden;\n}\n.codehilite pre {\n    background: transparent !important;\n    margin: 0 !important;\n    padding: 20px !important;\n    font-family: 'Monaco', 'Menlo', 'Consolas', monospace !important;\n    font-size: 14px !important;\n    line-height: 1.5 !important;\n    white-space: pre !important;\n    overflow-x: auto !important;\n    color: inherit !important;\n}\n.codehilite code {\n    background: transparent !important;\n    padding: 0 !important;\n    font-family: inherit !important;\n}\n\n\n.code-wrapper { \n    position: relative; \n}\n.copy-button {\n    position: absolute; \n    top: 12px; \n    right: 12px; \n    padding: 6px 12px; \n    font-size: 12px;\n    cursor: pointer; \n    border: none; \n    border-radius: 4px; \n    background: rgba(255,255,255,0.9);\n    color: #374151; \n    transition: all 0.2s ease;\n    font-weight: 500;\n}\n.copy-button:hover { \n    background: rgba(255,255,255,1);\n    transform: translateY(-1px);\n}\n\n\ndetails.code-container {\n    border: 1px solid #e5e7eb; \n    border-radius: 12px; \n    background: #f9fafb;\n    margin: 16px 0;\n    transition: all 0.3s ease;\n}\ndetails.code-container summary {\n    padding: 12px 16px;\n    font-size: 14px; \n    color: #6b7280; \n    cursor: pointer; \n    outline: none; \n    user-select: none;\n    font-weight: 500;\n}\ndetails.code-container[open] summary::after { \n    content: \" (Hide Code)\"; \n    color: #9ca3af; \n}\ndetails.code-container:not([open]) summary::after { \n    content: \" (Show Code)\"; \n    color: #d1d5db; \n}\ndetails.code-container .code-wrapper {\n    padding: 0;\n    margin: 0;\n}\n</style>\n<p>I <strong>modelli di spazio semantico sparsi</strong> (Sparse VSMs) rappresentano il significato delle parole o dei documenti utilizzando <strong>conteggi espliciti</strong> di occorrenza o co-occorrenza tra termini.<br />\nQueste rappresentazioni sono chiamate &ldquo;sparse&rdquo; perché, in genere, la maggior parte delle celle nella matrice risultante sono <strong>zero</strong>: molte parole non compaiono nella maggior parte dei documenti o dei contesti.</p>\n<h2 id=\"1-matrice-term-documento\">1. Matrice Term-Documento</h2>\n<p>Una delle prime tecniche di rappresentazione è la <strong>matrice term-documento</strong>, dove:</p>\n<ul>\n<li>Ogni <strong>riga</strong> corrisponde a un termine del vocabolario.</li>\n<li>Ogni <strong>colonna</strong> rappresenta un documento (ad esempio un libro, una pagina web, ecc.).</li>\n<li>L&rsquo;<strong>elemento</strong> $[i,j]$ rappresenta il numero di volte in cui il termine $i$ appare nel documento $j$.</li>\n</ul>\n<blockquote>\n<p>Questa matrice consente di rappresentare ogni documento come un <strong>vettore di conteggi</strong> di parole.</p>\n</blockquote>\n<h3 id=\"esempio\">Esempio</h3>\n<p>Supponiamo di avere il seguente <strong>corpus</strong>:</p>\n<ul>\n<li>&ldquo;As You Like It&rdquo;</li>\n<li>&ldquo;Twelfth Night&rdquo;</li>\n<li>&ldquo;Julius Caesar&rdquo;</li>\n<li>&ldquo;Henry V&rdquo;</li>\n</ul>\n<p>E un <strong>vocabolario</strong> composto da:</p>\n$$ V = \\{ \\text{\"battle\"}, \\text{\"good\"}, \\text{\"fool\"}, \\text{\"wit\"} \\} $$\n<p>Costruiamo la seguente matrice:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align: left;\">Termine</th>\n<th style=\"text-align: left;\">As You Like It</th>\n<th style=\"text-align: left;\">Twelfth Night</th>\n<th style=\"text-align: left;\">Julius Caesar</th>\n<th style=\"text-align: left;\">Henry V</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align: left;\">battle</td>\n<td style=\"text-align: left;\">0</td>\n<td style=\"text-align: left;\">0</td>\n<td style=\"text-align: left;\">5</td>\n<td style=\"text-align: left;\">11</td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">good</td>\n<td style=\"text-align: left;\">114</td>\n<td style=\"text-align: left;\">125</td>\n<td style=\"text-align: left;\">32</td>\n<td style=\"text-align: left;\">38</td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">fool</td>\n<td style=\"text-align: left;\">46</td>\n<td style=\"text-align: left;\">58</td>\n<td style=\"text-align: left;\">0</td>\n<td style=\"text-align: left;\">0</td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">wit</td>\n<td style=\"text-align: left;\">37</td>\n<td style=\"text-align: left;\">20</td>\n<td style=\"text-align: left;\">0</td>\n<td style=\"text-align: left;\">0</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Interpretazione</strong>:\n- Il termine &ldquo;battle&rdquo; appare 5 volte in <em>Julius Caesar</em> e 11 volte in <em>Henry V</em>, ma non è presente negli altri documenti.\n- Il termine &ldquo;good&rdquo; è molto più distribuito tra i documenti.</p>\n<p>Quindi, ad esempio, <em>Julius Caesar</em> può essere rappresentato dal vettore:</p>\n$$ \\text{Julius Caesar} = (5, 32, 0, 0) $$\n<p><img src=\"/images/tikz/4a918b152a58a2cb8e3f83b2e9d5e46e.svg\" style=\"display: block; width: 100%; height: auto; max-height: 600px;\" class=\"tikz-svg\" /></p>\n<h2 id=\"2-matrice-parola-parola-co-occorrenze\">2. Matrice Parola-Parola (Co-occorrenze)</h2>\n<p>Un altro approccio di rappresentazione è costruire una <strong>matrice di co-occorrenza parola-parola</strong>. Invece di documenti, consideriamo <strong>finestre locali</strong> di testo, e contiamo quante volte due parole appaiono vicine.</p>\n<h3 id=\"procedura\">Procedura:</h3>\n<ol>\n<li>Definire una <strong>finestra mobile</strong> di ampiezza $n$ (ad esempio, 3 parole).</li>\n<li>Far scorrere la finestra lungo il testo.</li>\n<li>Per ogni finestra, aggiornare il conteggio di co-occorrenza tra le parole che compaiono.</li>\n</ol>\n<h3 id=\"esempio_1\">Esempio</h3>\n<p>Testo di partenza:</p>\n<blockquote>\n<p>&ldquo;Salve a tutti questo è un esempio&rdquo;</p>\n</blockquote>\n<p>Parametri:\n- $m = 7$ (numero di parole)\n- $n = 3$ (ampiezza finestra)</p>\n<p><strong>Sotto-contesti</strong> (finestra mobile con padding):</p>\n<ul>\n<li>&rdquo;* * Salve&rdquo;</li>\n<li>&rdquo;* Salve a&rdquo;</li>\n<li>&ldquo;Salve a tutti&rdquo;</li>\n<li>&ldquo;a tutti questo&rdquo;</li>\n<li>&ldquo;tutti questo è&rdquo;</li>\n<li>&ldquo;questo è un&rdquo;</li>\n<li>&ldquo;è un esempio&rdquo;</li>\n<li>&ldquo;un esempio *&rdquo;</li>\n<li>&ldquo;esempio * *&rdquo;</li>\n</ul>\n<p>Costruiamo la <strong>matrice di co-occorrenza</strong>:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align: left;\"></th>\n<th style=\"text-align: center;\">Salve</th>\n<th style=\"text-align: center;\">a</th>\n<th style=\"text-align: center;\">tutti</th>\n<th style=\"text-align: center;\">questo</th>\n<th style=\"text-align: center;\">è</th>\n<th style=\"text-align: center;\">un</th>\n<th style=\"text-align: center;\">esempio</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align: left;\"><strong>Salve</strong></td>\n<td style=\"text-align: center;\">–</td>\n<td style=\"text-align: center;\">2</td>\n<td style=\"text-align: center;\">1</td>\n<td style=\"text-align: center;\">0</td>\n<td style=\"text-align: center;\">0</td>\n<td style=\"text-align: center;\">0</td>\n<td style=\"text-align: center;\">0</td>\n</tr>\n<tr>\n<td style=\"text-align: left;\"><strong>a</strong></td>\n<td style=\"text-align: center;\">2</td>\n<td style=\"text-align: center;\">–</td>\n<td style=\"text-align: center;\">2</td>\n<td style=\"text-align: center;\">1</td>\n<td style=\"text-align: center;\">0</td>\n<td style=\"text-align: center;\">0</td>\n<td style=\"text-align: center;\">0</td>\n</tr>\n<tr>\n<td style=\"text-align: left;\"><strong>tutti</strong></td>\n<td style=\"text-align: center;\">1</td>\n<td style=\"text-align: center;\">2</td>\n<td style=\"text-align: center;\">–</td>\n<td style=\"text-align: center;\">2</td>\n<td style=\"text-align: center;\">1</td>\n<td style=\"text-align: center;\">0</td>\n<td style=\"text-align: center;\">0</td>\n</tr>\n<tr>\n<td style=\"text-align: left;\"><strong>questo</strong></td>\n<td style=\"text-align: center;\">0</td>\n<td style=\"text-align: center;\">1</td>\n<td style=\"text-align: center;\">2</td>\n<td style=\"text-align: center;\">–</td>\n<td style=\"text-align: center;\">2</td>\n<td style=\"text-align: center;\">1</td>\n<td style=\"text-align: center;\">0</td>\n</tr>\n<tr>\n<td style=\"text-align: left;\"><strong>è</strong></td>\n<td style=\"text-align: center;\">0</td>\n<td style=\"text-align: center;\">0</td>\n<td style=\"text-align: center;\">1</td>\n<td style=\"text-align: center;\">2</td>\n<td style=\"text-align: center;\">–</td>\n<td style=\"text-align: center;\">2</td>\n<td style=\"text-align: center;\">1</td>\n</tr>\n<tr>\n<td style=\"text-align: left;\"><strong>un</strong></td>\n<td style=\"text-align: center;\">0</td>\n<td style=\"text-align: center;\">0</td>\n<td style=\"text-align: center;\">0</td>\n<td style=\"text-align: center;\">1</td>\n<td style=\"text-align: center;\">2</td>\n<td style=\"text-align: center;\">–</td>\n<td style=\"text-align: center;\">2</td>\n</tr>\n<tr>\n<td style=\"text-align: left;\"><strong>esempio</strong></td>\n<td style=\"text-align: center;\">0</td>\n<td style=\"text-align: center;\">0</td>\n<td style=\"text-align: center;\">0</td>\n<td style=\"text-align: center;\">0</td>\n<td style=\"text-align: center;\">1</td>\n<td style=\"text-align: center;\">2</td>\n<td style=\"text-align: center;\">–</td>\n</tr>\n</tbody>\n</table>\n<p>Questo è il codice Python che costruisce la matrice di co-occorrenza:</p>\n<details class=\"code-container\">\n<summary>Code</summary>\n<div class=\"code-wrapper\">\n<button class=\"copy-button\" onclick=\"\n                    const code = this.parentElement.querySelector('pre');\n                    if (code) {\n                        navigator.clipboard.writeText(code.innerText);\n                        this.textContent = 'Copied!';\n                        setTimeout(() => this.textContent = 'Copy', 2000);\n                    }\n                \">Copy</button>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">pandas</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"nn\">pd</span>\n<span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">collections</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">defaultdict</span>\n\n<span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">generate_cooccurrence_matrix</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">window_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">:</span>\n    <span class=\"c1\"># 1. Tokenizza e aggiungi padding &#39;*&#39; di lunghezza window_size-1 ai bordi</span>\n    <span class=\"n\">tokens</span> <span class=\"o\">=</span> <span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">()</span>\n    <span class=\"n\">pad</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;*&#39;</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">window_size</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"n\">padded</span> <span class=\"o\">=</span> <span class=\"n\">pad</span> <span class=\"o\">+</span> <span class=\"n\">tokens</span> <span class=\"o\">+</span> <span class=\"n\">pad</span>\n\n    <span class=\"c1\"># 2. Estrai tutte le sotto-stringhe (finestre) di lunghezza window_size</span>\n    <span class=\"n\">windows</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">padded</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">:</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"n\">window_size</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">padded</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"n\">window_size</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)]</span>\n\n    <span class=\"c1\"># 3. Conta le co-occorrenze: per ogni finestra, ogni coppia di parole reali (non &#39;*&#39;)</span>\n    <span class=\"n\">cooc</span> <span class=\"o\">=</span> <span class=\"n\">defaultdict</span><span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">defaultdict</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">))</span>\n    <span class=\"k\">for</span> <span class=\"n\">w</span> <span class=\"ow\">in</span> <span class=\"n\">windows</span><span class=\"p\">:</span>\n        <span class=\"n\">real</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">t</span> <span class=\"k\">for</span> <span class=\"n\">t</span> <span class=\"ow\">in</span> <span class=\"n\">w</span> <span class=\"k\">if</span> <span class=\"n\">t</span> <span class=\"o\">!=</span> <span class=\"s1\">&#39;*&#39;</span><span class=\"p\">]</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">real</span><span class=\"p\">)):</span>\n            <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">real</span><span class=\"p\">)):</span>\n                <span class=\"n\">cooc</span><span class=\"p\">[</span><span class=\"n\">real</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]][</span><span class=\"n\">real</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]]</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n                <span class=\"n\">cooc</span><span class=\"p\">[</span><span class=\"n\">real</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]][</span><span class=\"n\">real</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]]</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n\n    <span class=\"c1\"># 4. Costruisci la matrice (DataFrame) con le parole originali nell’ordine iniziale</span>\n    <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"s1\">&#39;-&#39;</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"n\">tokens</span><span class=\"p\">,</span> <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"n\">tokens</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">w1</span> <span class=\"ow\">in</span> <span class=\"n\">tokens</span><span class=\"p\">:</span>\n        <span class=\"k\">for</span> <span class=\"n\">w2</span> <span class=\"ow\">in</span> <span class=\"n\">tokens</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">w1</span> <span class=\"o\">!=</span> <span class=\"n\">w2</span><span class=\"p\">:</span>\n                <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">at</span><span class=\"p\">[</span><span class=\"n\">w1</span><span class=\"p\">,</span> <span class=\"n\">w2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">cooc</span><span class=\"p\">[</span><span class=\"n\">w1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">w2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">df</span>\n\n<span class=\"c1\"># Esempio</span>\n<span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Salve a tutti questo è un esempio&quot;</span>\n<span class=\"n\">window_size</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n<span class=\"n\">matrix</span> <span class=\"o\">=</span> <span class=\"n\">generate_cooccurrence_matrix</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">window_size</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">matrix</span><span class=\"p\">)</span>\n</code></pre></div>\n</div>\n</details>\n\n<p><strong>Interpretazione</strong>:</p>\n<ul>\n<li>&ldquo;a&rdquo; e &ldquo;tutti&rdquo; co-occorrono due volte (nella finestra &ldquo;Salve a tutti&rdquo; e &ldquo;a tutti questo&rdquo;).</li>\n<li>&ldquo;questo&rdquo; co-occorre sia con &ldquo;tutti&rdquo; sia con &ldquo;è&rdquo;.</li>\n</ul>\n<p>Così, ogni parola è rappresentata da un <strong>vettore di co-occorrenze</strong> con le altre parole.</p>\n<h2 id=\"3-bag-of-words-bow\">3. Bag of Words (BoW)</h2>\n<p>Il <strong>modello Bag-of-Words</strong> (BoW) è una delle tecniche più semplici e popolari per rappresentare il contenuto testuale in modo numerico, adatto all&rsquo;elaborazione da parte degli algoritmi di Machine Learning.</p>\n<p><strong>Principio di base</strong>:\n- Un documento o una frase viene rappresentato come un <strong>insieme di parole</strong>, ignorando completamente:\n  - L&rsquo;<strong>ordine</strong> delle parole.\n  - La <strong>struttura grammaticale</strong> o sintattica.\n- Si tiene traccia esclusivamente delle <strong>parole presenti</strong> e della loro <strong>frequenza</strong>.</p>\n<h3 id=\"modalita-di-rappresentazione\">Modalità di rappresentazione:</h3>\n<ul>\n<li><strong>BoW binario</strong>: registra solo se una parola è presente ($1$) o assente ($0$), indipendentemente dal numero di volte in cui appare.</li>\n<li><strong>BoW con conteggi</strong>: registra quante volte ciascuna parola appare nel testo.</li>\n</ul>\n<blockquote>\n<p>In entrambi i casi, ogni parola diventa una caratteristica (feature) nello spazio vettoriale.</p>\n</blockquote>\n<h3 id=\"esempio-pratico\">Esempio pratico</h3>\n<p>Frase di partenza:</p>\n<blockquote>\n<p>&ldquo;the best of the best&rdquo;</p>\n</blockquote>\n<p><strong>BoW binario</strong> (presenza/assenza delle parole):</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align: left;\">Parola</th>\n<th style=\"text-align: center;\">Presenza (1/0)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align: left;\">the</td>\n<td style=\"text-align: center;\">1</td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">best</td>\n<td style=\"text-align: center;\">1</td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">of</td>\n<td style=\"text-align: center;\">1</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>Ogni parola distinta viene contata una sola volta: viene segnato <code>1</code> se è presente nel testo.</li>\n</ul>\n<p><strong>BoW con conteggi</strong> (numero di occorrenze di ciascuna parola):</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align: left;\">Parola</th>\n<th style=\"text-align: center;\">Conteggio</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align: left;\">the</td>\n<td style=\"text-align: center;\">2</td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">best</td>\n<td style=\"text-align: center;\">2</td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">of</td>\n<td style=\"text-align: center;\">1</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>Qui si registra <strong>quante volte</strong> ogni parola compare nel testo.</li>\n</ul>\n<h3 id=\"limiti-del-modello-bow\">Limiti del modello BoW:</h3>\n<ul>\n<li><strong>Perdita di informazioni</strong>: l&rsquo;ordine delle parole viene completamente ignorato (es. &ldquo;dog bites man&rdquo; e &ldquo;man bites dog&rdquo; hanno lo stesso BoW!).</li>\n<li><strong>Alto dimensionalità</strong>: per testi lunghi o vocabolari molto ampi, il numero di feature cresce rapidamente.</li>\n<li><strong>Nessun significato semantico</strong>: parole simili o sinonimi vengono trattati come entità completamente diverse.</li>\n</ul>\n<p>Il Bag-of-Words rimane comunque una tecnica molto efficace per task semplici di classificazione testuale o analisi preliminare, grazie alla sua <strong>facilità di implementazione</strong> e alla <strong>rapidità di calcolo</strong>.</p>\n<h2 id=\"problemi-dei-modelli-di-spazio-semantico-sparsi\">Problemi dei Modelli di Spazio Semantico Sparsi</h2>\n<ul>\n<li><strong>Matrice molto sparsa</strong>: la maggior parte dei valori nelle matrici (term-documento o parola-parola) sono <strong>zeri</strong>.</li>\n<li>Non tutti gli ambienti di programmazione offrono <strong>rappresentazioni efficienti</strong> per matrici sparse.</li>\n<li><strong>Gestione complicata di parole fuori vocabolario (OOV)</strong>:</li>\n<li>Esempio: &ldquo;This bar serves fresh jabuticaba juice.&rdquo; → il termine &ldquo;jabuticaba&rdquo; potrebbe non esistere nel vocabolario.</li>\n<li><strong>Alta dimensionalità</strong>:</li>\n<li>In corpora di grandi dimensioni, il numero di termini cresce rapidamente, portando a <strong>vettori estremamente grandi</strong>.</li>\n<li><strong>Prestazioni inferiori rispetto a vettori densi</strong>:</li>\n<li>In pratica, <strong>rappresentazioni dense</strong> (come Word2Vec, GloVe) risultano più efficaci e portano a migliori prestazioni in molti task di NLP.</li>\n<li><strong>Analisi semantica basata su parole</strong>: </li>\n<li>\n<p>I modelli sparsi non catturano relazioni sintattiche o contestuali profonde, limitandosi a rappresentare significati su base statica (conteggi e co-occorrenze), senza tener conto della dinamica del contesto in cui le parole appaiono.</p>\n</li>\n<li>\n<p>Esempio: i termini &ldquo;bank&rdquo; (banca) in &ldquo;financial bank&rdquo; e &ldquo;river bank&rdquo; avranno la stessa rappresentazione, poiché i modelli sparsi non distinguono tra sensi diversi della stessa parola a seconda del contesto.</p>\n</li>\n</ul>\n<h2 id=\"conclusioni\">Conclusioni</h2>\n<p>I <strong>modelli sparsi</strong> di spazio semantico:</p>\n<ul>\n<li>Consentono di rappresentare parole e documenti come <strong>vettori numerici</strong>.</li>\n<li>Permettono di calcolare <strong>similarità semantica</strong> tra parole o documenti (ad esempio, usando cosine similarity).</li>\n<li>Sono la base per tecniche più avanzate come:</li>\n<li><strong>TF-IDF</strong>: pesatura intelligente dei termini.</li>\n<li><strong>PMI (Pointwise Mutual Information)</strong>: per evidenziare associazioni significative.</li>\n<li><strong>Word Embeddings densi</strong>: Word2Vec, GloVe, FastText.</li>\n</ul>\n<p>Anche se modelli più recenti usano <strong>vettori densi e latenti</strong>, i VSM sparsi sono fondamentali per comprendere i principi alla base del significato computazionale.</p>\n<h1 id=\"collegamenti-correlati\">Collegamenti correlati</h1>\n<ul>\n<li><a href=\"/theory/nlp/Semantica/Vector Semantics/Introduzione alla Semantica Vettoriale\" class=\"text-blue-600 hover:underline\">Introduzione alla Semantica Vettoriale</a></li>\n<li><a href=\"/theory/nlp/Semantica/Vector Semantics/Misure di Similarità Vettoriale\" class=\"text-blue-600 hover:underline\">Misure di similarità vettoriale</a></li>\n<li><a href=\"/theory/nlp/Semantica/Vector Semantics/Tecniche di Weighting\" class=\"text-blue-600 hover:underline\">Tecniche di pesatura (TF-IDF, PMI)</a></li>\n<li><span class=\"text-gray-600\">Problemi dei modelli vettoriali</span></li>\n</ul>"
}