{
  "title": "WordNet",
  "content": "<style>pre { line-height: 125%; }\ntd.linenos .normal { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }\nspan.linenos { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }\ntd.linenos .special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }\nspan.linenos.special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }\n.codehilite .hll { background-color: #ffffcc }\n.codehilite { background: #f8f8f8; }\n.codehilite .c { color: #3D7B7B; font-style: italic } /* Comment */\n.codehilite .err { border: 1px solid #F00 } /* Error */\n.codehilite .k { color: #008000; font-weight: bold } /* Keyword */\n.codehilite .o { color: #666 } /* Operator */\n.codehilite .ch { color: #3D7B7B; font-style: italic } /* Comment.Hashbang */\n.codehilite .cm { color: #3D7B7B; font-style: italic } /* Comment.Multiline */\n.codehilite .cp { color: #9C6500 } /* Comment.Preproc */\n.codehilite .cpf { color: #3D7B7B; font-style: italic } /* Comment.PreprocFile */\n.codehilite .c1 { color: #3D7B7B; font-style: italic } /* Comment.Single */\n.codehilite .cs { color: #3D7B7B; font-style: italic } /* Comment.Special */\n.codehilite .gd { color: #A00000 } /* Generic.Deleted */\n.codehilite .ge { font-style: italic } /* Generic.Emph */\n.codehilite .ges { font-weight: bold; font-style: italic } /* Generic.EmphStrong */\n.codehilite .gr { color: #E40000 } /* Generic.Error */\n.codehilite .gh { color: #000080; font-weight: bold } /* Generic.Heading */\n.codehilite .gi { color: #008400 } /* Generic.Inserted */\n.codehilite .go { color: #717171 } /* Generic.Output */\n.codehilite .gp { color: #000080; font-weight: bold } /* Generic.Prompt */\n.codehilite .gs { font-weight: bold } /* Generic.Strong */\n.codehilite .gu { color: #800080; font-weight: bold } /* Generic.Subheading */\n.codehilite .gt { color: #04D } /* Generic.Traceback */\n.codehilite .kc { color: #008000; font-weight: bold } /* Keyword.Constant */\n.codehilite .kd { color: #008000; font-weight: bold } /* Keyword.Declaration */\n.codehilite .kn { color: #008000; font-weight: bold } /* Keyword.Namespace */\n.codehilite .kp { color: #008000 } /* Keyword.Pseudo */\n.codehilite .kr { color: #008000; font-weight: bold } /* Keyword.Reserved */\n.codehilite .kt { color: #B00040 } /* Keyword.Type */\n.codehilite .m { color: #666 } /* Literal.Number */\n.codehilite .s { color: #BA2121 } /* Literal.String */\n.codehilite .na { color: #687822 } /* Name.Attribute */\n.codehilite .nb { color: #008000 } /* Name.Builtin */\n.codehilite .nc { color: #00F; font-weight: bold } /* Name.Class */\n.codehilite .no { color: #800 } /* Name.Constant */\n.codehilite .nd { color: #A2F } /* Name.Decorator */\n.codehilite .ni { color: #717171; font-weight: bold } /* Name.Entity */\n.codehilite .ne { color: #CB3F38; font-weight: bold } /* Name.Exception */\n.codehilite .nf { color: #00F } /* Name.Function */\n.codehilite .nl { color: #767600 } /* Name.Label */\n.codehilite .nn { color: #00F; font-weight: bold } /* Name.Namespace */\n.codehilite .nt { color: #008000; font-weight: bold } /* Name.Tag */\n.codehilite .nv { color: #19177C } /* Name.Variable */\n.codehilite .ow { color: #A2F; font-weight: bold } /* Operator.Word */\n.codehilite .w { color: #BBB } /* Text.Whitespace */\n.codehilite .mb { color: #666 } /* Literal.Number.Bin */\n.codehilite .mf { color: #666 } /* Literal.Number.Float */\n.codehilite .mh { color: #666 } /* Literal.Number.Hex */\n.codehilite .mi { color: #666 } /* Literal.Number.Integer */\n.codehilite .mo { color: #666 } /* Literal.Number.Oct */\n.codehilite .sa { color: #BA2121 } /* Literal.String.Affix */\n.codehilite .sb { color: #BA2121 } /* Literal.String.Backtick */\n.codehilite .sc { color: #BA2121 } /* Literal.String.Char */\n.codehilite .dl { color: #BA2121 } /* Literal.String.Delimiter */\n.codehilite .sd { color: #BA2121; font-style: italic } /* Literal.String.Doc */\n.codehilite .s2 { color: #BA2121 } /* Literal.String.Double */\n.codehilite .se { color: #AA5D1F; font-weight: bold } /* Literal.String.Escape */\n.codehilite .sh { color: #BA2121 } /* Literal.String.Heredoc */\n.codehilite .si { color: #A45A77; font-weight: bold } /* Literal.String.Interpol */\n.codehilite .sx { color: #008000 } /* Literal.String.Other */\n.codehilite .sr { color: #A45A77 } /* Literal.String.Regex */\n.codehilite .s1 { color: #BA2121 } /* Literal.String.Single */\n.codehilite .ss { color: #19177C } /* Literal.String.Symbol */\n.codehilite .bp { color: #008000 } /* Name.Builtin.Pseudo */\n.codehilite .fm { color: #00F } /* Name.Function.Magic */\n.codehilite .vc { color: #19177C } /* Name.Variable.Class */\n.codehilite .vg { color: #19177C } /* Name.Variable.Global */\n.codehilite .vi { color: #19177C } /* Name.Variable.Instance */\n.codehilite .vm { color: #19177C } /* Name.Variable.Magic */\n.codehilite .il { color: #666 } /* Literal.Number.Integer.Long */\n\n/* Styling per blocchi di codice */\n.codehilite {\n    background: transparent !important;\n    border-radius: 8px;\n    overflow: hidden;\n}\n.codehilite pre {\n    background: transparent !important;\n    margin: 0 !important;\n    padding: 20px !important;\n    font-family: 'Monaco', 'Menlo', 'Consolas', monospace !important;\n    font-size: 14px !important;\n    line-height: 1.5 !important;\n    white-space: pre !important;\n    overflow-x: auto !important;\n    color: inherit !important;\n}\n.codehilite code {\n    background: transparent !important;\n    padding: 0 !important;\n    font-family: inherit !important;\n}\n\n\n.code-wrapper { \n    position: relative; \n}\n.copy-button {\n    position: absolute; \n    top: 12px; \n    right: 12px; \n    padding: 6px 12px; \n    font-size: 12px;\n    cursor: pointer; \n    border: none; \n    border-radius: 4px; \n    background: rgba(255,255,255,0.9);\n    color: #374151; \n    transition: all 0.2s ease;\n    font-weight: 500;\n}\n.copy-button:hover { \n    background: rgba(255,255,255,1);\n    transform: translateY(-1px);\n}\n\n\ndetails.code-container {\n    border: 1px solid #e5e7eb; \n    border-radius: 12px; \n    background: #f9fafb;\n    margin: 16px 0;\n    transition: all 0.3s ease;\n}\ndetails.code-container summary {\n    padding: 12px 16px;\n    font-size: 14px; \n    color: #6b7280; \n    cursor: pointer; \n    outline: none; \n    user-select: none;\n    font-weight: 500;\n}\ndetails.code-container[open] summary::after { \n    content: \" (Hide Code)\"; \n    color: #9ca3af; \n}\ndetails.code-container:not([open]) summary::after { \n    content: \" (Show Code)\"; \n    color: #d1d5db; \n}\ndetails.code-container .code-wrapper {\n    padding: 0;\n    margin: 0;\n}\n</style>\n<blockquote>\n<p>Fonte: <a href=\"https://wordnet.princeton.edu/\">Miller et al., 1990 ‚Äî WordNet</a></p>\n</blockquote>\n<h2 id=\"cose-wordnet\">üß† Cos&rsquo;√® WordNet?</h2>\n<p>WordNet √® il <strong>lessico computazionale dell‚Äôinglese pi√π diffuso</strong>, sviluppato con l‚Äôintento di riflettere teorie psicologiche sul funzionamento mentale del linguaggio.<br />\n√à strutturato attorno al concetto di <strong>synset</strong> (set di sinonimi), che rappresenta un <strong>concetto</strong>.</p>\n<h2 id=\"synsets\">üß© Synsets</h2>\n<ul>\n<li>Ogni concetto √® rappresentato da un <strong>insieme di parole sinonime</strong> ‚Üí un <em>synset</em>.</li>\n<li>Un <em>word sense</em> √® l‚Äô<strong>occorrenza di una parola in un synset</strong>.</li>\n</ul>\n<p>Esempio:</p>\n$$\nSynset: \\{car¬π_n, auto^1_n, automobile^1_n, machine^4_n, motorcar^1_n\\}\n$$\n<p>‚Üí $machine^1_n$ in questo contesto √® il <strong>quarto senso del sostantivo</strong> ‚Äúmachine‚Äù.</p>\n<h2 id=\"esempio-il-caso-di-car\">üöó Esempio: il caso di <em>car</em></h2>\n<p>Un esempio classico in WordNet √® il lemma <strong>car</strong>. Esistono pi√π synset con questo lemma, ognuno relativo a un significato differente:</p>\n$$\n\\begin{align*}\nSynset 1: &\\{car¬π_n, auto^1_n, automobile^1_n, machine^4_n, motorcar^1_n\\}\\\\\nSynset 2: &\\{car^2_n, railcar_n^1, railway car_n^1, railroad car_n^1\\}\\\\\nSynset 3: &\\{cable car_n^1, car_n^3\\}\\\\\nSynset 4: &\\{car^4_n, gondola_n^3\\}\\\\\nSynset 5: &\\{car_n^5, elevator car_n^1\\}\\\\\n\\end{align*}\n$$\n<h2 id=\"glosses-definizioni-testuali\">üìù Glosses (Definizioni testuali)</h2>\n<p>WordNet fornisce una definizione testuale per ogni synset, detta <strong>glossa</strong>:</p>\n<ul>\n<li>\n<p><strong>Gloss di car¬π</strong>:</p>\n<blockquote>\n<p>‚Äúa 4-wheeled motor vehicle; usually propelled by an internal combustion engine; &lsquo;he needs a car to get to work&rsquo;‚Äù</p>\n</blockquote>\n</li>\n<li>\n<p><strong>Gloss di car¬≤</strong>:</p>\n<blockquote>\n<p>‚Äúa wheeled vehicle adapted to the rails of railroad; &lsquo;three cars had jumped the rails&rsquo;‚Äù</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"relazioni-semantiche\">üîó Relazioni semantiche</h2>\n<p>WordNet codifica diverse <strong>relazioni semantiche tra synset</strong>:</p>\n<ul>\n<li>\n<p><strong>Iperonimia (is-a)</strong><br />\n  ‚Üí $car^1_n$ is-a $motor vehicle_n^1$</p>\n</li>\n<li>\n<p><strong>Meronimia (has-a)</strong><br />\n  ‚Üí $car^1_n$ has-a $car door^1_n$</p>\n</li>\n<li>\n<p><strong>Altre relazioni semantiche</strong>:</p>\n</li>\n<li>Entailment</li>\n<li>Similarit√†</li>\n<li>Attributi</li>\n</ul>\n<h2 id=\"relazioni-lessicali\">üß¨ Relazioni lessicali</h2>\n<p>Anche le relazioni tra i <em>sensi delle parole</em> sono modellate:</p>\n<ul>\n<li><strong>Sinonimia</strong>: parole che condividono un synset  </li>\n<li><strong>Antonimia</strong>: es. $good$ √® antonimo di $bad$  </li>\n<li><strong>Pertainimia</strong>: es. $dental$ pertains to $tooth$  </li>\n<li><strong>Nominalizzazione / derivazione</strong>: es. $service$ deriva da $serve$</li>\n</ul>\n<h2 id=\"wordnet-come-grafo-semantico\">üîÑ WordNet come Grafo Semantico</h2>\n<p>WordNet pu√≤ essere visto come un <strong>grafo</strong>, in cui i nodi sono synset e gli archi sono relazioni semantiche o lessicali.</p>\n<p>üìå <strong>Placeholder per immagine</strong>:</p>\n<p><img src=\"/images/tikz/b06bb0bacf179b9d5af5dd94aeebc520.svg\" style=\"display: block; width: 100%; height: auto; max-height: 600px;\" class=\"tikz-svg\" /></p>\n<h2 id=\"wordnet-come-rete-semantica\">üåê WordNet come Rete Semantica</h2>\n<p>Ma WordNet <strong>non √® solo un grafo</strong>: √® una <strong>rete semantica vera e propria</strong>.</p>\n<blockquote>\n<p>Una rete semantica √® una rappresentazione strutturata della conoscenza, dove i concetti (synset) sono collegati da relazioni semantiche.</p>\n</blockquote>\n<p>üìå <strong>Esempio di Rete Semantica di WordNet</strong>:<br />\n<img alt=\"Schema rete semantica\" src=\"/images/posts/Example-of-a-semantic-network-in-wordnet_W640.jpg\" /></p>\n<h2 id=\"wordnet-in-altre-lingue\">üåç WordNet in altre lingue</h2>\n<p>Sebbene WordNet sia stato originariamente progettato per l‚Äô<strong>inglese</strong>, sono stati sviluppati diversi progetti per <strong>adattarlo ad altre lingue</strong>:</p>\n<ul>\n<li><strong>MultiWordNet</strong>: WordNet italiano, allineato semanticamente con l‚Äôoriginale inglese.</li>\n<li><strong>EuroWordNet</strong>: versioni per pi√π lingue europee, con una struttura concettuale condivisa.</li>\n<li><strong>BabelNet</strong>: estensione multilingue che unisce WordNet e Wikipedia.</li>\n</ul>\n<blockquote>\n<p>Queste versioni multilingue permettono confronti e inferenze semantiche cross-lingua, supportando applicazioni come machine translation, question answering e semantic search.</p>\n</blockquote>\n<h2 id=\"limiti-di-wordnet\">‚ö†Ô∏è Limiti di WordNet</h2>\n<p>Nonostante la sua utilit√†, WordNet presenta alcuni <strong>limiti strutturali e concettuali</strong>:</p>\n<ul>\n<li>üèóÔ∏è <strong>Costruito manualmente</strong>: la creazione e l‚Äôaggiornamento dei synset avviene tramite lavoro umano ‚Üí costoso e lento.</li>\n<li>üîç <strong>Copertura limitata</strong>: include soprattutto parole comuni e ben definite; mancano molti termini tecnici, neologismi, slang o forme idiomatiche.</li>\n<li>üåê <strong>Poche lingue disponibili</strong>: solo alcune lingue sono coperte da versioni ufficiali; molte lingue del mondo non hanno una risorsa WordNet completa.</li>\n<li>üìö <strong>Rigidit√† strutturale</strong>: le relazioni sono fisse e gerarchiche; difficile modellare ambiguit√†, polisemia o uso contestuale.</li>\n<li>üîÑ <strong>Non adatto a tutte le applicazioni</strong>: ad esempio, in ambiti come sentiment analysis o text classification, approcci basati su word embeddings o transformer offrono prestazioni migliori.</li>\n</ul>\n<h2 id=\"conclusione\">üìå Conclusione</h2>\n<p>WordNet rappresenta una <strong>risorsa lessicale fondamentale</strong> per il trattamento automatico del linguaggio, con applicazioni importanti in analisi semantica, disambiguazione, IR e NLP in generale.</p>\n<p>Tuttavia, le sue <strong>limitazioni strutturali</strong> e la <strong>copertura ristretta</strong> hanno spinto la comunit√† a esplorare <strong>approcci distribuiti</strong> (es. Word2Vec, GloVe, BERT) e <strong>reti semantiche pi√π ampie e aggiornate</strong> (es. BabelNet, ConceptNet).</p>\n<blockquote>\n<p>üß† WordNet resta una pietra miliare nello studio del significato linguistico e nella costruzione di sistemi intelligenti basati sulla semantica.</p>\n</blockquote>"
}