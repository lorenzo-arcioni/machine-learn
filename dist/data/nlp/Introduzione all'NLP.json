{
  "title": "Introduzione al Natural Language Processing (NLP)",
  "content": "<style>pre { line-height: 125%; }\ntd.linenos .normal { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }\nspan.linenos { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }\ntd.linenos .special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }\nspan.linenos.special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }\n.codehilite .hll { background-color: #ffffcc }\n.codehilite { background: #f8f8f8; }\n.codehilite .c { color: #3D7B7B; font-style: italic } /* Comment */\n.codehilite .err { border: 1px solid #F00 } /* Error */\n.codehilite .k { color: #008000; font-weight: bold } /* Keyword */\n.codehilite .o { color: #666 } /* Operator */\n.codehilite .ch { color: #3D7B7B; font-style: italic } /* Comment.Hashbang */\n.codehilite .cm { color: #3D7B7B; font-style: italic } /* Comment.Multiline */\n.codehilite .cp { color: #9C6500 } /* Comment.Preproc */\n.codehilite .cpf { color: #3D7B7B; font-style: italic } /* Comment.PreprocFile */\n.codehilite .c1 { color: #3D7B7B; font-style: italic } /* Comment.Single */\n.codehilite .cs { color: #3D7B7B; font-style: italic } /* Comment.Special */\n.codehilite .gd { color: #A00000 } /* Generic.Deleted */\n.codehilite .ge { font-style: italic } /* Generic.Emph */\n.codehilite .ges { font-weight: bold; font-style: italic } /* Generic.EmphStrong */\n.codehilite .gr { color: #E40000 } /* Generic.Error */\n.codehilite .gh { color: #000080; font-weight: bold } /* Generic.Heading */\n.codehilite .gi { color: #008400 } /* Generic.Inserted */\n.codehilite .go { color: #717171 } /* Generic.Output */\n.codehilite .gp { color: #000080; font-weight: bold } /* Generic.Prompt */\n.codehilite .gs { font-weight: bold } /* Generic.Strong */\n.codehilite .gu { color: #800080; font-weight: bold } /* Generic.Subheading */\n.codehilite .gt { color: #04D } /* Generic.Traceback */\n.codehilite .kc { color: #008000; font-weight: bold } /* Keyword.Constant */\n.codehilite .kd { color: #008000; font-weight: bold } /* Keyword.Declaration */\n.codehilite .kn { color: #008000; font-weight: bold } /* Keyword.Namespace */\n.codehilite .kp { color: #008000 } /* Keyword.Pseudo */\n.codehilite .kr { color: #008000; font-weight: bold } /* Keyword.Reserved */\n.codehilite .kt { color: #B00040 } /* Keyword.Type */\n.codehilite .m { color: #666 } /* Literal.Number */\n.codehilite .s { color: #BA2121 } /* Literal.String */\n.codehilite .na { color: #687822 } /* Name.Attribute */\n.codehilite .nb { color: #008000 } /* Name.Builtin */\n.codehilite .nc { color: #00F; font-weight: bold } /* Name.Class */\n.codehilite .no { color: #800 } /* Name.Constant */\n.codehilite .nd { color: #A2F } /* Name.Decorator */\n.codehilite .ni { color: #717171; font-weight: bold } /* Name.Entity */\n.codehilite .ne { color: #CB3F38; font-weight: bold } /* Name.Exception */\n.codehilite .nf { color: #00F } /* Name.Function */\n.codehilite .nl { color: #767600 } /* Name.Label */\n.codehilite .nn { color: #00F; font-weight: bold } /* Name.Namespace */\n.codehilite .nt { color: #008000; font-weight: bold } /* Name.Tag */\n.codehilite .nv { color: #19177C } /* Name.Variable */\n.codehilite .ow { color: #A2F; font-weight: bold } /* Operator.Word */\n.codehilite .w { color: #BBB } /* Text.Whitespace */\n.codehilite .mb { color: #666 } /* Literal.Number.Bin */\n.codehilite .mf { color: #666 } /* Literal.Number.Float */\n.codehilite .mh { color: #666 } /* Literal.Number.Hex */\n.codehilite .mi { color: #666 } /* Literal.Number.Integer */\n.codehilite .mo { color: #666 } /* Literal.Number.Oct */\n.codehilite .sa { color: #BA2121 } /* Literal.String.Affix */\n.codehilite .sb { color: #BA2121 } /* Literal.String.Backtick */\n.codehilite .sc { color: #BA2121 } /* Literal.String.Char */\n.codehilite .dl { color: #BA2121 } /* Literal.String.Delimiter */\n.codehilite .sd { color: #BA2121; font-style: italic } /* Literal.String.Doc */\n.codehilite .s2 { color: #BA2121 } /* Literal.String.Double */\n.codehilite .se { color: #AA5D1F; font-weight: bold } /* Literal.String.Escape */\n.codehilite .sh { color: #BA2121 } /* Literal.String.Heredoc */\n.codehilite .si { color: #A45A77; font-weight: bold } /* Literal.String.Interpol */\n.codehilite .sx { color: #008000 } /* Literal.String.Other */\n.codehilite .sr { color: #A45A77 } /* Literal.String.Regex */\n.codehilite .s1 { color: #BA2121 } /* Literal.String.Single */\n.codehilite .ss { color: #19177C } /* Literal.String.Symbol */\n.codehilite .bp { color: #008000 } /* Name.Builtin.Pseudo */\n.codehilite .fm { color: #00F } /* Name.Function.Magic */\n.codehilite .vc { color: #19177C } /* Name.Variable.Class */\n.codehilite .vg { color: #19177C } /* Name.Variable.Global */\n.codehilite .vi { color: #19177C } /* Name.Variable.Instance */\n.codehilite .vm { color: #19177C } /* Name.Variable.Magic */\n.codehilite .il { color: #666 } /* Literal.Number.Integer.Long */\n\n/* Styling per blocchi di codice */\n.codehilite {\n    background: transparent !important;\n    border-radius: 8px;\n    overflow: hidden;\n}\n.codehilite pre {\n    background: transparent !important;\n    margin: 0 !important;\n    padding: 20px !important;\n    font-family: 'Monaco', 'Menlo', 'Consolas', monospace !important;\n    font-size: 14px !important;\n    line-height: 1.5 !important;\n    white-space: pre !important;\n    overflow-x: auto !important;\n    color: inherit !important;\n}\n.codehilite code {\n    background: transparent !important;\n    padding: 0 !important;\n    font-family: inherit !important;\n}\n\n\n.code-wrapper { \n    position: relative; \n}\n.copy-button {\n    position: absolute; \n    top: 12px; \n    right: 12px; \n    padding: 6px 12px; \n    font-size: 12px;\n    cursor: pointer; \n    border: none; \n    border-radius: 4px; \n    background: rgba(255,255,255,0.9);\n    color: #374151; \n    transition: all 0.2s ease;\n    font-weight: 500;\n}\n.copy-button:hover { \n    background: rgba(255,255,255,1);\n    transform: translateY(-1px);\n}\n\n\ndetails.code-container {\n    border: 1px solid #e5e7eb; \n    border-radius: 12px; \n    background: #f9fafb;\n    margin: 16px 0;\n    transition: all 0.3s ease;\n}\ndetails.code-container summary {\n    padding: 12px 16px;\n    font-size: 14px; \n    color: #6b7280; \n    cursor: pointer; \n    outline: none; \n    user-select: none;\n    font-weight: 500;\n}\ndetails.code-container[open] summary::after { \n    content: \" (Hide Code)\"; \n    color: #9ca3af; \n}\ndetails.code-container:not([open]) summary::after { \n    content: \" (Show Code)\"; \n    color: #d1d5db; \n}\ndetails.code-container .code-wrapper {\n    padding: 0;\n    margin: 0;\n}\n/* Blocchi di codice sempre visibili */\n.code-visible {\n    border: 1px solid #e5e7eb;\n    border-radius: 12px;\n    background: #f9fafb;\n    margin: 16px 0;\n}\n.code-visible .code-wrapper {\n    padding: 0;\n    margin: 0;\n}\n</style>\n<h2 id=\"cose-il-natural-language-processing\">Cos&rsquo;è il Natural Language Processing?</h2>\n<ul>\n<li><strong>Definizione</strong>: Campo interdisciplinare che studia l&rsquo;interazione tra computer e linguaggi umani (es. inglese, italiano) attraverso testo o voce.</li>\n<li><strong>Obiettivo</strong>: Sviluppare algoritmi per comprendere, generare e manipolare il linguaggio naturale.</li>\n<li><strong>Esempi di applicazioni</strong>:</li>\n<li>Assistenti vocali (Siri, Alexa).</li>\n<li>Correzione ortografica (Grammarly).</li>\n<li>Traduzione automatica (Google Translate).</li>\n<li>Autocompletamento nei motori di ricerca.</li>\n</ul>\n<h2 id=\"componenti-fondamentali\">Componenti Fondamentali</h2>\n<h3 id=\"linguistica\">Linguistica</h3>\n<ul>\n<li><strong>Sottocampi</strong>:</li>\n<li><strong>Fonetica</strong>: Studio dei suoni linguistici.</li>\n<li><strong>Fonologia</strong>: Sistemi di suoni nelle lingue.</li>\n<li><strong>Morfologia</strong>: Struttura delle parole.</li>\n<li><strong>Sintassi</strong>: Struttura delle frasi.</li>\n<li><strong>Semantica</strong>: Significato delle frasi.</li>\n<li><strong>Pragmatica</strong>: Uso del linguaggio in contesti specifici.</li>\n</ul>\n<h3 id=\"informatica\">Informatica</h3>\n<ul>\n<li>Integra conoscenze linguistiche con:</li>\n<li><strong>Intelligenza Artificiale</strong> (ragionamento, apprendimento).</li>\n<li><strong>Machine Learning</strong> (modelli statistici, deep learning).</li>\n</ul>\n<h2 id=\"milestone-storiche-nellnlp\">Milestone Storiche nell&rsquo;NLP</h2>\n<ol>\n<li><strong>Sistemi basati su regole</strong> (es. regex per estrazione dati):</li>\n<li>Automatizano semplici task come l&rsquo;estrazione di dati strutturati (come date, nomi, etc..) da quelli non strutturati (come pagine web, email, etc..).</li>\n<li>Limitati nella generalizzazione, in quanto poco robusti e semplici.</li>\n<li><strong>Modelli statistici e ML classico</strong> (es. Naive Bayes):</li>\n<li>Possono risolvere problemi più complessigrazie a modelli statistici e probabilistici.</li>\n<li>Tramite la feature engineering, riescono a sfruttare bene i pattern nei dati di addestramento per fare previsioni accurate su dati mai visti.</li>\n<li><strong>Deep Learning</strong> (es. word2vec, BERT):</li>\n<li>Generalizzano anche meglio dei classici approcci di machine learning. Non necessitano di caratteristiche create manualmente o di feature engineering perché funzionano automaticamente come estrattori di feature, consentendo l&rsquo;addestramento end-to-end del modello.</li>\n<li>Le capacità di apprendimento dei modelli di deep learning sono più potenti rispetto a quelle dei modelli ML classici/superficiali, il che ha aperto la strada al raggiungimento dei punteggi più elevati in varie impegnative task di NLP (ad esempio, la traduzione automatica).</li>\n</ol>\n<h2 id=\"rappresentazioni-del-testo\">Rappresentazioni del Testo</h2>\n<ul>\n<li><strong>One-Hot Encoding</strong>: </li>\n<li>Vettori binari che codificano le parole come sequenze di 0 e 1 in base al vocabolario.</li>\n<li>\n<p>Esempio: &ldquo;Il gatto è sul tappeto&rdquo; → matrici binarie.</p>\n<p>Questo approccio presenta due svantaggi significativi:\n- <strong>Sparsità</strong>: I vettori risultano molto lunghi e con molti zeri (alta dimensionalità) se il vocabolario e la lunghezza del testo sono grandi.\n- <strong>Mancanza di Relazioni Semantiche</strong>: Non è in grado di comprendere le relazioni tra le parole (ad esempio, &ldquo;scuola&rdquo; e &ldquo;libro&rdquo;).\n- <strong>Word Embeddings</strong> (es. word2vec, GloVe):\n  - Questo modello di deep learning superficiale (shallow) è in grado di rappresentare le parole come vettori densi e catturare relazioni semantiche tra termini correlati (ad esempio, &ldquo;Parigi&rdquo; e &ldquo;Francia&rdquo;, &ldquo;Madrid&rdquo; e &ldquo;Spagna&rdquo;). \n  - Vettori densi che catturano relazioni semantiche (es. &ldquo;Parigi → Francia&rdquo;).\n- <strong>Modelli Transformer</strong> (es. BERT, GPT):\n  - Stato dell&rsquo;arte nei problemi di NLP moderni.\n  - Base per NLP avanzato (es. ChatGPT).</p>\n</li>\n</ul>\n<h2 id=\"nlp-multimodale\">NLP Multimodale</h2>\n<ul>\n<li><strong>Definizione</strong>: Estensione del NLP tradizionale che combina dati testuali con altre modalità (immagini, audio, video) per migliorare la comprensione contestuale.  </li>\n<li><strong>Obiettivo</strong>: Creare modelli in grado di interpretare e generare contenuti integrando informazioni multimodali (es. descrivere un&rsquo;immagine o rispondere a domande su un video).  </li>\n<li><strong>Esempi di applicazioni</strong>:  </li>\n<li>Generazione di descrizioni testuali da immagini (image captioning).  </li>\n<li>Sistemi di risposta a domande basate su video (video QA).  </li>\n<li>Assistenti virtuali che interpretano comandi vocali e contesto visivo.  </li>\n<li><strong>Vantaggi</strong>:  </li>\n<li>Maggiore ricchezza informativa grazie alla fusione di fonti eterogenee.  </li>\n<li>Miglioramento delle prestazioni in task complessi (es. riconoscimento di emozioni da testo + tono vocale).  </li>\n<li><strong>Sfide</strong>:  </li>\n<li>Allineamento tra modalità diverse (es. sincronizzare testo parlato con frame video).  </li>\n<li>Complessità computazionale nell&rsquo;elaborazione parallela di dati multimodali.  </li>\n<li><strong>Modelli Rappresentativi</strong>:  </li>\n<li>CLIP (OpenAI): Classifica immagini basandosi su descrizioni testuali.  </li>\n<li>DALL-E (OpenAI): Genera immagini da prompt testuali.  </li>\n<li>Whisper (OpenAI): Trascrizione e traduzione multimodale (audio → testo → altre lingue).</li>\n</ul>\n<h2 id=\"task-e-sfide-nellnlp\">Task e Sfide nell&rsquo;NLP</h2>\n<h3 id=\"task-risolti\">Task Risolti</h3>\n<ul>\n<li>Classificazione del testo (es. spam detection).</li>\n<li>Part-of-Speech Tagging (POS).</li>\n<li>Named Entity Recognition (NER).</li>\n</ul>\n<h3 id=\"sfide-aperte\">Sfide Aperte</h3>\n<ul>\n<li>Chatbot a dominio aperto.</li>\n<li>Riassunto astrattivo.</li>\n<li>NLP per lingue a bassa risorsa (es. lingue africane).</li>\n</ul>\n<h2 id=\"risorse\">Risorse</h2>\n<ul>\n<li><strong>Libri</strong>: <a href=\"https://web.stanford.edu/~jurafsky/slp3/\">Speech and Language Processing (Jurafsky &amp; Martin)</a>.</li>\n<li><strong>Articoli</strong>: </li>\n<li><a href=\"https://arxiv.org/abs/1301.3781\">word2vec (Mikolov et al., 2013)</a>.</li>\n<li><a href=\"https://arxiv.org/abs/1810.04805\">BERT (Devlin et al., 2019)</a>.</li>\n</ul>\n<blockquote>\n<p><strong>Etichetta</strong>: #NLP #Linguistica #AI<br />\n<strong>Collegamenti</strong>: <span class=\"text-gray-600\">Machine Learning</span>, <span class=\"text-gray-600\">Deep Learning</span></p>\n</blockquote>"
}