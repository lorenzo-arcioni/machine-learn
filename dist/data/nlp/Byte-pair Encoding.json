{
  "title": "Byte-Pair Encoding (BPE): Algoritmo e Esempio Pratico",
  "content": "<style>pre { line-height: 125%; }\ntd.linenos .normal { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }\nspan.linenos { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }\ntd.linenos .special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }\nspan.linenos.special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }\n.codehilite .hll { background-color: #ffffcc }\n.codehilite { background: #f8f8f8; }\n.codehilite .c { color: #3D7B7B; font-style: italic } /* Comment */\n.codehilite .err { border: 1px solid #F00 } /* Error */\n.codehilite .k { color: #008000; font-weight: bold } /* Keyword */\n.codehilite .o { color: #666 } /* Operator */\n.codehilite .ch { color: #3D7B7B; font-style: italic } /* Comment.Hashbang */\n.codehilite .cm { color: #3D7B7B; font-style: italic } /* Comment.Multiline */\n.codehilite .cp { color: #9C6500 } /* Comment.Preproc */\n.codehilite .cpf { color: #3D7B7B; font-style: italic } /* Comment.PreprocFile */\n.codehilite .c1 { color: #3D7B7B; font-style: italic } /* Comment.Single */\n.codehilite .cs { color: #3D7B7B; font-style: italic } /* Comment.Special */\n.codehilite .gd { color: #A00000 } /* Generic.Deleted */\n.codehilite .ge { font-style: italic } /* Generic.Emph */\n.codehilite .ges { font-weight: bold; font-style: italic } /* Generic.EmphStrong */\n.codehilite .gr { color: #E40000 } /* Generic.Error */\n.codehilite .gh { color: #000080; font-weight: bold } /* Generic.Heading */\n.codehilite .gi { color: #008400 } /* Generic.Inserted */\n.codehilite .go { color: #717171 } /* Generic.Output */\n.codehilite .gp { color: #000080; font-weight: bold } /* Generic.Prompt */\n.codehilite .gs { font-weight: bold } /* Generic.Strong */\n.codehilite .gu { color: #800080; font-weight: bold } /* Generic.Subheading */\n.codehilite .gt { color: #04D } /* Generic.Traceback */\n.codehilite .kc { color: #008000; font-weight: bold } /* Keyword.Constant */\n.codehilite .kd { color: #008000; font-weight: bold } /* Keyword.Declaration */\n.codehilite .kn { color: #008000; font-weight: bold } /* Keyword.Namespace */\n.codehilite .kp { color: #008000 } /* Keyword.Pseudo */\n.codehilite .kr { color: #008000; font-weight: bold } /* Keyword.Reserved */\n.codehilite .kt { color: #B00040 } /* Keyword.Type */\n.codehilite .m { color: #666 } /* Literal.Number */\n.codehilite .s { color: #BA2121 } /* Literal.String */\n.codehilite .na { color: #687822 } /* Name.Attribute */\n.codehilite .nb { color: #008000 } /* Name.Builtin */\n.codehilite .nc { color: #00F; font-weight: bold } /* Name.Class */\n.codehilite .no { color: #800 } /* Name.Constant */\n.codehilite .nd { color: #A2F } /* Name.Decorator */\n.codehilite .ni { color: #717171; font-weight: bold } /* Name.Entity */\n.codehilite .ne { color: #CB3F38; font-weight: bold } /* Name.Exception */\n.codehilite .nf { color: #00F } /* Name.Function */\n.codehilite .nl { color: #767600 } /* Name.Label */\n.codehilite .nn { color: #00F; font-weight: bold } /* Name.Namespace */\n.codehilite .nt { color: #008000; font-weight: bold } /* Name.Tag */\n.codehilite .nv { color: #19177C } /* Name.Variable */\n.codehilite .ow { color: #A2F; font-weight: bold } /* Operator.Word */\n.codehilite .w { color: #BBB } /* Text.Whitespace */\n.codehilite .mb { color: #666 } /* Literal.Number.Bin */\n.codehilite .mf { color: #666 } /* Literal.Number.Float */\n.codehilite .mh { color: #666 } /* Literal.Number.Hex */\n.codehilite .mi { color: #666 } /* Literal.Number.Integer */\n.codehilite .mo { color: #666 } /* Literal.Number.Oct */\n.codehilite .sa { color: #BA2121 } /* Literal.String.Affix */\n.codehilite .sb { color: #BA2121 } /* Literal.String.Backtick */\n.codehilite .sc { color: #BA2121 } /* Literal.String.Char */\n.codehilite .dl { color: #BA2121 } /* Literal.String.Delimiter */\n.codehilite .sd { color: #BA2121; font-style: italic } /* Literal.String.Doc */\n.codehilite .s2 { color: #BA2121 } /* Literal.String.Double */\n.codehilite .se { color: #AA5D1F; font-weight: bold } /* Literal.String.Escape */\n.codehilite .sh { color: #BA2121 } /* Literal.String.Heredoc */\n.codehilite .si { color: #A45A77; font-weight: bold } /* Literal.String.Interpol */\n.codehilite .sx { color: #008000 } /* Literal.String.Other */\n.codehilite .sr { color: #A45A77 } /* Literal.String.Regex */\n.codehilite .s1 { color: #BA2121 } /* Literal.String.Single */\n.codehilite .ss { color: #19177C } /* Literal.String.Symbol */\n.codehilite .bp { color: #008000 } /* Name.Builtin.Pseudo */\n.codehilite .fm { color: #00F } /* Name.Function.Magic */\n.codehilite .vc { color: #19177C } /* Name.Variable.Class */\n.codehilite .vg { color: #19177C } /* Name.Variable.Global */\n.codehilite .vi { color: #19177C } /* Name.Variable.Instance */\n.codehilite .vm { color: #19177C } /* Name.Variable.Magic */\n.codehilite .il { color: #666 } /* Literal.Number.Integer.Long */\n\n/* Styling per blocchi di codice */\n.codehilite {\n    background: transparent !important;\n    border-radius: 8px;\n    overflow: hidden;\n}\n.codehilite pre {\n    background: transparent !important;\n    margin: 0 !important;\n    padding: 20px !important;\n    font-family: 'Monaco', 'Menlo', 'Consolas', monospace !important;\n    font-size: 14px !important;\n    line-height: 1.5 !important;\n    white-space: pre !important;\n    overflow-x: auto !important;\n    color: inherit !important;\n}\n.codehilite code {\n    background: transparent !important;\n    padding: 0 !important;\n    font-family: inherit !important;\n}\n\n\n.code-wrapper { \n    position: relative; \n}\n.copy-button {\n    position: absolute; \n    top: 12px; \n    right: 12px; \n    padding: 6px 12px; \n    font-size: 12px;\n    cursor: pointer; \n    border: none; \n    border-radius: 4px; \n    background: rgba(255,255,255,0.9);\n    color: #374151; \n    transition: all 0.2s ease;\n    font-weight: 500;\n}\n.copy-button:hover { \n    background: rgba(255,255,255,1);\n    transform: translateY(-1px);\n}\n\n\ndetails.code-container {\n    border: 1px solid #e5e7eb; \n    border-radius: 12px; \n    background: #f9fafb;\n    margin: 16px 0;\n    transition: all 0.3s ease;\n}\ndetails.code-container summary {\n    padding: 12px 16px;\n    font-size: 14px; \n    color: #6b7280; \n    cursor: pointer; \n    outline: none; \n    user-select: none;\n    font-weight: 500;\n}\ndetails.code-container[open] summary::after { \n    content: \" (Hide Code)\"; \n    color: #9ca3af; \n}\ndetails.code-container:not([open]) summary::after { \n    content: \" (Show Code)\"; \n    color: #d1d5db; \n}\ndetails.code-container .code-wrapper {\n    padding: 0;\n    margin: 0;\n}\n/* Blocchi di codice sempre visibili */\n.code-visible {\n    border: 1px solid #e5e7eb;\n    border-radius: 12px;\n    background: #f9fafb;\n    margin: 16px 0;\n}\n.code-visible .code-wrapper {\n    padding: 0;\n    margin: 0;\n}\n</style>\n<p>Il <strong>Byte-Pair Encoding</strong> (BPE) è un algoritmo di tokenizzazione sub-lessicale ampiamente utilizzato in NLP per ridurre le dimensioni del vocabolario e gestire parole rare o non viste. Si basa sulla fusione iterativa delle coppie di caratteri/sottoparole più frequenti in un corpus.  </p>\n$$\n\\text{BPE}(C, k) = \\{ \\text{token}_1, \\text{token}_2, \\text{token}_3, \\ldots \\}\n$$\n<h2 id=\"algoritmo-bpe-in-pseudocodice\"><strong>Algoritmo BPE in Pseudocodice</strong></h2>\n<p><strong>Input</strong>:<br />\n- <code>C</code>: Corpus suddiviso in token iniziali (es. caratteri o parole).<br />\n- <code>k</code>: Numero di fusioni da eseguire.  </p>\n<p><strong>Output</strong>:<br />\n- <code>V</code>: Vocabolario finale con token sub-lessicali.  </p>\n<p><strong>Passaggi</strong>:  </p>\n<ol>\n<li><strong>Inizializzazione del vocabolario</strong>:  </li>\n<li>Suddividi ogni parola nel corpus in caratteri individuali.  </li>\n<li>Aggiungi un simbolo speciale <code>_</code> (spesso usato per indicare la fine di una parola).  </li>\n<li>\n<p><code>V</code> ← Insieme di tutti i caratteri unici presenti in <code>C</code>.  </p>\n</li>\n<li>\n<p><strong>Iterazione per <code>k</code> fusioni</strong>:<br />\n   Per <code>i</code> da 1 a <code>k</code>:  </p>\n</li>\n<li><strong>Calcola le frequenze delle coppie adiacenti</strong>:<br />\n     Conta tutte le coppie di token consecutivi nel corpus.  </li>\n<li><strong>Seleziona la coppia più frequente</strong>:<br />\n     Sia <code>(tL, tR)</code> la coppia con la massima frequenza.  </li>\n<li><strong>Crea un nuovo token</strong>:<br />\n<code>tNEW</code> ← <code>tL + tR</code> (concatenazione dei due token).  </li>\n<li><strong>Aggiorna il vocabolario</strong>:<br />\n<code>V</code> ← <code>V ∪ {tNEW}</code>.  </li>\n<li>\n<p><strong>Modifica il corpus</strong>:<br />\n     Sostituisci ogni occorrenza di <code>tL</code> seguito da <code>tR</code> con <code>tNEW</code> in tutte le parole.  </p>\n</li>\n<li>\n<p><strong>Restituisci</strong> <code>V</code>.  </p>\n</li>\n</ol>\n$$\n\\begin{aligned}\n& \\textbf{Algoritmo: Byte-Pair Encoding} \\\\\n& \\textbf{Input:} \\\\\n& \\quad - \\text{Corpus } C \\text{ (token iniziali)} \\\\\n& \\quad - \\text{Numero di fusioni } k \\\\\n& \\textbf{Output:} \\\\\n& \\quad - \\text{Vocabolario } V \\text{ (token sub-lessicali)} \\\\\n& \\\\\n& \\text{1: Inizializza } V \\gets \\text{ tutti i caratteri unici in } C \\\\\n& \\text{2: Aggiungi il simbolo speciale } \\texttt{\"_\"} \\text{ a } V \\text{ (delimitatore di fine parola)} \\\\\n& \\text{3: Suddividi ogni parola in } C \\text{ in caratteri singoli + } \\texttt{_} \\\\\n& \\text{4: For } i = 1 \\text{ to } k \\text{ do:} \\\\\n& \\quad \\text{4.1: Calcola frequenze di tutte le coppie adiacenti } (t_L, t_R) \\text{ in } C \\\\\n& \\quad \\text{4.2: Seleziona la coppia } (t_L, t_R) \\text{ con frequenza massima} \\\\\n& \\quad \\text{4.3: Crea nuovo token } t_{\\text{NEW}} = t_L \\oplus t_R \\text{ (concatenazione)} \\\\\n& \\quad \\text{4.4: Aggiorna } V \\leftarrow V \\cup \\{ t_{\\text{NEW}} \\} \\\\\n& \\quad \\text{4.5: Sostituisci ogni occorrenza di } t_L t_R \\text{ con } t_{\\text{NEW}} \\text{ in } C \\\\\n& \\text{5: Restituisci } V\n\\end{aligned}\n$$\n<h2 id=\"esempio-pratico\"><strong>Esempio Pratico</strong></h2>\n<h3 id=\"dati-iniziali\">Dati Iniziali</h3>\n<p><strong>Corpus</strong> (con frequenze):<br />\n5 <code>l o w _</code><br />\n2 <code>l o w e s t _</code><br />\n6 <code>n e w e r _</code><br />\n3 <code>w i d e r _</code><br />\n2 <code>n e w _</code>  </p>\n<p><strong>Vocabolario iniziale</strong>:<br />\n<code>V = { _, d, e, i, l, n, o, r, s, t, w }</code>  </p>\n<hr />\n<h3 id=\"esecuzione-dellalgoritmo-k-3-fusioni\">Esecuzione dell&rsquo;Algoritmo (k = 3 fusioni)</h3>\n<h4 id=\"fusione-1\"><strong>Fusione 1</strong></h4>\n<ul>\n<li><strong>Coppia più frequente</strong>: <code>(e, r)</code>  </li>\n<li>Presente in:<br />\n    6 <code>n e w e r _</code> (6 occorrenze)<br />\n    3 <code>w i d e r _</code> (3 occorrenze)  </li>\n<li><strong>Totale</strong>: 9 occorrenze  </li>\n<li><strong>Nuovo token</strong>: <code>er</code>  </li>\n<li><strong>Vocabolario aggiornato</strong>:<br />\n<code>V = { _, d, e, i, l, n, o, r, s, t, w, er }</code>  </li>\n<li><strong>Nuovo corpus</strong>:<br />\n  5 <code>l o w _</code><br />\n  2 <code>l o w e s t _</code><br />\n  6 <code>n e w er _</code><br />\n  3 <code>w i d er _</code><br />\n  2 <code>n e w _</code>  </li>\n</ul>\n<h4 id=\"fusione-2\"><strong>Fusione 2</strong></h4>\n<ul>\n<li><strong>Coppia più frequente</strong>: <code>(er, _)</code>  </li>\n<li>Presente in:<br />\n    6 <code>n e w er _</code> (6 occorrenze)<br />\n    3 <code>w i d er _</code> (3 occorrenze)  </li>\n<li><strong>Totale</strong>: 9 occorrenze  </li>\n<li><strong>Nuovo token</strong>: <code>er_</code>  </li>\n<li><strong>Vocabolario aggiornato</strong>:<br />\n<code>V = { _, d, e, i, l, n, o, r, s, t, w, er, er_ }</code>  </li>\n<li><strong>Nuovo corpus</strong>:<br />\n  5 <code>l o w _</code><br />\n  2 <code>l o w e s t _</code><br />\n  6 <code>n e w er_</code><br />\n  3 <code>w i d er_</code><br />\n  2 <code>n e w _</code>  </li>\n</ul>\n<h4 id=\"fusione-3\"><strong>Fusione 3</strong></h4>\n<ul>\n<li><strong>Coppia più frequente</strong>: <code>(n, e)</code>  </li>\n<li>Presente in:<br />\n    6 <code>n e w er_</code> (6 occorrenze)<br />\n    2 <code>n e w _</code> (2 occorrenze)  </li>\n<li><strong>Totale</strong>: 8 occorrenze  </li>\n<li><strong>Nuovo token</strong>: <code>ne</code>  </li>\n<li><strong>Vocabolario finale</strong>:<br />\n<code>V = { _, d, e, i, l, n, o, r, s, t, w, er, er_, ne}</code>    </li>\n<li><strong>Corpus finale</strong>:<br />\n  5 <code>l o w _</code><br />\n  2 <code>l o w e s t _</code><br />\n  6 <code>ne w er_</code><br />\n  3 <code>w i d er_</code><br />\n  2 <code>ne w _</code>  </li>\n</ul>\n<h4 id=\"fusione-4\"><strong>Fusione 4</strong></h4>\n<ul>\n<li><strong>Coppia più frequente</strong>: <code>(ne, w)</code>  </li>\n<li>Presente in:<br />\n    6 <code>ne w er_</code> (6 occorrenze)<br />\n    2 <code>ne w _</code> (2 occorrenze)  </li>\n<li><strong>Totale</strong>: 8 occorrenze  </li>\n<li><strong>Nuovo token</strong>: <code>new</code>  </li>\n<li><strong>Vocabolario aggiornato</strong>:<br />\n<code>V = { _, d, e, i, l, n, o, r, s, t, w, er, er_, ne, new }</code>  </li>\n<li><strong>Nuovo corpus</strong>:<br />\n  5 <code>l o w _</code><br />\n  2 <code>l o w e s t _</code><br />\n  6 <code>new er_</code><br />\n  3 <code>w i d er_</code><br />\n  2 <code>new _</code>  </li>\n</ul>\n<h4 id=\"fusione-5\"><strong>Fusione 5</strong></h4>\n<ul>\n<li><strong>Coppia più frequente</strong>: <code>(l, o)</code>  </li>\n<li>Presente in:<br />\n    5 <code>l o w _</code> (5 occorrenze)<br />\n    2 <code>l o w e s t _</code> (2 occorrenze)  </li>\n<li><strong>Totale</strong>: 7 occorrenze  </li>\n<li><strong>Nuovo token</strong>: <code>lo</code>  </li>\n<li><strong>Vocabolario aggiornato</strong>:<br />\n<code>V = { _, d, e, i, l, n, o, r, s, t, w, er, er_, ne, new, lo }</code>  </li>\n<li><strong>Nuovo corpus</strong>:<br />\n  5 <code>lo w _</code><br />\n  2 <code>lo w e s t _</code><br />\n  6 <code>new er_</code><br />\n  3 <code>w i d er_</code><br />\n  2 <code>new _</code>  </li>\n</ul>\n<h4 id=\"fusione-6\"><strong>Fusione 6</strong></h4>\n<ul>\n<li><strong>Coppia più frequente</strong>: <code>(lo, w)</code>  </li>\n<li>Presente in:<br />\n    5 <code>lo w _</code> (5 occorrenze)<br />\n    2 <code>lo w e s t _</code> (2 occorrenze)  </li>\n<li><strong>Totale</strong>: 7 occorrenze  </li>\n<li><strong>Nuovo token</strong>: <code>low</code>  </li>\n<li><strong>Vocabolario aggiornato</strong>:<br />\n<code>V = { ..., lo, low }</code>  </li>\n<li><strong>Nuovo corpus</strong>:<br />\n  5 <code>low _</code><br />\n  2 <code>low e s t _</code><br />\n  6 <code>new er_</code><br />\n  3 <code>w i d er_</code><br />\n  2 <code>new _</code>  </li>\n</ul>\n<h4 id=\"fusione-7\"><strong>Fusione 7</strong></h4>\n<ul>\n<li><strong>Coppia più frequente</strong>: <code>(new, er_)</code>  </li>\n<li>Presente in:<br />\n    6 <code>new er_</code> (6 occorrenze)  </li>\n<li><strong>Totale</strong>: 6 occorrenze  </li>\n<li><strong>Nuovo token</strong>: <code>newer_</code>  </li>\n<li><strong>Vocabolario aggiornato</strong>:<br />\n<code>V = { ..., new, er_, newer_ }</code>  </li>\n<li><strong>Nuovo corpus</strong>:<br />\n  5 <code>low _</code><br />\n  2 <code>low e s t _</code><br />\n  6 <code>newer_</code>  <!-- Fusione di \"new\" + \"er_\" --><br />\n  3 <code>w i d er_</code><br />\n  2 <code>new _</code>  </li>\n</ul>\n<h4 id=\"fusione-8\"><strong>Fusione 8</strong></h4>\n<ul>\n<li><strong>Coppia più frequente</strong>: <code>(low, _)</code>  </li>\n<li>Presente in:<br />\n    5 <code>low _</code> (5 occorrenze)  </li>\n<li><strong>Totale</strong>: 5 occorrenze  </li>\n<li><strong>Nuovo token</strong>: <code>low_</code>  </li>\n<li><strong>Vocabolario finale</strong>:<br />\n<code>V = { _, d, e, i, l, n, o, r, s, t, w, er, er_, ne, new, lo, low, newer_, low_ }</code>  </li>\n<li><strong>Corpus finale</strong>:<br />\n  5 <code>low_</code>  <!-- Fusione di \"low\" + \"_\" --><br />\n  2 <code>low e s t _</code><br />\n  6 <code>newer_</code><br />\n  3 <code>w i d er_</code><br />\n  2 <code>new _</code>  </li>\n</ul>\n<p>Quindi, dopo 8 fusioni (iterazioni), il vocabolario finale contiene 19 token e il corpus finale contiene 12 token. E queste sono le regole apprese dall&rsquo;algoritmo:</p>\n<ul>\n<li>e r -&gt; er</li>\n<li>er _ -&gt; er_</li>\n<li>n e -&gt; ne</li>\n<li>ne w-&gt; new</li>\n<li>l o -&gt; lo</li>\n<li>lo w -&gt; low</li>\n<li>new er_ -&gt; newer_</li>\n<li>low _ -&gt; low_</li>\n</ul>"
}