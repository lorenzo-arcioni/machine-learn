{
  "title": "Ottimizzazione Non Lineare",
  "content": "<style>pre { line-height: 125%; }\ntd.linenos .normal { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }\nspan.linenos { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }\ntd.linenos .special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }\nspan.linenos.special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }\n.codehilite .hll { background-color: #ffffcc }\n.codehilite { background: #f8f8f8; }\n.codehilite .c { color: #3D7B7B; font-style: italic } /* Comment */\n.codehilite .err { border: 1px solid #F00 } /* Error */\n.codehilite .k { color: #008000; font-weight: bold } /* Keyword */\n.codehilite .o { color: #666 } /* Operator */\n.codehilite .ch { color: #3D7B7B; font-style: italic } /* Comment.Hashbang */\n.codehilite .cm { color: #3D7B7B; font-style: italic } /* Comment.Multiline */\n.codehilite .cp { color: #9C6500 } /* Comment.Preproc */\n.codehilite .cpf { color: #3D7B7B; font-style: italic } /* Comment.PreprocFile */\n.codehilite .c1 { color: #3D7B7B; font-style: italic } /* Comment.Single */\n.codehilite .cs { color: #3D7B7B; font-style: italic } /* Comment.Special */\n.codehilite .gd { color: #A00000 } /* Generic.Deleted */\n.codehilite .ge { font-style: italic } /* Generic.Emph */\n.codehilite .ges { font-weight: bold; font-style: italic } /* Generic.EmphStrong */\n.codehilite .gr { color: #E40000 } /* Generic.Error */\n.codehilite .gh { color: #000080; font-weight: bold } /* Generic.Heading */\n.codehilite .gi { color: #008400 } /* Generic.Inserted */\n.codehilite .go { color: #717171 } /* Generic.Output */\n.codehilite .gp { color: #000080; font-weight: bold } /* Generic.Prompt */\n.codehilite .gs { font-weight: bold } /* Generic.Strong */\n.codehilite .gu { color: #800080; font-weight: bold } /* Generic.Subheading */\n.codehilite .gt { color: #04D } /* Generic.Traceback */\n.codehilite .kc { color: #008000; font-weight: bold } /* Keyword.Constant */\n.codehilite .kd { color: #008000; font-weight: bold } /* Keyword.Declaration */\n.codehilite .kn { color: #008000; font-weight: bold } /* Keyword.Namespace */\n.codehilite .kp { color: #008000 } /* Keyword.Pseudo */\n.codehilite .kr { color: #008000; font-weight: bold } /* Keyword.Reserved */\n.codehilite .kt { color: #B00040 } /* Keyword.Type */\n.codehilite .m { color: #666 } /* Literal.Number */\n.codehilite .s { color: #BA2121 } /* Literal.String */\n.codehilite .na { color: #687822 } /* Name.Attribute */\n.codehilite .nb { color: #008000 } /* Name.Builtin */\n.codehilite .nc { color: #00F; font-weight: bold } /* Name.Class */\n.codehilite .no { color: #800 } /* Name.Constant */\n.codehilite .nd { color: #A2F } /* Name.Decorator */\n.codehilite .ni { color: #717171; font-weight: bold } /* Name.Entity */\n.codehilite .ne { color: #CB3F38; font-weight: bold } /* Name.Exception */\n.codehilite .nf { color: #00F } /* Name.Function */\n.codehilite .nl { color: #767600 } /* Name.Label */\n.codehilite .nn { color: #00F; font-weight: bold } /* Name.Namespace */\n.codehilite .nt { color: #008000; font-weight: bold } /* Name.Tag */\n.codehilite .nv { color: #19177C } /* Name.Variable */\n.codehilite .ow { color: #A2F; font-weight: bold } /* Operator.Word */\n.codehilite .w { color: #BBB } /* Text.Whitespace */\n.codehilite .mb { color: #666 } /* Literal.Number.Bin */\n.codehilite .mf { color: #666 } /* Literal.Number.Float */\n.codehilite .mh { color: #666 } /* Literal.Number.Hex */\n.codehilite .mi { color: #666 } /* Literal.Number.Integer */\n.codehilite .mo { color: #666 } /* Literal.Number.Oct */\n.codehilite .sa { color: #BA2121 } /* Literal.String.Affix */\n.codehilite .sb { color: #BA2121 } /* Literal.String.Backtick */\n.codehilite .sc { color: #BA2121 } /* Literal.String.Char */\n.codehilite .dl { color: #BA2121 } /* Literal.String.Delimiter */\n.codehilite .sd { color: #BA2121; font-style: italic } /* Literal.String.Doc */\n.codehilite .s2 { color: #BA2121 } /* Literal.String.Double */\n.codehilite .se { color: #AA5D1F; font-weight: bold } /* Literal.String.Escape */\n.codehilite .sh { color: #BA2121 } /* Literal.String.Heredoc */\n.codehilite .si { color: #A45A77; font-weight: bold } /* Literal.String.Interpol */\n.codehilite .sx { color: #008000 } /* Literal.String.Other */\n.codehilite .sr { color: #A45A77 } /* Literal.String.Regex */\n.codehilite .s1 { color: #BA2121 } /* Literal.String.Single */\n.codehilite .ss { color: #19177C } /* Literal.String.Symbol */\n.codehilite .bp { color: #008000 } /* Name.Builtin.Pseudo */\n.codehilite .fm { color: #00F } /* Name.Function.Magic */\n.codehilite .vc { color: #19177C } /* Name.Variable.Class */\n.codehilite .vg { color: #19177C } /* Name.Variable.Global */\n.codehilite .vi { color: #19177C } /* Name.Variable.Instance */\n.codehilite .vm { color: #19177C } /* Name.Variable.Magic */\n.codehilite .il { color: #666 } /* Literal.Number.Integer.Long */\n\n/* Styling per blocchi di codice */\n.codehilite {\n    background: transparent !important;\n    border-radius: 8px;\n    overflow: hidden;\n}\n.codehilite pre {\n    background: transparent !important;\n    margin: 0 !important;\n    padding: 20px !important;\n    font-family: 'Monaco', 'Menlo', 'Consolas', monospace !important;\n    font-size: 14px !important;\n    line-height: 1.5 !important;\n    white-space: pre !important;\n    overflow-x: auto !important;\n    color: inherit !important;\n}\n.codehilite code {\n    background: transparent !important;\n    padding: 0 !important;\n    font-family: inherit !important;\n}\n\n\n.code-wrapper { \n    position: relative; \n}\n.copy-button {\n    position: absolute; \n    top: 12px; \n    right: 12px; \n    padding: 6px 12px; \n    font-size: 12px;\n    cursor: pointer; \n    border: none; \n    border-radius: 4px; \n    background: rgba(255,255,255,0.9);\n    color: #374151; \n    transition: all 0.2s ease;\n    font-weight: 500;\n}\n.copy-button:hover { \n    background: rgba(255,255,255,1);\n    transform: translateY(-1px);\n}\n\n\ndetails.code-container {\n    border: 1px solid #e5e7eb; \n    border-radius: 12px; \n    background: #f9fafb;\n    margin: 16px 0;\n    transition: all 0.3s ease;\n}\ndetails.code-container summary {\n    padding: 12px 16px;\n    font-size: 14px; \n    color: #6b7280; \n    cursor: pointer; \n    outline: none; \n    user-select: none;\n    font-weight: 500;\n}\ndetails.code-container[open] summary::after { \n    content: \" (Hide Code)\"; \n    color: #9ca3af; \n}\ndetails.code-container:not([open]) summary::after { \n    content: \" (Show Code)\"; \n    color: #d1d5db; \n}\ndetails.code-container .code-wrapper {\n    padding: 0;\n    margin: 0;\n}\n/* Blocchi di codice sempre visibili */\n.code-visible {\n    border: 1px solid #e5e7eb;\n    border-radius: 12px;\n    background: #f9fafb;\n    margin: 16px 0;\n}\n.code-visible .code-wrapper {\n    padding: 0;\n    margin: 0;\n}\n</style>\n<h2 id=\"definizione-formale\">Definizione Formale</h2>\n<p>L&rsquo;<strong>ottimizzazione non lineare</strong> consiste nel trovare un vettore $\\mathbf{x}^* \\in \\mathbb{R}^n$ che:  </p>\n$$\n\\begin{aligned}  \n\\mathbf{x}^* = \\arg\\min_{\\mathbf{x}} \\quad & f(\\mathbf{x}) \\\\  \n\\text{soggetto a} \\quad & g_i(\\mathbf{x}) \\leq 0, \\quad i = 1, \\dots, m \\\\  \n& h_j(\\mathbf{x}) = 0, \\quad j = 1, \\dots, p  \n\\end{aligned}  \n$$\n<p>dove:<br />\n- $f: \\mathbb{R}^n \\to \\mathbb{R}$ è una <strong>funzione obiettivo non lineare</strong><br />\n- $g_i: \\mathbb{R}^n \\to \\mathbb{R}$ sono vincoli di disuguaglianza non lineari<br />\n- $h_j: \\mathbb{R}^n \\to \\mathbb{R}$ sono vincoli di uguaglianza non lineari  </p>\n<p><strong>Condizione di non linearità</strong>: Almeno una tra $f$, $\\{g_i\\}$, o $\\{h_j\\}$ è non lineare.  </p>\n<h2 id=\"classificazione-problemi\">Classificazione Problemi</h2>\n<ol>\n<li><strong><span class=\"text-gray-600\">Ottimizzazione Convessa</span></strong>:</li>\n<li>$f$ convessa, $g_i$ convesse</li>\n<li>\n<p>Garantita convergenza al globale</p>\n</li>\n<li>\n<p><strong><span class=\"text-gray-600\">Ottimizzazione Non Convessa</span></strong>:</p>\n</li>\n<li>Presenza di minimi locali</li>\n<li>Richiede metodi globali (<span class=\"text-gray-600\">Algoritmi Genetici</span>, <span class=\"text-gray-600\">Simulated Annealing</span>)</li>\n</ol>\n<h2 id=\"non-linear-optimization-convessita-e-non-convessita\">Non-Linear Optimization: Convessità e Non-Convessità</h2>\n<p>L&rsquo;ottimizzazione non lineare generalizza i problemi lineari introducendo <strong>curvatura</strong> nella funzione obiettivo e/o nei vincoli.<br />\nA differenza dei problemi lineari (sempre convessi), i problemi non lineari possono essere:</p>\n<h3 id=\"1-convessita\">1. <strong>Convessità</strong></h3>\n<p>Una funzione $f(x)$ è <strong>convessa</strong> se:<br />\n$$\nf(\\lambda x + (1-\\lambda)y) \\leq \\lambda f(x) + (1-\\lambda)f(y) \\quad \\forall x,y \\in \\text{dom}(f), \\lambda \\in [0,1]\n$$\n<strong>Esempi</strong>:<br />\n- $f(x) = x^2$ (convessa stretta)<br />\n- $f(x) = e^x$ (convessa ma non stretta)  </p>\n<p><strong>Implicazioni</strong>:<br />\n- Esiste <strong>un unico minimo globale</strong><br />\n- Algoritmi efficienti (es. <span class=\"text-gray-600\">Gradient Descent</span>) garantiscono convergenza  </p>\n<h3 id=\"2-non-convessita\">2. <strong>Non Convessità</strong></h3>\n<p>Una funzione è <strong>non convessa</strong> se viola la disuguaglianza di convessità in almeno un punto.<br />\n<strong>Esempi</strong>:<br />\n- $f(x) = \\sin(x)$ (infiniti minimi/massimi locali)<br />\n- $f(x) = x^4 - 3x^3 + 2$ (punti di sella)  </p>\n<p><strong>Implicazioni</strong>:<br />\n- <strong>Minimi locali</strong> ingannevoli<br />\n- Richiede metodi specializzati (es. <span class=\"text-gray-600\">Simulated Annealing</span>, <span class=\"text-gray-600\">Algoritmi Genetici</span>)  </p>\n<h3 id=\"perche-la-non-linearita-introduce-complessita\">Perché la Non-Linearità Introduce Complessità?</h3>\n<table>\n<thead>\n<tr>\n<th>Caratteristica</th>\n<th>Lineare</th>\n<th>Non Lineare Convessa</th>\n<th>Non Lineare Non Convessa</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Minimi Globali</strong></td>\n<td>1 (se esiste)</td>\n<td>1</td>\n<td>Multipli</td>\n</tr>\n<tr>\n<td><strong>Curvatura</strong></td>\n<td>Zero</td>\n<td>Uniforme (≥0)</td>\n<td>Variabile (pos./neg.)</td>\n</tr>\n<tr>\n<td><strong>Soluzioni</strong></td>\n<td>Vertici poliedro</td>\n<td>Punti interni/confine</td>\n<td>Qualsiasi</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Esempio Istruttivo</strong>:<br />\nPer $f(x) = x^4 - 2x^2$:<br />\n- <strong>Non convessa</strong> (derivata seconda $12x^2 - 4$ cambia segno)<br />\n- Due minimi globali a $x = \\pm 1$, un massimo locale a $x = 0$  </p>\n<p>La non-linearità rompe la struttura &ldquo;piatta&rdquo; dei problemi lineari, introducendo <strong>comportamenti emergenti</strong> che richiedono tecniche avanzate di analisi e ottimizzazione.  </p>\n<h2 id=\"metodi-numerici\">Metodi Numerici</h2>\n<h3 id=\"approcci-derivati\">Approcci Derivati</h3>\n<ol>\n<li><strong><span class=\"text-gray-600\">Metodi del Gradiente</span></strong>:</li>\n<li><a href=\"/theory/math-for-ml/Ottimizzazione/Non-Lineare/Discesa del Gradiente\" class=\"text-blue-600 hover:underline\">Discesa del gradiente</a></li>\n<li>\n<p><span class=\"text-gray-600\">Metodo di Newton</span> e <span class=\"text-gray-600\">Quasi-Newton</span></p>\n</li>\n<li>\n<p><strong><span class=\"text-gray-600\">Metodi di Penalità</span></strong>:</p>\n</li>\n<li>Trasformano vincoli in termini additivi</li>\n</ol>\n<h3 id=\"approcci-senza-derivate\">Approcci Senza Derivate</h3>\n<ol>\n<li><strong><span class=\"text-gray-600\">Algoritmi Evolutivi</span></strong></li>\n<li><strong><span class=\"text-gray-600\">Ricerca Pattern Search</span></strong></li>\n</ol>\n<h2 id=\"teoremi-fondamentali\">Teoremi Fondamentali</h2>\n<ol>\n<li><strong><span class=\"text-gray-600\">Condizioni KKT</span></strong>: Generalizzazione dei moltiplicatori di Lagrange</li>\n<li><strong><span class=\"text-gray-600\">Teorema di Weierstrass</span></strong>: Esistenza di soluzioni per insiemi compatti</li>\n<li><strong><span class=\"text-gray-600\">Teorema della Funzione Inversa</span></strong>: Base per metodi locali</li>\n</ol>\n<h2 id=\"campi-di-applicazione\">Campi di Applicazione</h2>\n<ul>\n<li><span class=\"text-gray-600\">Machine Learning</span>: Training di <span class=\"text-gray-600\">Reti Neurali</span></li>\n<li><span class=\"text-gray-600\">Controllo Ottimo</span>: Traiettorie in <span class=\"text-gray-600\">Robotica</span></li>\n<li><span class=\"text-gray-600\">Finanza Quantitativa</span>: Calibrazione modelli</li>\n</ul>\n<h2 id=\"sfide-aperte\">Sfide Aperte</h2>\n<ol>\n<li><strong><span class=\"text-gray-600\">Maledizione della Dimensionalità</span></strong>: Scalabilità in spazi $\\mathbb{R}^n$ con $n$ grande</li>\n<li><strong><span class=\"text-gray-600\">Equilibrio di Nash</span></strong>: Ottimizzazione in contesti competitivi</li>\n<li><strong><span class=\"text-gray-600\">Ottimizzazione Robustza</span></strong>: Gestione incertezza parametrica</li>\n</ol>"
}