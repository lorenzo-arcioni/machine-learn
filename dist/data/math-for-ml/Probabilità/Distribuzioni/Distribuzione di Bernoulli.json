{
  "title": "Untitled",
  "content": "<style>pre { line-height: 125%; }\ntd.linenos .normal { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }\nspan.linenos { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }\ntd.linenos .special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }\nspan.linenos.special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }\n.codehilite .hll { background-color: #ffffcc }\n.codehilite { background: #f8f8f8; }\n.codehilite .c { color: #3D7B7B; font-style: italic } /* Comment */\n.codehilite .err { border: 1px solid #F00 } /* Error */\n.codehilite .k { color: #008000; font-weight: bold } /* Keyword */\n.codehilite .o { color: #666 } /* Operator */\n.codehilite .ch { color: #3D7B7B; font-style: italic } /* Comment.Hashbang */\n.codehilite .cm { color: #3D7B7B; font-style: italic } /* Comment.Multiline */\n.codehilite .cp { color: #9C6500 } /* Comment.Preproc */\n.codehilite .cpf { color: #3D7B7B; font-style: italic } /* Comment.PreprocFile */\n.codehilite .c1 { color: #3D7B7B; font-style: italic } /* Comment.Single */\n.codehilite .cs { color: #3D7B7B; font-style: italic } /* Comment.Special */\n.codehilite .gd { color: #A00000 } /* Generic.Deleted */\n.codehilite .ge { font-style: italic } /* Generic.Emph */\n.codehilite .ges { font-weight: bold; font-style: italic } /* Generic.EmphStrong */\n.codehilite .gr { color: #E40000 } /* Generic.Error */\n.codehilite .gh { color: #000080; font-weight: bold } /* Generic.Heading */\n.codehilite .gi { color: #008400 } /* Generic.Inserted */\n.codehilite .go { color: #717171 } /* Generic.Output */\n.codehilite .gp { color: #000080; font-weight: bold } /* Generic.Prompt */\n.codehilite .gs { font-weight: bold } /* Generic.Strong */\n.codehilite .gu { color: #800080; font-weight: bold } /* Generic.Subheading */\n.codehilite .gt { color: #04D } /* Generic.Traceback */\n.codehilite .kc { color: #008000; font-weight: bold } /* Keyword.Constant */\n.codehilite .kd { color: #008000; font-weight: bold } /* Keyword.Declaration */\n.codehilite .kn { color: #008000; font-weight: bold } /* Keyword.Namespace */\n.codehilite .kp { color: #008000 } /* Keyword.Pseudo */\n.codehilite .kr { color: #008000; font-weight: bold } /* Keyword.Reserved */\n.codehilite .kt { color: #B00040 } /* Keyword.Type */\n.codehilite .m { color: #666 } /* Literal.Number */\n.codehilite .s { color: #BA2121 } /* Literal.String */\n.codehilite .na { color: #687822 } /* Name.Attribute */\n.codehilite .nb { color: #008000 } /* Name.Builtin */\n.codehilite .nc { color: #00F; font-weight: bold } /* Name.Class */\n.codehilite .no { color: #800 } /* Name.Constant */\n.codehilite .nd { color: #A2F } /* Name.Decorator */\n.codehilite .ni { color: #717171; font-weight: bold } /* Name.Entity */\n.codehilite .ne { color: #CB3F38; font-weight: bold } /* Name.Exception */\n.codehilite .nf { color: #00F } /* Name.Function */\n.codehilite .nl { color: #767600 } /* Name.Label */\n.codehilite .nn { color: #00F; font-weight: bold } /* Name.Namespace */\n.codehilite .nt { color: #008000; font-weight: bold } /* Name.Tag */\n.codehilite .nv { color: #19177C } /* Name.Variable */\n.codehilite .ow { color: #A2F; font-weight: bold } /* Operator.Word */\n.codehilite .w { color: #BBB } /* Text.Whitespace */\n.codehilite .mb { color: #666 } /* Literal.Number.Bin */\n.codehilite .mf { color: #666 } /* Literal.Number.Float */\n.codehilite .mh { color: #666 } /* Literal.Number.Hex */\n.codehilite .mi { color: #666 } /* Literal.Number.Integer */\n.codehilite .mo { color: #666 } /* Literal.Number.Oct */\n.codehilite .sa { color: #BA2121 } /* Literal.String.Affix */\n.codehilite .sb { color: #BA2121 } /* Literal.String.Backtick */\n.codehilite .sc { color: #BA2121 } /* Literal.String.Char */\n.codehilite .dl { color: #BA2121 } /* Literal.String.Delimiter */\n.codehilite .sd { color: #BA2121; font-style: italic } /* Literal.String.Doc */\n.codehilite .s2 { color: #BA2121 } /* Literal.String.Double */\n.codehilite .se { color: #AA5D1F; font-weight: bold } /* Literal.String.Escape */\n.codehilite .sh { color: #BA2121 } /* Literal.String.Heredoc */\n.codehilite .si { color: #A45A77; font-weight: bold } /* Literal.String.Interpol */\n.codehilite .sx { color: #008000 } /* Literal.String.Other */\n.codehilite .sr { color: #A45A77 } /* Literal.String.Regex */\n.codehilite .s1 { color: #BA2121 } /* Literal.String.Single */\n.codehilite .ss { color: #19177C } /* Literal.String.Symbol */\n.codehilite .bp { color: #008000 } /* Name.Builtin.Pseudo */\n.codehilite .fm { color: #00F } /* Name.Function.Magic */\n.codehilite .vc { color: #19177C } /* Name.Variable.Class */\n.codehilite .vg { color: #19177C } /* Name.Variable.Global */\n.codehilite .vi { color: #19177C } /* Name.Variable.Instance */\n.codehilite .vm { color: #19177C } /* Name.Variable.Magic */\n.codehilite .il { color: #666 } /* Literal.Number.Integer.Long */\n\n/* Styling per blocchi di codice */\n.codehilite {\n    background: transparent !important;\n    border-radius: 8px;\n    overflow: hidden;\n}\n.codehilite pre {\n    background: transparent !important;\n    margin: 0 !important;\n    padding: 20px !important;\n    font-family: 'Monaco', 'Menlo', 'Consolas', monospace !important;\n    font-size: 14px !important;\n    line-height: 1.5 !important;\n    white-space: pre !important;\n    overflow-x: auto !important;\n    color: inherit !important;\n}\n.codehilite code {\n    background: transparent !important;\n    padding: 0 !important;\n    font-family: inherit !important;\n}\n\n\n.code-wrapper { \n    position: relative; \n}\n.copy-button {\n    position: absolute; \n    top: 12px; \n    right: 12px; \n    padding: 6px 12px; \n    font-size: 12px;\n    cursor: pointer; \n    border: none; \n    border-radius: 4px; \n    background: rgba(255,255,255,0.9);\n    color: #374151; \n    transition: all 0.2s ease;\n    font-weight: 500;\n}\n.copy-button:hover { \n    background: rgba(255,255,255,1);\n    transform: translateY(-1px);\n}\n\n\ndetails.code-container {\n    border: 1px solid #e5e7eb; \n    border-radius: 12px; \n    background: #f9fafb;\n    margin: 16px 0;\n    transition: all 0.3s ease;\n}\ndetails.code-container summary {\n    padding: 12px 16px;\n    font-size: 14px; \n    color: #6b7280; \n    cursor: pointer; \n    outline: none; \n    user-select: none;\n    font-weight: 500;\n}\ndetails.code-container[open] summary::after { \n    content: \" (Hide Code)\"; \n    color: #9ca3af; \n}\ndetails.code-container:not([open]) summary::after { \n    content: \" (Show Code)\"; \n    color: #d1d5db; \n}\ndetails.code-container .code-wrapper {\n    padding: 0;\n    margin: 0;\n}\n/* Blocchi di codice sempre visibili */\n.code-visible {\n    border: 1px solid #e5e7eb;\n    border-radius: 12px;\n    background: #f9fafb;\n    margin: 16px 0;\n}\n.code-visible .code-wrapper {\n    padding: 0;\n    margin: 0;\n}\n</style>\n<p>La <strong>distribuzione di Bernoulli</strong> è una distribuzione di probabilità discreta che descrive un esperimento con due possibili esiti: successo (1) o fallimento (0). È uno dei modelli fondamentali della statistica e della teoria della probabilità.</p>\n<hr />\n<h2 id=\"definizione\">Definizione</h2>\n<p>Una variabile aleatoria $X$ segue una distribuzione di Bernoulli se assume valori binari con probabilità:</p>\n$$\nP(X = x) = \n\\begin{cases} \n    p & \\text{se } x = 1 \\\\\n    1 - p & \\text{se } x = 0\n\\end{cases} \\ \\ = \\ p^x (1-p)^{1-x}\n$$\n<p>dove $p \\in [0,1]$ è la probabilità di successo.</p>\n<p>Notazione: $$X \\sim \\text{Bernoulli}(p)$$</p>\n<hr />\n<h2 id=\"proprieta\">Proprietà</h2>\n<ol>\n<li>\n<p><strong>Valore atteso</strong>:\n   $$\n   \\mathbb{E}[X] = p_1 x_1 + \\cdots + p_nx_n = p \\cdot 1 + (1-p) \\cdot 0 = p\n   $$\n   Questo rappresenta la probabilità media di successo.</p>\n</li>\n<li>\n<p><strong>Varianza</strong>:\n   $$\\begin{align}\n   \\text{Var}(X) = \\sum_{i=1}^n p_i(x_i - \\mathbb E [X])^2 &= p(1-p)^2 + (1-p)(0-p)^2\\\\\n   &= p((1-p)^2 + (1-p)p)\\\\\n   &=p((1-p) ((1-p) + p))\\\\\n   &=p(1 - p)\n   \\end{align}\n   $$\n   La varianza è massima per $p = 0.5$ e si annulla per $p = 0$ o $p = 1$.</p>\n</li>\n<li>\n<p><strong>Moda</strong>:</p>\n</li>\n<li>Se $p > 0.5$, la moda è $1$ (successo più probabile).</li>\n<li>Se $p < 0.5$, la moda è $0$ (fallimento più probabile).</li>\n<li>\n<p>Se $p = 0.5$, entrambi gli esiti sono ugualmente probabili.</p>\n</li>\n<li>\n<p><strong>Momenti centrali</strong>:</p>\n</li>\n<li>Il secondo momento centrato coincide con la varianza.</li>\n<li>Il terzo momento centrato (asimmetria) è dato da:\n     $$\n     \\gamma_1 = \\frac{1 - 2p}{\\sqrt{p(1-p)}}\n     $$</li>\n<li>\n<p>Il quarto momento centrato (curtosi) è:\n     $$\n     \\gamma_2 = \\frac{1 - 6p(1-p)}{p(1-p)}\n     $$</p>\n</li>\n<li>\n<p><strong>Funzione generatrice dei momenti (MGF)</strong>:\n   $$\n   M_X(t) = (1 - p) + p e^t\n   $$</p>\n</li>\n<li>\n<p><strong>Funzione caratteristica</strong>:\n   $$\n   \\varphi_X(t) = (1 - p) + p e^{it}\n   $$</p>\n</li>\n<li>\n<p><strong>Entropia</strong>:\n   $$\n   H(X) = -p \\log p - (1 - p) \\log (1 - p)\n   $$\n   L&rsquo;entropia è massima per $p = 0.5$.</p>\n</li>\n</ol>\n<hr />\n<h2 id=\"interpretazione-intuitiva\">Interpretazione intuitiva</h2>\n<p>La distribuzione di Bernoulli modella esperimenti con due soli esiti, come:</p>\n<ul>\n<li><strong>Lancio di una moneta</strong> (testa o croce, con $p$ rappresentante la probabilità di ottenere testa).</li>\n<li><strong>Prova di successo o fallimento</strong> (ad esempio, il funzionamento o il guasto di un componente elettronico).</li>\n<li><strong>Risultato di una domanda a scelta binaria</strong> (vero/falso, sì/no).</li>\n</ul>\n<p>È una distribuzione di base nella teoria della probabilità e viene usata per costruire distribuzioni più complesse, come la <strong>binomiale</strong> e la <strong>binomiale negativa</strong>.</p>\n<hr />\n<h2 id=\"relazioni-con-altre-distribuzioni\">Relazioni con altre distribuzioni</h2>\n<ul>\n<li>\n<p><strong>Distribuzione Binomiale</strong>: La somma di $n$ variabili Bernoulli indipendenti con lo stesso parametro $p$ segue una distribuzione binomiale:\n  $$\n  X = \\sum_{i=1}^{n} X_i \\sim \\text{Binomiale}(n, p)\n  $$</p>\n</li>\n<li>\n<p><strong>Distribuzione Geometrica</strong>: Modella il numero di prove Bernoulli indipendenti necessarie per ottenere il primo successo.</p>\n</li>\n<li>\n<p><strong>Distribuzione Beta</strong>: La distribuzione Beta è una distribuzione a priori comune per il parametro $p$ della distribuzione Bernoulli in un contesto bayesiano.</p>\n</li>\n</ul>\n<hr />\n<h2 id=\"esempio-pratico\">Esempio pratico</h2>\n<p>Se lanciamo una moneta equa ($p = 0.5$), la probabilità di ottenere testa ($X = 1$) è $0.5$ e la probabilità di ottenere croce ($X = 0$) è $0.5$.</p>\n<p>Se invece un test diagnostico ha probabilità $p = 0.9$ di rilevare correttamente una malattia, possiamo modellare la presenza o assenza della malattia con una variabile Bernoulli.</p>\n<hr />\n<h2 id=\"conclusione\">Conclusione</h2>\n<p>La distribuzione di Bernoulli è una delle più semplici e fondamentali distribuzioni di probabilità. Il suo utilizzo è cruciale in molte aree della statistica, del machine learning e della teoria delle decisioni.</p>"
}