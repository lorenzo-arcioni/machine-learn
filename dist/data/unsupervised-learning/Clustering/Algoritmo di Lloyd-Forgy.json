{
  "title": "Untitled",
  "content": "<style>pre { line-height: 125%; }\ntd.linenos .normal { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }\nspan.linenos { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }\ntd.linenos .special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }\nspan.linenos.special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }\n.codehilite .hll { background-color: #ffffcc }\n.codehilite { background: #f8f8f8; }\n.codehilite .c { color: #3D7B7B; font-style: italic } /* Comment */\n.codehilite .err { border: 1px solid #F00 } /* Error */\n.codehilite .k { color: #008000; font-weight: bold } /* Keyword */\n.codehilite .o { color: #666 } /* Operator */\n.codehilite .ch { color: #3D7B7B; font-style: italic } /* Comment.Hashbang */\n.codehilite .cm { color: #3D7B7B; font-style: italic } /* Comment.Multiline */\n.codehilite .cp { color: #9C6500 } /* Comment.Preproc */\n.codehilite .cpf { color: #3D7B7B; font-style: italic } /* Comment.PreprocFile */\n.codehilite .c1 { color: #3D7B7B; font-style: italic } /* Comment.Single */\n.codehilite .cs { color: #3D7B7B; font-style: italic } /* Comment.Special */\n.codehilite .gd { color: #A00000 } /* Generic.Deleted */\n.codehilite .ge { font-style: italic } /* Generic.Emph */\n.codehilite .ges { font-weight: bold; font-style: italic } /* Generic.EmphStrong */\n.codehilite .gr { color: #E40000 } /* Generic.Error */\n.codehilite .gh { color: #000080; font-weight: bold } /* Generic.Heading */\n.codehilite .gi { color: #008400 } /* Generic.Inserted */\n.codehilite .go { color: #717171 } /* Generic.Output */\n.codehilite .gp { color: #000080; font-weight: bold } /* Generic.Prompt */\n.codehilite .gs { font-weight: bold } /* Generic.Strong */\n.codehilite .gu { color: #800080; font-weight: bold } /* Generic.Subheading */\n.codehilite .gt { color: #04D } /* Generic.Traceback */\n.codehilite .kc { color: #008000; font-weight: bold } /* Keyword.Constant */\n.codehilite .kd { color: #008000; font-weight: bold } /* Keyword.Declaration */\n.codehilite .kn { color: #008000; font-weight: bold } /* Keyword.Namespace */\n.codehilite .kp { color: #008000 } /* Keyword.Pseudo */\n.codehilite .kr { color: #008000; font-weight: bold } /* Keyword.Reserved */\n.codehilite .kt { color: #B00040 } /* Keyword.Type */\n.codehilite .m { color: #666 } /* Literal.Number */\n.codehilite .s { color: #BA2121 } /* Literal.String */\n.codehilite .na { color: #687822 } /* Name.Attribute */\n.codehilite .nb { color: #008000 } /* Name.Builtin */\n.codehilite .nc { color: #00F; font-weight: bold } /* Name.Class */\n.codehilite .no { color: #800 } /* Name.Constant */\n.codehilite .nd { color: #A2F } /* Name.Decorator */\n.codehilite .ni { color: #717171; font-weight: bold } /* Name.Entity */\n.codehilite .ne { color: #CB3F38; font-weight: bold } /* Name.Exception */\n.codehilite .nf { color: #00F } /* Name.Function */\n.codehilite .nl { color: #767600 } /* Name.Label */\n.codehilite .nn { color: #00F; font-weight: bold } /* Name.Namespace */\n.codehilite .nt { color: #008000; font-weight: bold } /* Name.Tag */\n.codehilite .nv { color: #19177C } /* Name.Variable */\n.codehilite .ow { color: #A2F; font-weight: bold } /* Operator.Word */\n.codehilite .w { color: #BBB } /* Text.Whitespace */\n.codehilite .mb { color: #666 } /* Literal.Number.Bin */\n.codehilite .mf { color: #666 } /* Literal.Number.Float */\n.codehilite .mh { color: #666 } /* Literal.Number.Hex */\n.codehilite .mi { color: #666 } /* Literal.Number.Integer */\n.codehilite .mo { color: #666 } /* Literal.Number.Oct */\n.codehilite .sa { color: #BA2121 } /* Literal.String.Affix */\n.codehilite .sb { color: #BA2121 } /* Literal.String.Backtick */\n.codehilite .sc { color: #BA2121 } /* Literal.String.Char */\n.codehilite .dl { color: #BA2121 } /* Literal.String.Delimiter */\n.codehilite .sd { color: #BA2121; font-style: italic } /* Literal.String.Doc */\n.codehilite .s2 { color: #BA2121 } /* Literal.String.Double */\n.codehilite .se { color: #AA5D1F; font-weight: bold } /* Literal.String.Escape */\n.codehilite .sh { color: #BA2121 } /* Literal.String.Heredoc */\n.codehilite .si { color: #A45A77; font-weight: bold } /* Literal.String.Interpol */\n.codehilite .sx { color: #008000 } /* Literal.String.Other */\n.codehilite .sr { color: #A45A77 } /* Literal.String.Regex */\n.codehilite .s1 { color: #BA2121 } /* Literal.String.Single */\n.codehilite .ss { color: #19177C } /* Literal.String.Symbol */\n.codehilite .bp { color: #008000 } /* Name.Builtin.Pseudo */\n.codehilite .fm { color: #00F } /* Name.Function.Magic */\n.codehilite .vc { color: #19177C } /* Name.Variable.Class */\n.codehilite .vg { color: #19177C } /* Name.Variable.Global */\n.codehilite .vi { color: #19177C } /* Name.Variable.Instance */\n.codehilite .vm { color: #19177C } /* Name.Variable.Magic */\n.codehilite .il { color: #666 } /* Literal.Number.Integer.Long */\n\n/* Styling per blocchi di codice */\n.codehilite {\n    background: transparent !important;\n    border-radius: 8px;\n    overflow: hidden;\n}\n.codehilite pre {\n    background: transparent !important;\n    margin: 0 !important;\n    padding: 20px !important;\n    font-family: 'Monaco', 'Menlo', 'Consolas', monospace !important;\n    font-size: 14px !important;\n    line-height: 1.5 !important;\n    white-space: pre !important;\n    overflow-x: auto !important;\n    color: inherit !important;\n}\n.codehilite code {\n    background: transparent !important;\n    padding: 0 !important;\n    font-family: inherit !important;\n}\n\n\n.code-wrapper { \n    position: relative; \n}\n.copy-button {\n    position: absolute; \n    top: 12px; \n    right: 12px; \n    padding: 6px 12px; \n    font-size: 12px;\n    cursor: pointer; \n    border: none; \n    border-radius: 4px; \n    background: rgba(255,255,255,0.9);\n    color: #374151; \n    transition: all 0.2s ease;\n    font-weight: 500;\n}\n.copy-button:hover { \n    background: rgba(255,255,255,1);\n    transform: translateY(-1px);\n}\n\n\ndetails.code-container {\n    border: 1px solid #e5e7eb; \n    border-radius: 12px; \n    background: #f9fafb;\n    margin: 16px 0;\n    transition: all 0.3s ease;\n}\ndetails.code-container summary {\n    padding: 12px 16px;\n    font-size: 14px; \n    color: #6b7280; \n    cursor: pointer; \n    outline: none; \n    user-select: none;\n    font-weight: 500;\n}\ndetails.code-container[open] summary::after { \n    content: \" (Hide Code)\"; \n    color: #9ca3af; \n}\ndetails.code-container:not([open]) summary::after { \n    content: \" (Show Code)\"; \n    color: #d1d5db; \n}\ndetails.code-container .code-wrapper {\n    padding: 0;\n    margin: 0;\n}\n</style>\n<h2 id=\"introduzione\">Introduzione</h2>\n<p>Il <strong>metodo di Lloyd-Forgy</strong> è un algoritmo iterativo comunemente utilizzato per risolvere problemi di ottimizzazione iterativa. È particolarmente noto per la sua applicazione in problemi di clustering, come nell&rsquo;algoritmo K-Means, ma può essere adattato a una vasta gamma di scenari in cui è necessario ottimizzare una funzione obiettivo dipendente da due insiemi di variabili.</p>\n<h2 id=\"descrizione-generale\">Descrizione generale</h2>\n<p>Il metodo si basa su un ciclo di <strong>ottimizzazione alternata</strong> in cui:\n1. Si fissa un insieme di variabili per ottimizzare l&rsquo;altro insieme.\n2. Si alternano i due insiemi fino a quando non si raggiunge la convergenza.</p>\n<p>In forma generale, il problema può essere descritto come:\n$$\n\\DeclareMathOperator*{\\argmin}{argmin}\nX^*, Y^* = \\argmin_{X, Y} L(X, Y)\n$$\nDove:\n- $L(X, Y)$ è una funzione obiettivo dipendente da due insiemi di variabili $X$ e $Y$.\n- $X$ e $Y$ vengono ottimizzati alternativamente.</p>\n<h3 id=\"struttura-dellalgoritmo\">Struttura dell&rsquo;algoritmo</h3>\n<p>Il metodo di Lloyd-Forgy segue i seguenti passaggi:</p>\n<ol>\n<li><strong>Inizializzazione</strong>:</li>\n<li>Si scelgono valori iniziali per uno degli insiemi di variabili, ad esempio $Y$.</li>\n<li><strong>Ottimizzazione Alternata</strong>:</li>\n<li>Fissare $Y$ e trovare $X^*$ che minimizza $L(X, Y)$.</li>\n<li>Fissare $X$ e trovare $Y^*$ che minimizza $L(X, Y)$.</li>\n<li><strong>Iterazione</strong>:</li>\n<li>Ripetere i passaggi di ottimizzazione alternata fino alla convergenza, cioè fino a quando $L(X, Y)$ non cambia significativamente tra due iterazioni successive.</li>\n</ol>\n<h3 id=\"convergenza\">Convergenza</h3>\n<ul>\n<li>Il metodo converge tipicamente a un <strong>punto fisso</strong> della funzione obiettivo.</li>\n<li>La soluzione trovata non è garantita essere il <strong>minimo globale</strong>, in particolare se $L(X, Y)$ non è convessa.</li>\n</ul>\n<h2 id=\"applicazioni\">Applicazioni</h2>\n<p>Il metodo di Lloyd-Forgy è ampiamente utilizzato in diversi contesti, tra cui:\n- <strong>Clustering</strong> (es. K-Means).\n- <strong>Compressione di dati</strong>.\n- <strong>Ottimizzazione di sistemi complessi</strong> con variabili correlate.</p>\n<h2 id=\"limitazioni\">Limitazioni</h2>\n<ul>\n<li><strong>Minimi locali</strong>: Poiché l&rsquo;algoritmo non esplora l&rsquo;intero spazio delle soluzioni, può rimanere intrappolato in minimi locali.</li>\n<li><strong>Dipendenza dall&rsquo;inizializzazione</strong>: La qualità della soluzione dipende fortemente dai valori iniziali scelti.</li>\n<li><strong>Convergenza lenta</strong>: In alcuni casi, il numero di iterazioni richiesto per la convergenza può essere elevato.</li>\n</ul>\n<h2 id=\"pseudo-codice\">Pseudo-codice</h2>\n<p>Un&rsquo;implementazione generica del metodo di Lloyd-Forgy può essere rappresentata come segue:</p>\n<details class=\"code-container\">\n<summary>Code</summary>\n<div class=\"code-wrapper\">\n<button class=\"copy-button\" onclick=\"\n                    const code = this.parentElement.querySelector('pre');\n                    if (code) {\n                        navigator.clipboard.writeText(code.innerText);\n                        this.textContent = 'Copied!';\n                        setTimeout(() => this.textContent = 'Copy', 2000);\n                    }\n                \">Copy</button>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\"># Metodo di Lloyd-Forgy</span>\n\n<span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">lloyd_forgy</span><span class=\"p\">(</span><span class=\"n\">init_X</span><span class=\"p\">,</span> <span class=\"n\">init_Y</span><span class=\"p\">,</span> <span class=\"n\">objective_function</span><span class=\"p\">,</span> <span class=\"n\">optimize_X</span><span class=\"p\">,</span> <span class=\"n\">optimize_Y</span><span class=\"p\">,</span> <span class=\"n\">tolerance</span><span class=\"o\">=</span><span class=\"mf\">1e-6</span><span class=\"p\">,</span> <span class=\"n\">max_iterations</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Generico algoritmo di Lloyd-Forgy.</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        init_X: Valori iniziali per il set X.</span>\n<span class=\"sd\">        init_Y: Valori iniziali per il set Y.</span>\n<span class=\"sd\">        objective_function: Funzione obiettivo L(X, Y) da minimizzare.</span>\n<span class=\"sd\">        optimize_X: Funzione per ottimizzare X dato Y.</span>\n<span class=\"sd\">        optimize_Y: Funzione per ottimizzare Y dato X.</span>\n<span class=\"sd\">        tolerance: Soglia di tolleranza per determinare la convergenza.</span>\n<span class=\"sd\">        max_iterations: Numero massimo di iterazioni consentite.</span>\n\n<span class=\"sd\">    Returns:</span>\n<span class=\"sd\">        X, Y: I valori ottimali trovati.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">Y</span> <span class=\"o\">=</span> <span class=\"n\">init_X</span><span class=\"p\">,</span> <span class=\"n\">init_Y</span>\n    <span class=\"k\">for</span> <span class=\"n\">iteration</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">max_iterations</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Ottimizzazione alternata</span>\n        <span class=\"n\">X_new</span> <span class=\"o\">=</span> <span class=\"n\">optimize_X</span><span class=\"p\">(</span><span class=\"n\">Y</span><span class=\"p\">)</span>\n        <span class=\"n\">Y_new</span> <span class=\"o\">=</span> <span class=\"n\">optimize_Y</span><span class=\"p\">(</span><span class=\"n\">X_new</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Calcola variazione nella funzione obiettivo</span>\n        <span class=\"n\">delta</span> <span class=\"o\">=</span> <span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">objective_function</span><span class=\"p\">(</span><span class=\"n\">X_new</span><span class=\"p\">,</span> <span class=\"n\">Y_new</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"n\">objective_function</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">))</span>\n        <span class=\"k\">if</span> <span class=\"n\">delta</span> <span class=\"o\">&lt;</span> <span class=\"n\">tolerance</span><span class=\"p\">:</span>\n            <span class=\"k\">break</span>\n\n        <span class=\"c1\"># Aggiorna X e Y</span>\n        <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">Y</span> <span class=\"o\">=</span> <span class=\"n\">X_new</span><span class=\"p\">,</span> <span class=\"n\">Y_new</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">Y</span>\n</code></pre></div>\n</div>\n</details>"
}