{
  "title": "üìä Maximum Entropy Models (Modelli a Massima Entropia)",
  "content": "<style>pre { line-height: 125%; }\ntd.linenos .normal { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }\nspan.linenos { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }\ntd.linenos .special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }\nspan.linenos.special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }\n.codehilite .hll { background-color: #ffffcc }\n.codehilite { background: #f8f8f8; }\n.codehilite .c { color: #3D7B7B; font-style: italic } /* Comment */\n.codehilite .err { border: 1px solid #F00 } /* Error */\n.codehilite .k { color: #008000; font-weight: bold } /* Keyword */\n.codehilite .o { color: #666 } /* Operator */\n.codehilite .ch { color: #3D7B7B; font-style: italic } /* Comment.Hashbang */\n.codehilite .cm { color: #3D7B7B; font-style: italic } /* Comment.Multiline */\n.codehilite .cp { color: #9C6500 } /* Comment.Preproc */\n.codehilite .cpf { color: #3D7B7B; font-style: italic } /* Comment.PreprocFile */\n.codehilite .c1 { color: #3D7B7B; font-style: italic } /* Comment.Single */\n.codehilite .cs { color: #3D7B7B; font-style: italic } /* Comment.Special */\n.codehilite .gd { color: #A00000 } /* Generic.Deleted */\n.codehilite .ge { font-style: italic } /* Generic.Emph */\n.codehilite .ges { font-weight: bold; font-style: italic } /* Generic.EmphStrong */\n.codehilite .gr { color: #E40000 } /* Generic.Error */\n.codehilite .gh { color: #000080; font-weight: bold } /* Generic.Heading */\n.codehilite .gi { color: #008400 } /* Generic.Inserted */\n.codehilite .go { color: #717171 } /* Generic.Output */\n.codehilite .gp { color: #000080; font-weight: bold } /* Generic.Prompt */\n.codehilite .gs { font-weight: bold } /* Generic.Strong */\n.codehilite .gu { color: #800080; font-weight: bold } /* Generic.Subheading */\n.codehilite .gt { color: #04D } /* Generic.Traceback */\n.codehilite .kc { color: #008000; font-weight: bold } /* Keyword.Constant */\n.codehilite .kd { color: #008000; font-weight: bold } /* Keyword.Declaration */\n.codehilite .kn { color: #008000; font-weight: bold } /* Keyword.Namespace */\n.codehilite .kp { color: #008000 } /* Keyword.Pseudo */\n.codehilite .kr { color: #008000; font-weight: bold } /* Keyword.Reserved */\n.codehilite .kt { color: #B00040 } /* Keyword.Type */\n.codehilite .m { color: #666 } /* Literal.Number */\n.codehilite .s { color: #BA2121 } /* Literal.String */\n.codehilite .na { color: #687822 } /* Name.Attribute */\n.codehilite .nb { color: #008000 } /* Name.Builtin */\n.codehilite .nc { color: #00F; font-weight: bold } /* Name.Class */\n.codehilite .no { color: #800 } /* Name.Constant */\n.codehilite .nd { color: #A2F } /* Name.Decorator */\n.codehilite .ni { color: #717171; font-weight: bold } /* Name.Entity */\n.codehilite .ne { color: #CB3F38; font-weight: bold } /* Name.Exception */\n.codehilite .nf { color: #00F } /* Name.Function */\n.codehilite .nl { color: #767600 } /* Name.Label */\n.codehilite .nn { color: #00F; font-weight: bold } /* Name.Namespace */\n.codehilite .nt { color: #008000; font-weight: bold } /* Name.Tag */\n.codehilite .nv { color: #19177C } /* Name.Variable */\n.codehilite .ow { color: #A2F; font-weight: bold } /* Operator.Word */\n.codehilite .w { color: #BBB } /* Text.Whitespace */\n.codehilite .mb { color: #666 } /* Literal.Number.Bin */\n.codehilite .mf { color: #666 } /* Literal.Number.Float */\n.codehilite .mh { color: #666 } /* Literal.Number.Hex */\n.codehilite .mi { color: #666 } /* Literal.Number.Integer */\n.codehilite .mo { color: #666 } /* Literal.Number.Oct */\n.codehilite .sa { color: #BA2121 } /* Literal.String.Affix */\n.codehilite .sb { color: #BA2121 } /* Literal.String.Backtick */\n.codehilite .sc { color: #BA2121 } /* Literal.String.Char */\n.codehilite .dl { color: #BA2121 } /* Literal.String.Delimiter */\n.codehilite .sd { color: #BA2121; font-style: italic } /* Literal.String.Doc */\n.codehilite .s2 { color: #BA2121 } /* Literal.String.Double */\n.codehilite .se { color: #AA5D1F; font-weight: bold } /* Literal.String.Escape */\n.codehilite .sh { color: #BA2121 } /* Literal.String.Heredoc */\n.codehilite .si { color: #A45A77; font-weight: bold } /* Literal.String.Interpol */\n.codehilite .sx { color: #008000 } /* Literal.String.Other */\n.codehilite .sr { color: #A45A77 } /* Literal.String.Regex */\n.codehilite .s1 { color: #BA2121 } /* Literal.String.Single */\n.codehilite .ss { color: #19177C } /* Literal.String.Symbol */\n.codehilite .bp { color: #008000 } /* Name.Builtin.Pseudo */\n.codehilite .fm { color: #00F } /* Name.Function.Magic */\n.codehilite .vc { color: #19177C } /* Name.Variable.Class */\n.codehilite .vg { color: #19177C } /* Name.Variable.Global */\n.codehilite .vi { color: #19177C } /* Name.Variable.Instance */\n.codehilite .vm { color: #19177C } /* Name.Variable.Magic */\n.codehilite .il { color: #666 } /* Literal.Number.Integer.Long */\n\n/* Styling per blocchi di codice */\n.codehilite {\n    background: transparent !important;\n    border-radius: 8px;\n    overflow: hidden;\n}\n.codehilite pre {\n    background: transparent !important;\n    margin: 0 !important;\n    padding: 20px !important;\n    font-family: 'Monaco', 'Menlo', 'Consolas', monospace !important;\n    font-size: 14px !important;\n    line-height: 1.5 !important;\n    white-space: pre !important;\n    overflow-x: auto !important;\n    color: inherit !important;\n}\n.codehilite code {\n    background: transparent !important;\n    padding: 0 !important;\n    font-family: inherit !important;\n}\n\n\n.code-wrapper { \n    position: relative; \n}\n.copy-button {\n    position: absolute; \n    top: 12px; \n    right: 12px; \n    padding: 6px 12px; \n    font-size: 12px;\n    cursor: pointer; \n    border: none; \n    border-radius: 4px; \n    background: rgba(255,255,255,0.9);\n    color: #374151; \n    transition: all 0.2s ease;\n    font-weight: 500;\n}\n.copy-button:hover { \n    background: rgba(255,255,255,1);\n    transform: translateY(-1px);\n}\n\n\ndetails.code-container {\n    border: 1px solid #e5e7eb; \n    border-radius: 12px; \n    background: #f9fafb;\n    margin: 16px 0;\n    transition: all 0.3s ease;\n}\ndetails.code-container summary {\n    padding: 12px 16px;\n    font-size: 14px; \n    color: #6b7280; \n    cursor: pointer; \n    outline: none; \n    user-select: none;\n    font-weight: 500;\n}\ndetails.code-container[open] summary::after { \n    content: \" (Hide Code)\"; \n    color: #9ca3af; \n}\ndetails.code-container:not([open]) summary::after { \n    content: \" (Show Code)\"; \n    color: #d1d5db; \n}\ndetails.code-container .code-wrapper {\n    padding: 0;\n    margin: 0;\n}\n</style>\n<p>I <strong>Maximum Entropy Models</strong> sono modelli probabilistici discriminativi utilizzati per predire una distribuzione di probabilit√† $P(y \\mid x)$ partendo da un insieme di osservazioni e un insieme di <strong>vincoli</strong> noti.  </p>\n<p>L‚Äôidea centrale di questi modelli si basa sul <strong>principio di massima entropia</strong>, secondo cui, tra tutte le distribuzioni compatibili con ci√≤ che si conosce, si preferisce quella <strong>con la massima incertezza possibile</strong> (cio√®, entropia massima), per evitare di fare assunzioni non giustificate.</p>\n<p>Questo approccio √® particolarmente utile in contesti in cui abbiamo una conoscenza parziale o incompleta del sistema (come spesso accade in linguaggio naturale), e vogliamo costruire un modello probabilistico che rifletta esattamente le informazioni a disposizione ‚Äî <em>nulla di pi√π, nulla di meno</em>.</p>\n<h2 id=\"concetto-base-il-principio-di-massima-entropia\">üìö Concetto base: il principio di massima entropia</h2>\n<p>Il <strong>principio di massima entropia</strong>, introdotto da E.T. Jaynes, afferma che:</p>\n<blockquote>\n<p><em>‚ÄúQuando si costruisce una distribuzione di probabilit√† basata su un insieme di vincoli noti, la distribuzione corretta √® quella che massimizza l&rsquo;entropia, ovvero quella che non introduce alcuna informazione arbitraria oltre ai vincoli dati.‚Äù</em></p>\n</blockquote>\n<p>In termini pratici: se conosciamo solo alcuni aspetti di un fenomeno (ad esempio, alcune <strong>feature expectations</strong>), il modello migliore √® quello che <strong>rispetta quei vincoli</strong>, ma <strong>√® altrimenti il pi√π neutro possibile</strong>.</p>\n<p>L&rsquo;entropia di una distribuzione discreta condizionata √® definita come:</p>\n$$\nH(P) = - \\sum_y P(y \\mid x) \\log P(y \\mid x)\n$$\n<p>Massimizzare $H(P)$ significa rendere la distribuzione il pi√π incerta (o ‚Äúpiatta‚Äù) possibile, pur rispettando le informazioni note.</p>\n<h2 id=\"formula-del-modello-struttura-del-maximum-entropy-model\">üî£ Formula del modello: struttura del Maximum Entropy Model</h2>\n<p>In un modello a massima entropia, la distribuzione condizionata $P(y \\mid x)$ viene modellata come:</p>\n$$\nP(y \\mid x) = \\frac{1}{Z(x)} \\exp\\left( \\sum_i \\lambda_i f_i(x, y) \\right)\n$$\n<p>Questa √® una distribuzione <strong>esponenziale generalizzata</strong> che rispetta i vincoli dati da funzioni di feature.</p>\n<h3 id=\"dettagli-sui-componenti\">üß© Dettagli sui componenti:</h3>\n<ul>\n<li>\n<p>$f_i(x, y)$:<br />\n  Queste sono <strong>funzioni caratteristiche</strong> (feature functions) che catturano aspetti rilevanti del dato di input $x$ e dell‚Äôetichetta $y$. Spesso sono binarie (0 o 1), ma possono essere anche continue. Ogni funzione rappresenta un vincolo che vogliamo rispettare nel modello.</p>\n</li>\n<li>\n<p>$\\lambda_i$:<br />\n  Sono i <strong>pesi</strong> associati a ciascuna feature. Vengono appresi durante il processo di addestramento. Determinano l&rsquo;importanza relativa delle feature nella definizione della distribuzione.</p>\n</li>\n<li>\n<p>$Z(x)$:<br />\n  √à la <strong>funzione di partizione</strong> (partition function), utilizzata per normalizzare la distribuzione in modo che la somma su tutti i possibili $y$ sia pari a 1:</p>\n</li>\n</ul>\n$$\n  Z(x) = \\sum_{y'} \\exp\\left( \\sum_i \\lambda_i f_i(x, y') \\right)\n  $$\n<p>Questa struttura assicura che $P(y \\mid x)$ sia una <strong>distribuzione di probabilit√† valida</strong>, cio√® normalizzata e non negativa.</p>\n<h2 id=\"addestramento-del-modello-come-apprendere-i-pesi-math_inline_15\">üõ†Ô∏è Addestramento del modello: come apprendere i pesi $\\lambda_i$</h2>\n<p>L‚Äôobiettivo dell‚Äôaddestramento √® <strong>trovare i valori ottimali dei pesi $\\lambda_i$</strong> in modo che le aspettative delle feature nel modello corrispondano a quelle osservate nei dati di addestramento.</p>\n<p>Formalmente, per ogni feature $f_i$, imponiamo che:</p>\n$$\n\\mathbb{E}_{\\text{data}}[f_i] = \\mathbb{E}_{\\text{model}}[f_i]\n$$\n<p>dove:\n- $\\mathbb{E}_{\\text{data}}[f_i]$ √® l‚Äô<strong>aspettativa empirica</strong> della feature calcolata sui dati reali\n- $\\mathbb{E}_{\\text{model}}[f_i]$ √® l‚Äô<strong>aspettativa predetta</strong> dalla distribuzione del modello</p>\n<h3 id=\"funzione-obiettivo-massimizzazione-della-log-verosimiglianza\">üßÆ Funzione obiettivo: massimizzazione della log-verosimiglianza</h3>\n<p>In pratica, si massimizza la <strong>log-likelihood</strong> dei dati di addestramento:</p>\n$$\n\\mathcal{L}(\\lambda) = \\sum_{(x, y) \\in D} \\log P(y \\mid x)\n$$\n<p>Poich√© $P(y \\mid x)$ √® espresso in forma esponenziale, la log-likelihood √® <strong>concava</strong>, e pu√≤ essere ottimizzata efficientemente con metodi numerici.</p>\n<h3 id=\"algoritmi-per-lottimizzazione\">üîß Algoritmi per l&rsquo;ottimizzazione</h3>\n<p>L‚Äôottimizzazione pu√≤ essere fatta con diversi algoritmi:</p>\n<ul>\n<li>\n<p><strong>GIS (Generalized Iterative Scaling)</strong><br />\n  Algoritmo iterativo classico per modelli log-lineari. Garantisce convergenza ma pu√≤ essere lento.</p>\n</li>\n<li>\n<p><strong>Improved Iterative Scaling</strong></p>\n</li>\n<li><strong>Gradient Ascent</strong></li>\n<li><strong>L-BFGS</strong><br />\n  Metodo pi√π moderno e veloce, basato sull‚Äôapprossimazione della matrice hessiana (quasi-Newton).</li>\n</ul>\n<h3 id=\"schema-semplificato-del-processo-di-addestramento\">üß™ Schema semplificato del processo di addestramento</h3>\n<ol>\n<li>Inizializza tutti i $\\lambda_i = 0$</li>\n<li>Per ogni iterazione:</li>\n<li>Calcola l‚Äôaspettativa empirica $\\mathbb{E}_{\\text{data}}[f_i]$</li>\n<li>Calcola l‚Äôaspettativa del modello $\\mathbb{E}_{\\text{model}}[f_i]$</li>\n<li>Calcola il gradiente: $\\nabla_i = \\mathbb{E}_{\\text{data}}[f_i] - \\mathbb{E}_{\\text{model}}[f_i]$</li>\n<li>Aggiorna $\\lambda_i$ in direzione del gradiente (gradient ascent)</li>\n</ol>\n<h2 id=\"interpretabilita-e-proprieta\">üß† Interpretabilit√† e propriet√†</h2>\n<ul>\n<li>Ogni peso $\\lambda_i$ riflette <strong>quanto forte</strong> la feature $f_i$ influenza la probabilit√† dell&rsquo;output.</li>\n<li>√à un modello <strong>discriminativo</strong>: stima direttamente $P(y \\mid x)$, a differenza dei modelli generativi (come Naive Bayes).</li>\n<li>√à <strong>modulare</strong>: √® facile aggiungere nuove feature, anche complesse.</li>\n<li>√à <strong>interpretabile</strong>: i pesi possono essere letti e analizzati per capire le decisioni del modello.</li>\n</ul>\n<h2 id=\"applicazioni-pratiche\">üì¶ Applicazioni pratiche</h2>\n<p>I Maximum Entropy Models trovano applicazione in numerosi ambiti, specialmente in <strong>Elaborazione del Linguaggio Naturale (NLP)</strong>:</p>\n<ul>\n<li>\n<p><strong><a href=\"/theory/nlp/Part-of-Speech Tagging/Part-of-Speech Tagging\" class=\"text-blue-600 hover:underline\">POS tagging (Part-of-Speech)</a></strong><br />\n  Assegnazione di categorie grammaticali alle parole.</p>\n</li>\n<li>\n<p><strong>Named Entity Recognition (NER)</strong><br />\n  Identificazione di entit√† come persone, organizzazioni, luoghi.</p>\n</li>\n<li>\n<p><strong>Classificazione testuale</strong><br />\n  Email spam detection, analisi del sentiment.</p>\n</li>\n<li>\n<p><strong>Sequence labeling</strong><br />\n  Segmentazione e annotazione di sequenze, estensibile tramite <strong>Maximum Entropy Markov Models (MEMMs)</strong>.</p>\n</li>\n</ul>\n<h2 id=\"limitazioni\">üöß Limitazioni</h2>\n<ul>\n<li>Computazionalmente <strong>pesante</strong> se lo spazio delle etichette $y$ √® molto grande, perch√© bisogna sommare su tutte le possibili etichette per calcolare $Z(x)$.</li>\n<li>Richiede feature ingegnerizzate bene: le prestazioni dipendono molto dalla qualit√† delle funzioni $f_i(x, y)$.</li>\n<li>Non cattura automaticamente dipendenze sequenziali o latenti (come fanno ad esempio i CRF o i modelli neurali).</li>\n</ul>\n<p>üß† <em>Il Maximum Entropy Model √® un potente strumento probabilistico: preciso, flessibile e interpretabile. √à ideale quando si dispone di feature ben progettate e si vuole un controllo diretto sulla probabilit√† condizionata, evitando assunzioni ingiustificate.</em></p>"
}