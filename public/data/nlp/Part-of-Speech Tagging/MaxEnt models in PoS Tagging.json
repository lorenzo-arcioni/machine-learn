{
  "title": "üåü Modelli di Massima Entropia (MaxEnt) per il Part-of-Speech Tagging",
  "content": "<style>pre { line-height: 125%; }\ntd.linenos .normal { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }\nspan.linenos { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }\ntd.linenos .special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }\nspan.linenos.special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }\n.codehilite .hll { background-color: #ffffcc }\n.codehilite { background: #f8f8f8; }\n.codehilite .c { color: #3D7B7B; font-style: italic } /* Comment */\n.codehilite .err { border: 1px solid #F00 } /* Error */\n.codehilite .k { color: #008000; font-weight: bold } /* Keyword */\n.codehilite .o { color: #666 } /* Operator */\n.codehilite .ch { color: #3D7B7B; font-style: italic } /* Comment.Hashbang */\n.codehilite .cm { color: #3D7B7B; font-style: italic } /* Comment.Multiline */\n.codehilite .cp { color: #9C6500 } /* Comment.Preproc */\n.codehilite .cpf { color: #3D7B7B; font-style: italic } /* Comment.PreprocFile */\n.codehilite .c1 { color: #3D7B7B; font-style: italic } /* Comment.Single */\n.codehilite .cs { color: #3D7B7B; font-style: italic } /* Comment.Special */\n.codehilite .gd { color: #A00000 } /* Generic.Deleted */\n.codehilite .ge { font-style: italic } /* Generic.Emph */\n.codehilite .ges { font-weight: bold; font-style: italic } /* Generic.EmphStrong */\n.codehilite .gr { color: #E40000 } /* Generic.Error */\n.codehilite .gh { color: #000080; font-weight: bold } /* Generic.Heading */\n.codehilite .gi { color: #008400 } /* Generic.Inserted */\n.codehilite .go { color: #717171 } /* Generic.Output */\n.codehilite .gp { color: #000080; font-weight: bold } /* Generic.Prompt */\n.codehilite .gs { font-weight: bold } /* Generic.Strong */\n.codehilite .gu { color: #800080; font-weight: bold } /* Generic.Subheading */\n.codehilite .gt { color: #04D } /* Generic.Traceback */\n.codehilite .kc { color: #008000; font-weight: bold } /* Keyword.Constant */\n.codehilite .kd { color: #008000; font-weight: bold } /* Keyword.Declaration */\n.codehilite .kn { color: #008000; font-weight: bold } /* Keyword.Namespace */\n.codehilite .kp { color: #008000 } /* Keyword.Pseudo */\n.codehilite .kr { color: #008000; font-weight: bold } /* Keyword.Reserved */\n.codehilite .kt { color: #B00040 } /* Keyword.Type */\n.codehilite .m { color: #666 } /* Literal.Number */\n.codehilite .s { color: #BA2121 } /* Literal.String */\n.codehilite .na { color: #687822 } /* Name.Attribute */\n.codehilite .nb { color: #008000 } /* Name.Builtin */\n.codehilite .nc { color: #00F; font-weight: bold } /* Name.Class */\n.codehilite .no { color: #800 } /* Name.Constant */\n.codehilite .nd { color: #A2F } /* Name.Decorator */\n.codehilite .ni { color: #717171; font-weight: bold } /* Name.Entity */\n.codehilite .ne { color: #CB3F38; font-weight: bold } /* Name.Exception */\n.codehilite .nf { color: #00F } /* Name.Function */\n.codehilite .nl { color: #767600 } /* Name.Label */\n.codehilite .nn { color: #00F; font-weight: bold } /* Name.Namespace */\n.codehilite .nt { color: #008000; font-weight: bold } /* Name.Tag */\n.codehilite .nv { color: #19177C } /* Name.Variable */\n.codehilite .ow { color: #A2F; font-weight: bold } /* Operator.Word */\n.codehilite .w { color: #BBB } /* Text.Whitespace */\n.codehilite .mb { color: #666 } /* Literal.Number.Bin */\n.codehilite .mf { color: #666 } /* Literal.Number.Float */\n.codehilite .mh { color: #666 } /* Literal.Number.Hex */\n.codehilite .mi { color: #666 } /* Literal.Number.Integer */\n.codehilite .mo { color: #666 } /* Literal.Number.Oct */\n.codehilite .sa { color: #BA2121 } /* Literal.String.Affix */\n.codehilite .sb { color: #BA2121 } /* Literal.String.Backtick */\n.codehilite .sc { color: #BA2121 } /* Literal.String.Char */\n.codehilite .dl { color: #BA2121 } /* Literal.String.Delimiter */\n.codehilite .sd { color: #BA2121; font-style: italic } /* Literal.String.Doc */\n.codehilite .s2 { color: #BA2121 } /* Literal.String.Double */\n.codehilite .se { color: #AA5D1F; font-weight: bold } /* Literal.String.Escape */\n.codehilite .sh { color: #BA2121 } /* Literal.String.Heredoc */\n.codehilite .si { color: #A45A77; font-weight: bold } /* Literal.String.Interpol */\n.codehilite .sx { color: #008000 } /* Literal.String.Other */\n.codehilite .sr { color: #A45A77 } /* Literal.String.Regex */\n.codehilite .s1 { color: #BA2121 } /* Literal.String.Single */\n.codehilite .ss { color: #19177C } /* Literal.String.Symbol */\n.codehilite .bp { color: #008000 } /* Name.Builtin.Pseudo */\n.codehilite .fm { color: #00F } /* Name.Function.Magic */\n.codehilite .vc { color: #19177C } /* Name.Variable.Class */\n.codehilite .vg { color: #19177C } /* Name.Variable.Global */\n.codehilite .vi { color: #19177C } /* Name.Variable.Instance */\n.codehilite .vm { color: #19177C } /* Name.Variable.Magic */\n.codehilite .il { color: #666 } /* Literal.Number.Integer.Long */\n\n/* Styling per blocchi di codice */\n.codehilite {\n    background: transparent !important;\n    border-radius: 8px;\n    overflow: hidden;\n}\n.codehilite pre {\n    background: transparent !important;\n    margin: 0 !important;\n    padding: 20px !important;\n    font-family: 'Monaco', 'Menlo', 'Consolas', monospace !important;\n    font-size: 14px !important;\n    line-height: 1.5 !important;\n    white-space: pre !important;\n    overflow-x: auto !important;\n    color: inherit !important;\n}\n.codehilite code {\n    background: transparent !important;\n    padding: 0 !important;\n    font-family: inherit !important;\n}\n\n\n.code-wrapper { \n    position: relative; \n}\n.copy-button {\n    position: absolute; \n    top: 12px; \n    right: 12px; \n    padding: 6px 12px; \n    font-size: 12px;\n    cursor: pointer; \n    border: none; \n    border-radius: 4px; \n    background: rgba(255,255,255,0.9);\n    color: #374151; \n    transition: all 0.2s ease;\n    font-weight: 500;\n}\n.copy-button:hover { \n    background: rgba(255,255,255,1);\n    transform: translateY(-1px);\n}\n\n\ndetails.code-container {\n    border: 1px solid #e5e7eb; \n    border-radius: 12px; \n    background: #f9fafb;\n    margin: 16px 0;\n    transition: all 0.3s ease;\n}\ndetails.code-container summary {\n    padding: 12px 16px;\n    font-size: 14px; \n    color: #6b7280; \n    cursor: pointer; \n    outline: none; \n    user-select: none;\n    font-weight: 500;\n}\ndetails.code-container[open] summary::after { \n    content: \" (Hide Code)\"; \n    color: #9ca3af; \n}\ndetails.code-container:not([open]) summary::after { \n    content: \" (Show Code)\"; \n    color: #d1d5db; \n}\ndetails.code-container .code-wrapper {\n    padding: 0;\n    margin: 0;\n}\n/* Blocchi di codice sempre visibili */\n.code-visible {\n    border: 1px solid #e5e7eb;\n    border-radius: 12px;\n    background: #f9fafb;\n    margin: 16px 0;\n}\n.code-visible .code-wrapper {\n    padding: 0;\n    margin: 0;\n}\n</style>\n<h2 id=\"introduzione\">üîç Introduzione</h2>\n<p>Il <strong><a href=\"/theory/nlp/Part-of-Speech Tagging/Part-of-Speech Tagging\" class=\"text-blue-600 hover:underline\">Part-of-Speech tagging</a></strong> (o POS tagging) √® il processo di assegnare ad ogni parola in una frase il suo <strong>ruolo grammaticale</strong> (es. nome, verbo, aggettivo).</p>\n<p>Due approcci molto comuni sono:\n- <strong>HMM (Hidden Markov Models)</strong> ‚Üí modelli <strong>generativi</strong> che stimano $P(x, c)$ e poi usano Bayes per ottenere $P(c \\mid x)$.\n- <strong>MaxEnt (Maximum Entropy)</strong> ‚Üí modelli <strong>discriminativi</strong> che stimano direttamente $P(c \\mid x)$ senza fare assunzioni forti di indipendenza.</p>\n<h2 id=\"cosa-fa-un-modello-maxent\">üß† Cosa fa un modello MaxEnt?</h2>\n<p>Un <strong>modello MaxEnt</strong> assegna ad ogni coppia $(c, x)$ (cio√®: classe e contesto osservato) una <strong>probabilit√† condizionata</strong>:</p>\n$$\nP(c \\mid x) = \\frac{1}{Z(x)} \\exp\\left(\\sum_{j} \\lambda_j f_j(c, x)\\right)\n$$\n<p>Dove:\n- $c$: classe (es. NN, VB, VBG&hellip;),\n- $x$: contesto osservato (es. parola, parole vicine, tag precedenti&hellip;),\n- $f_j(c, x)$: <strong>feature functions</strong> binarie (0 o 1),\n- $\\lambda_j$: peso (learned during training),\n- $Z(x)$: funzione di normalizzazione:</p>\n$$\nZ(x) = \\sum_{c'} \\exp\\left(\\sum_j \\lambda_j f_j(c', x)\\right)\n$$\n<h2 id=\"esempi-di-feature-functions\">‚öôÔ∏è Esempi di Feature Functions</h2>\n<p>Ecco alcune feature rappresentate nell&rsquo;immagine:</p>\n$$\n\\begin{align*}\nf_1(c,x) &= \n\\begin{cases}\n1 & \\text{se } word_i = \\text{\"race\"} \\text{ e } c = NN \\\\\n0 & \\text{altrimenti}\n\\end{cases}\\\\\n\nf_2(c,x) &= \n\\begin{cases}\n1 & \\text{se } t_{i-1} = TO \\text{ e } c = VB \\\\\n0 & \\text{altrimenti}\n\\end{cases}\\\\\n\nf_3(c,x) &= \n\\begin{cases}\n1 & \\text{se } \\text{suffix}(word_i) = \\text{\"ing\"} \\text{ e } c = VBG \\\\\n0 & \\text{altrimenti}\n\\end{cases}\\\\\n\nf_4(c,x) &= \n\\begin{cases}\n1 & \\text{se } \\text{is_lower_case}(word_i) \\text{ e } c = VB \\\\\n0 & \\text{altrimenti}\n\\end{cases}\\\\\n\nf_5(c,x) &= \n\\begin{cases}\n1 & \\text{se } word_i = \\text{\"race\"} \\text{ e } c = VB \\\\\n0 & \\text{altrimenti}\n\\end{cases}\\\\\n\nf_6(c,x) &= \n\\begin{cases}\n1 & \\text{se } t_{i-1} = TO \\text{ e } c = NN \\\\\n0 & \\text{altrimenti}\n\\end{cases}\\\\\n\n\\end{align*}\n$$\n<blockquote>\n<p>‚ú® Queste funzioni possono osservare <strong>propriet√† arbitrarie</strong> del contesto, come la parola corrente, il tag precedente, suffissi, maiuscole/minuscole&hellip; cosa <strong>difficile o impossibile</strong> da modellare con HMM.</p>\n</blockquote>\n<h2 id=\"esempio-completo\">üìê Esempio Completo</h2>\n<p>Supponiamo la frase:<br />\n<strong>&ldquo;They plan to race tomorrow.&rdquo;</strong></p>\n<p>Parola corrente: <code>race</code><br />\nContesto: <code>word_i = \"race\", t_{i-1} = TO</code></p>\n<h3 id=\"step-1-feature-attivate-per-ciascun-candidato-tag\">Step 1: Feature attivate per ciascun candidato tag</h3>\n<table>\n<thead>\n<tr>\n<th>Candidato Tag $c$</th>\n<th>Feature Attive $f_j(c, x)$</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>VB</strong></td>\n<td>$f_2, f_5$</td>\n</tr>\n<tr>\n<td><strong>NN</strong></td>\n<td>$f_1, f_6$</td>\n</tr>\n<tr>\n<td><strong>VBG</strong></td>\n<td>nessuna</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"step-2-pesi-delle-feature-ipotesi\">Step 2: Pesi delle feature (ipotesi):</h3>\n<table>\n<thead>\n<tr>\n<th>Feature</th>\n<th>Peso $\\lambda_j$</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>$f_1$</td>\n<td>1.2</td>\n</tr>\n<tr>\n<td>$f_2$</td>\n<td>1.4</td>\n</tr>\n<tr>\n<td>$f_5$</td>\n<td>0.9</td>\n</tr>\n<tr>\n<td>$f_6$</td>\n<td>0.5</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"step-3-calcolo-punteggi\">Step 3: Calcolo punteggi</h3>\n$$\n\\begin{align*}\n\\text{score}(VB) = \\exp(\\lambda_2 + \\lambda_5) = \\exp(1.4 + 0.9) = \\exp(2.3) &\\approx 9.974\\\\\n\\text{score}(NN) = \\exp(\\lambda_1 + \\lambda_6) = \\exp(1.2 + 0.5) = \\exp(1.7) &\\approx 5.473\\\\\n\\text{score}(VBG) = \\exp(0) &= 1\\\\\nZ(x) = 9.974 + 5.473 + 1 &= 16.447\n\\end{align*}\n$$\n<h3 id=\"step-4-probabilita-finali\">Step 4: Probabilit√† finali</h3>\n$$\nP(VB \\mid x) = \\frac{9.974}{16.447} \\approx 0.606\n$$\n$$\nP(NN \\mid x) = \\frac{5.473}{16.447} \\approx 0.333\n$$\n$$\nP(VBG \\mid x) = \\frac{1}{16.447} \\approx 0.061\n$$\n<p>üîö <strong>Predizione finale: VB</strong> ‚Üí &ldquo;race&rdquo; √® usato come verbo.</p>\n<h2 id=\"altri-esempi-utili\">üìã Altri Esempi Utili</h2>\n<table>\n<thead>\n<tr>\n<th>Frase</th>\n<th>Parola</th>\n<th>Contesto</th>\n<th>Feature Attivate</th>\n<th>Tag Atteso</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&ldquo;The race is on.&rdquo;</td>\n<td>race</td>\n<td>word_i = race</td>\n<td>$f_1$</td>\n<td>NN</td>\n</tr>\n<tr>\n<td>&ldquo;They want to race.&rdquo;</td>\n<td>race</td>\n<td>t_{i-1} = TO</td>\n<td>$f_2, f_5$</td>\n<td>VB</td>\n</tr>\n<tr>\n<td>&ldquo;He is running fast.&rdquo;</td>\n<td>running</td>\n<td>suffix = &ldquo;ing&rdquo;</td>\n<td>$f_3$</td>\n<td>VBG</td>\n</tr>\n<tr>\n<td>&ldquo;I need to plan.&rdquo;</td>\n<td>plan</td>\n<td>lowercase, t_{i-1} = TO</td>\n<td>$f_2, f_4$</td>\n<td>VB</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"vantaggi-rispetto-a-hmm\">üîÅ Vantaggi rispetto a HMM</h2>\n<table>\n<thead>\n<tr>\n<th>Modello</th>\n<th>Limiti</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>HMM</strong></td>\n<td>Fa assunzioni di indipendenza forte tra osservazioni. Difficile modellare feature complesse.</td>\n</tr>\n<tr>\n<td><strong>MaxEnt</strong></td>\n<td>Flessibile, pu√≤ includere qualunque funzione arbitraria. Meglio con pi√π contesto.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"conclusione\">üß† Conclusione</h2>\n<p>I modelli di massima entropia:\n- Permettono di <strong>combinare molte feature diverse</strong> in modo elegante.\n- Sono <strong>pi√π flessibili</strong> rispetto agli HMM.\n- Funzionano molto bene per <strong>POS tagging</strong>, chunking, NER, ecc.</p>"
}