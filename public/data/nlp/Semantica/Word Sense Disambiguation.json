{
  "title": "üß† Word Sense Disambiguation (WSD)",
  "content": "<style>pre { line-height: 125%; }\ntd.linenos .normal { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }\nspan.linenos { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }\ntd.linenos .special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }\nspan.linenos.special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }\n.codehilite .hll { background-color: #ffffcc }\n.codehilite { background: #f8f8f8; }\n.codehilite .c { color: #3D7B7B; font-style: italic } /* Comment */\n.codehilite .err { border: 1px solid #F00 } /* Error */\n.codehilite .k { color: #008000; font-weight: bold } /* Keyword */\n.codehilite .o { color: #666 } /* Operator */\n.codehilite .ch { color: #3D7B7B; font-style: italic } /* Comment.Hashbang */\n.codehilite .cm { color: #3D7B7B; font-style: italic } /* Comment.Multiline */\n.codehilite .cp { color: #9C6500 } /* Comment.Preproc */\n.codehilite .cpf { color: #3D7B7B; font-style: italic } /* Comment.PreprocFile */\n.codehilite .c1 { color: #3D7B7B; font-style: italic } /* Comment.Single */\n.codehilite .cs { color: #3D7B7B; font-style: italic } /* Comment.Special */\n.codehilite .gd { color: #A00000 } /* Generic.Deleted */\n.codehilite .ge { font-style: italic } /* Generic.Emph */\n.codehilite .ges { font-weight: bold; font-style: italic } /* Generic.EmphStrong */\n.codehilite .gr { color: #E40000 } /* Generic.Error */\n.codehilite .gh { color: #000080; font-weight: bold } /* Generic.Heading */\n.codehilite .gi { color: #008400 } /* Generic.Inserted */\n.codehilite .go { color: #717171 } /* Generic.Output */\n.codehilite .gp { color: #000080; font-weight: bold } /* Generic.Prompt */\n.codehilite .gs { font-weight: bold } /* Generic.Strong */\n.codehilite .gu { color: #800080; font-weight: bold } /* Generic.Subheading */\n.codehilite .gt { color: #04D } /* Generic.Traceback */\n.codehilite .kc { color: #008000; font-weight: bold } /* Keyword.Constant */\n.codehilite .kd { color: #008000; font-weight: bold } /* Keyword.Declaration */\n.codehilite .kn { color: #008000; font-weight: bold } /* Keyword.Namespace */\n.codehilite .kp { color: #008000 } /* Keyword.Pseudo */\n.codehilite .kr { color: #008000; font-weight: bold } /* Keyword.Reserved */\n.codehilite .kt { color: #B00040 } /* Keyword.Type */\n.codehilite .m { color: #666 } /* Literal.Number */\n.codehilite .s { color: #BA2121 } /* Literal.String */\n.codehilite .na { color: #687822 } /* Name.Attribute */\n.codehilite .nb { color: #008000 } /* Name.Builtin */\n.codehilite .nc { color: #00F; font-weight: bold } /* Name.Class */\n.codehilite .no { color: #800 } /* Name.Constant */\n.codehilite .nd { color: #A2F } /* Name.Decorator */\n.codehilite .ni { color: #717171; font-weight: bold } /* Name.Entity */\n.codehilite .ne { color: #CB3F38; font-weight: bold } /* Name.Exception */\n.codehilite .nf { color: #00F } /* Name.Function */\n.codehilite .nl { color: #767600 } /* Name.Label */\n.codehilite .nn { color: #00F; font-weight: bold } /* Name.Namespace */\n.codehilite .nt { color: #008000; font-weight: bold } /* Name.Tag */\n.codehilite .nv { color: #19177C } /* Name.Variable */\n.codehilite .ow { color: #A2F; font-weight: bold } /* Operator.Word */\n.codehilite .w { color: #BBB } /* Text.Whitespace */\n.codehilite .mb { color: #666 } /* Literal.Number.Bin */\n.codehilite .mf { color: #666 } /* Literal.Number.Float */\n.codehilite .mh { color: #666 } /* Literal.Number.Hex */\n.codehilite .mi { color: #666 } /* Literal.Number.Integer */\n.codehilite .mo { color: #666 } /* Literal.Number.Oct */\n.codehilite .sa { color: #BA2121 } /* Literal.String.Affix */\n.codehilite .sb { color: #BA2121 } /* Literal.String.Backtick */\n.codehilite .sc { color: #BA2121 } /* Literal.String.Char */\n.codehilite .dl { color: #BA2121 } /* Literal.String.Delimiter */\n.codehilite .sd { color: #BA2121; font-style: italic } /* Literal.String.Doc */\n.codehilite .s2 { color: #BA2121 } /* Literal.String.Double */\n.codehilite .se { color: #AA5D1F; font-weight: bold } /* Literal.String.Escape */\n.codehilite .sh { color: #BA2121 } /* Literal.String.Heredoc */\n.codehilite .si { color: #A45A77; font-weight: bold } /* Literal.String.Interpol */\n.codehilite .sx { color: #008000 } /* Literal.String.Other */\n.codehilite .sr { color: #A45A77 } /* Literal.String.Regex */\n.codehilite .s1 { color: #BA2121 } /* Literal.String.Single */\n.codehilite .ss { color: #19177C } /* Literal.String.Symbol */\n.codehilite .bp { color: #008000 } /* Name.Builtin.Pseudo */\n.codehilite .fm { color: #00F } /* Name.Function.Magic */\n.codehilite .vc { color: #19177C } /* Name.Variable.Class */\n.codehilite .vg { color: #19177C } /* Name.Variable.Global */\n.codehilite .vi { color: #19177C } /* Name.Variable.Instance */\n.codehilite .vm { color: #19177C } /* Name.Variable.Magic */\n.codehilite .il { color: #666 } /* Literal.Number.Integer.Long */\n\n/* Styling per blocchi di codice */\n.codehilite {\n    background: transparent !important;\n    border-radius: 8px;\n    overflow: hidden;\n}\n.codehilite pre {\n    background: transparent !important;\n    margin: 0 !important;\n    padding: 20px !important;\n    font-family: 'Monaco', 'Menlo', 'Consolas', monospace !important;\n    font-size: 14px !important;\n    line-height: 1.5 !important;\n    white-space: pre !important;\n    overflow-x: auto !important;\n    color: inherit !important;\n}\n.codehilite code {\n    background: transparent !important;\n    padding: 0 !important;\n    font-family: inherit !important;\n}\n\n\n.code-wrapper { \n    position: relative; \n}\n.copy-button {\n    position: absolute; \n    top: 12px; \n    right: 12px; \n    padding: 6px 12px; \n    font-size: 12px;\n    cursor: pointer; \n    border: none; \n    border-radius: 4px; \n    background: rgba(255,255,255,0.9);\n    color: #374151; \n    transition: all 0.2s ease;\n    font-weight: 500;\n}\n.copy-button:hover { \n    background: rgba(255,255,255,1);\n    transform: translateY(-1px);\n}\n\n\ndetails.code-container {\n    border: 1px solid #e5e7eb; \n    border-radius: 12px; \n    background: #f9fafb;\n    margin: 16px 0;\n    transition: all 0.3s ease;\n}\ndetails.code-container summary {\n    padding: 12px 16px;\n    font-size: 14px; \n    color: #6b7280; \n    cursor: pointer; \n    outline: none; \n    user-select: none;\n    font-weight: 500;\n}\ndetails.code-container[open] summary::after { \n    content: \" (Hide Code)\"; \n    color: #9ca3af; \n}\ndetails.code-container:not([open]) summary::after { \n    content: \" (Show Code)\"; \n    color: #d1d5db; \n}\ndetails.code-container .code-wrapper {\n    padding: 0;\n    margin: 0;\n}\n</style>\n<h2 id=\"definizione\">üìñ Definizione</h2>\n<p>La <strong>Word Sense Disambiguation (WSD)</strong> √® il compito di <strong>determinare il significato corretto</strong> di una parola in un determinato contesto, <strong>data una lista di possibili sensi (o synset)</strong>, come quelli definiti in risorse come <strong>WordNet</strong>.</p>\n<blockquote>\n<p>Esempio:<br />\nFrase: <em>&ldquo;I like planes and aeronautics in general.&rdquo;</em><br />\nObiettivo: Disambiguare la parola <em>planes</em> ‚Üí potrebbe significare ‚Äúaerei‚Äù ($plane¬π_n$) oppure ‚Äúsuperfici piane‚Äù ($plane¬≤_n$)<br />\nRisultato corretto: $plane¬π_n$ (aerei) grazie al contesto semantico (‚Äúaeronautics‚Äù).</p>\n</blockquote>\n<p>üìå Inventario di sensi: tipicamente tratto da <strong>WordNet</strong> o risorse simili.</p>\n<h2 id=\"varianti-del-task\">üß™ Varianti del task</h2>\n<p>La WSD si divide in due principali sottotipi di task:</p>\n<h3 id=\"lexical-sample-task\">üéØ Lexical Sample Task</h3>\n<ul>\n<li>Viene fornito un <strong>insieme limitato di parole target</strong>.</li>\n<li>Ogni parola ha un proprio inventario di sensi.</li>\n<li>Obiettivo: disambiguare solo queste parole in diversi contesti.</li>\n<li>‚úÖ Semplice da valutare e confrontare.</li>\n</ul>\n<h3 id=\"all-words-task\">üìö All-Words Task</h3>\n<ul>\n<li>Obiettivo: disambiguare <strong>tutte le parole</strong> in un testo.</li>\n<li>Si utilizza un <strong>lessico completo</strong> con sensi per ogni lemma.</li>\n<li>Simile al <em>part-of-speech tagging</em>, ma ogni lemma ha un proprio tagset.</li>\n<li>‚úÖ Pi√π realistico e sfidante.</li>\n</ul>\n<h2 id=\"metodi-per-la-wsd\">üß† Metodi per la WSD</h2>\n<h3 id=\"1-supervised-learning\">üîç 1. Supervised Learning</h3>\n<ul>\n<li>Richiede <strong>corpora annotati manualmente</strong> (es. SemCor).</li>\n<li>Utilizza tecniche di machine learning (es. SVM, Decision Tree, ecc.).</li>\n<li>‚úÖ Alta accuratezza</li>\n<li>‚ùå Costi alti per l‚Äôannotazione</li>\n</ul>\n<h3 id=\"2-unsupervised-learning\">üß© 2. Unsupervised Learning</h3>\n<ul>\n<li>Non richiede etichette.</li>\n<li>Utilizza <strong>similarit√† distribuzionale</strong>, clustering, o co-occorrenze.</li>\n<li>‚ùå Tipicamente meno accurato</li>\n<li>‚úÖ Scalabile a nuove lingue</li>\n</ul>\n<h3 id=\"3-minimally-supervised\">‚öñÔ∏è 3. Minimally Supervised</h3>\n<ul>\n<li>Si basa su <strong>annotazioni parziali</strong> o <strong>weak supervision</strong>.</li>\n<li>Esempio: sfruttare glossari, parallel corpora o dizionari bilingue.</li>\n</ul>\n<h3 id=\"4-neural-wsd\">ü§ñ 4. Neural WSD</h3>\n<ul>\n<li>Modelli basati su <strong>reti neurali profonde</strong>, spesso con <strong>word embeddings contestuali</strong> (es. BERT, ELMo).</li>\n<li>Alcuni modelli famosi:</li>\n<li><strong>GlossBERT</strong> (legge gloss e contesto con BERT)</li>\n<li><strong>Knowledge-based BERT</strong></li>\n<li>üìé Paper: <a href=\"https://www.ijcai.org/proceedings/2021/593\">IJCAI 2021 ‚Äî Neural Word Sense Disambiguation</a></li>\n</ul>\n<h2 id=\"tecniche-correlate\">üîÅ Tecniche correlate</h2>\n<p>La WSD √® strettamente legata ad altri compiti semantici:</p>\n<ul>\n<li>\n<p>üîó <strong><a href=\"/theory/nlp/Semantica/Entity Linking\" class=\"text-blue-600 hover:underline\">Entity Linking</a></strong><br />\n  ‚Üí associa una menzione in testo a un&rsquo;entit√† in una knowledge base (es. Wikidata, DBpedia).<br />\n  ‚Üí simile alla WSD ma lavora su entit√† enciclopediche anzich√© parole comuni.</p>\n</li>\n<li>\n<p>üß† <strong><a href=\"/theory/nlp/Semantica/Ontology Learning\" class=\"text-blue-600 hover:underline\">Ontology Learning</a></strong><br />\n  ‚Üí processo automatico di costruzione di <strong>ontologie semantiche</strong> a partire da testo.<br />\n  ‚Üí le disambiguazioni accurate sono fondamentali per costruire classi e relazioni corrette.</p>\n</li>\n</ul>\n<h2 id=\"esempio-visivo-placeholder\">üß† Esempio visivo (placeholder)</h2>\n<p>üìå <em>Inserisci qui uno schema che mostri il processo WSD: parola ‚Üí contesto ‚Üí selezione tra sensi possibili da WordNet.</em></p>\n<h2 id=\"considerazioni-finali\">üìå Considerazioni finali</h2>\n<p>La WSD √® un <strong>compito centrale nella comprensione semantica del linguaggio naturale</strong>.<br />\nNonostante sia studiata da decenni, <strong>rimane un problema aperto</strong> in molte lingue e domini, specialmente in contesti rumorosi o low-resource.</p>\n<blockquote>\n<p>‚ú® Una WSD accurata √® cruciale per applicazioni NLP avanzate come:<br />\n‚Üí <em>machine translation</em>, <em>question answering</em>, <em>text summarization</em>, <em>semantic search</em>, <em>information extraction</em> e molto altro.</p>\n</blockquote>"
}