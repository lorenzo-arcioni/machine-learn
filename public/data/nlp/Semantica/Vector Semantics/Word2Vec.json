{
  "title": "üß† Word2Vec: Una Spiegazione Dettagliata e Intuitiva",
  "content": "<style>pre { line-height: 125%; }\ntd.linenos .normal { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }\nspan.linenos { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }\ntd.linenos .special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }\nspan.linenos.special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }\n.codehilite .hll { background-color: #ffffcc }\n.codehilite { background: #f8f8f8; }\n.codehilite .c { color: #3D7B7B; font-style: italic } /* Comment */\n.codehilite .err { border: 1px solid #F00 } /* Error */\n.codehilite .k { color: #008000; font-weight: bold } /* Keyword */\n.codehilite .o { color: #666 } /* Operator */\n.codehilite .ch { color: #3D7B7B; font-style: italic } /* Comment.Hashbang */\n.codehilite .cm { color: #3D7B7B; font-style: italic } /* Comment.Multiline */\n.codehilite .cp { color: #9C6500 } /* Comment.Preproc */\n.codehilite .cpf { color: #3D7B7B; font-style: italic } /* Comment.PreprocFile */\n.codehilite .c1 { color: #3D7B7B; font-style: italic } /* Comment.Single */\n.codehilite .cs { color: #3D7B7B; font-style: italic } /* Comment.Special */\n.codehilite .gd { color: #A00000 } /* Generic.Deleted */\n.codehilite .ge { font-style: italic } /* Generic.Emph */\n.codehilite .ges { font-weight: bold; font-style: italic } /* Generic.EmphStrong */\n.codehilite .gr { color: #E40000 } /* Generic.Error */\n.codehilite .gh { color: #000080; font-weight: bold } /* Generic.Heading */\n.codehilite .gi { color: #008400 } /* Generic.Inserted */\n.codehilite .go { color: #717171 } /* Generic.Output */\n.codehilite .gp { color: #000080; font-weight: bold } /* Generic.Prompt */\n.codehilite .gs { font-weight: bold } /* Generic.Strong */\n.codehilite .gu { color: #800080; font-weight: bold } /* Generic.Subheading */\n.codehilite .gt { color: #04D } /* Generic.Traceback */\n.codehilite .kc { color: #008000; font-weight: bold } /* Keyword.Constant */\n.codehilite .kd { color: #008000; font-weight: bold } /* Keyword.Declaration */\n.codehilite .kn { color: #008000; font-weight: bold } /* Keyword.Namespace */\n.codehilite .kp { color: #008000 } /* Keyword.Pseudo */\n.codehilite .kr { color: #008000; font-weight: bold } /* Keyword.Reserved */\n.codehilite .kt { color: #B00040 } /* Keyword.Type */\n.codehilite .m { color: #666 } /* Literal.Number */\n.codehilite .s { color: #BA2121 } /* Literal.String */\n.codehilite .na { color: #687822 } /* Name.Attribute */\n.codehilite .nb { color: #008000 } /* Name.Builtin */\n.codehilite .nc { color: #00F; font-weight: bold } /* Name.Class */\n.codehilite .no { color: #800 } /* Name.Constant */\n.codehilite .nd { color: #A2F } /* Name.Decorator */\n.codehilite .ni { color: #717171; font-weight: bold } /* Name.Entity */\n.codehilite .ne { color: #CB3F38; font-weight: bold } /* Name.Exception */\n.codehilite .nf { color: #00F } /* Name.Function */\n.codehilite .nl { color: #767600 } /* Name.Label */\n.codehilite .nn { color: #00F; font-weight: bold } /* Name.Namespace */\n.codehilite .nt { color: #008000; font-weight: bold } /* Name.Tag */\n.codehilite .nv { color: #19177C } /* Name.Variable */\n.codehilite .ow { color: #A2F; font-weight: bold } /* Operator.Word */\n.codehilite .w { color: #BBB } /* Text.Whitespace */\n.codehilite .mb { color: #666 } /* Literal.Number.Bin */\n.codehilite .mf { color: #666 } /* Literal.Number.Float */\n.codehilite .mh { color: #666 } /* Literal.Number.Hex */\n.codehilite .mi { color: #666 } /* Literal.Number.Integer */\n.codehilite .mo { color: #666 } /* Literal.Number.Oct */\n.codehilite .sa { color: #BA2121 } /* Literal.String.Affix */\n.codehilite .sb { color: #BA2121 } /* Literal.String.Backtick */\n.codehilite .sc { color: #BA2121 } /* Literal.String.Char */\n.codehilite .dl { color: #BA2121 } /* Literal.String.Delimiter */\n.codehilite .sd { color: #BA2121; font-style: italic } /* Literal.String.Doc */\n.codehilite .s2 { color: #BA2121 } /* Literal.String.Double */\n.codehilite .se { color: #AA5D1F; font-weight: bold } /* Literal.String.Escape */\n.codehilite .sh { color: #BA2121 } /* Literal.String.Heredoc */\n.codehilite .si { color: #A45A77; font-weight: bold } /* Literal.String.Interpol */\n.codehilite .sx { color: #008000 } /* Literal.String.Other */\n.codehilite .sr { color: #A45A77 } /* Literal.String.Regex */\n.codehilite .s1 { color: #BA2121 } /* Literal.String.Single */\n.codehilite .ss { color: #19177C } /* Literal.String.Symbol */\n.codehilite .bp { color: #008000 } /* Name.Builtin.Pseudo */\n.codehilite .fm { color: #00F } /* Name.Function.Magic */\n.codehilite .vc { color: #19177C } /* Name.Variable.Class */\n.codehilite .vg { color: #19177C } /* Name.Variable.Global */\n.codehilite .vi { color: #19177C } /* Name.Variable.Instance */\n.codehilite .vm { color: #19177C } /* Name.Variable.Magic */\n.codehilite .il { color: #666 } /* Literal.Number.Integer.Long */\n\n/* Styling per blocchi di codice */\n.codehilite {\n    background: transparent !important;\n    border-radius: 8px;\n    overflow: hidden;\n}\n.codehilite pre {\n    background: transparent !important;\n    margin: 0 !important;\n    padding: 20px !important;\n    font-family: 'Monaco', 'Menlo', 'Consolas', monospace !important;\n    font-size: 14px !important;\n    line-height: 1.5 !important;\n    white-space: pre !important;\n    overflow-x: auto !important;\n    color: inherit !important;\n}\n.codehilite code {\n    background: transparent !important;\n    padding: 0 !important;\n    font-family: inherit !important;\n}\n\n\n.code-wrapper { \n    position: relative; \n}\n.copy-button {\n    position: absolute; \n    top: 12px; \n    right: 12px; \n    padding: 6px 12px; \n    font-size: 12px;\n    cursor: pointer; \n    border: none; \n    border-radius: 4px; \n    background: rgba(255,255,255,0.9);\n    color: #374151; \n    transition: all 0.2s ease;\n    font-weight: 500;\n}\n.copy-button:hover { \n    background: rgba(255,255,255,1);\n    transform: translateY(-1px);\n}\n\n\ndetails.code-container {\n    border: 1px solid #e5e7eb; \n    border-radius: 12px; \n    background: #f9fafb;\n    margin: 16px 0;\n    transition: all 0.3s ease;\n}\ndetails.code-container summary {\n    padding: 12px 16px;\n    font-size: 14px; \n    color: #6b7280; \n    cursor: pointer; \n    outline: none; \n    user-select: none;\n    font-weight: 500;\n}\ndetails.code-container[open] summary::after { \n    content: \" (Hide Code)\"; \n    color: #9ca3af; \n}\ndetails.code-container:not([open]) summary::after { \n    content: \" (Show Code)\"; \n    color: #d1d5db; \n}\ndetails.code-container .code-wrapper {\n    padding: 0;\n    margin: 0;\n}\n/* Blocchi di codice sempre visibili */\n.code-visible {\n    border: 1px solid #e5e7eb;\n    border-radius: 12px;\n    background: #f9fafb;\n    margin: 16px 0;\n}\n.code-visible .code-wrapper {\n    padding: 0;\n    margin: 0;\n}\n</style>\n<h2 id=\"cose-word2vec\">Cos&rsquo;√® Word2Vec?</h2>\n<p>Word2Vec √® una tecnica di <strong>apprendimento non supervisionato</strong> introdotta da <strong>Tomas Mikolov</strong> nel 2013 al Google Research. Serve a rappresentare le <strong>parole</strong> come <strong>vettori continui</strong> in uno spazio n-dimensionale, catturando <strong>relazioni semantiche e sintattiche</strong> tra parole.</p>\n<h3 id=\"perche-usare-word2vec\">üß© Perch√© usare Word2Vec?</h3>\n<ul>\n<li>Perch√© le <strong>parole non sono numeri</strong>, ma per addestrare modelli di Machine Learning abbiamo bisogno di rappresentazioni <strong>numericamente significative</strong>.</li>\n<li>Word2Vec permette di <strong>mappare parole simili in vettori simili</strong> nello spazio.</li>\n<li>√à alla base di molte applicazioni NLP: <strong>motori di ricerca, chatbot, traduttori automatici, recommender system</strong>, ecc.</li>\n</ul>\n<h2 id=\"obiettivo-embedded-meaning\">üìå Obiettivo: Embedded Meaning</h2>\n<p>Word2Vec impara a <strong>prevedere il contesto</strong> di una parola o la parola dato un contesto. A differenza del classico one-hot encoding (dove ogni parola √® un vettore ortogonale), Word2Vec assegna a ogni parola un <strong>vettore denso</strong> (dense vector) che ne <strong>cattura il significato</strong>. Ad esempio:</p>\n$$\n\\text{King} - \\text{Man} + \\text{Woman} \\approx \\text{Queen}.\n$$\n<p>Questo tipo di <strong>algebra semantica</strong> √® possibile perch√© Word2Vec apprende delle <strong>rappresentazioni distribuite</strong> (distributed representations).</p>\n<h2 id=\"architettura-cbow-vs-skip-gram\">üõ†Ô∏è Architettura: CBOW vs Skip-Gram</h2>\n<p>Word2Vec ha due principali architetture:</p>\n<h3 id=\"1-cbow-continuous-bag-of-words\">1. CBOW (Continuous Bag of Words)</h3>\n<ul>\n<li>Obiettivo: <strong>Predire la parola centrale</strong> dato il <strong>contesto</strong> (le parole attorno).</li>\n<li>Esempio:</li>\n<li>Contesto: &ldquo;il __ beve latte&rdquo;</li>\n<li>Target: &ldquo;gatto&rdquo;</li>\n</ul>\n<p><strong>Funziona meglio con dataset piccoli e parole frequenti.</strong></p>\n<h3 id=\"2-skip-gram\">2. Skip-Gram</h3>\n<ul>\n<li>Obiettivo: <strong>Predire il contesto</strong> dato una parola centrale.</li>\n<li>Esempio:</li>\n<li>Input: &ldquo;gatto&rdquo;</li>\n<li>Output atteso: [&ldquo;il&rdquo;, &ldquo;beve&rdquo;, &ldquo;latte&rdquo;]</li>\n</ul>\n<p><strong>Funziona meglio con dataset grandi e parole rare.</strong></p>\n<h2 id=\"come-funziona-internamente\">üìê Come funziona internamente?</h2>\n<h3 id=\"step-1-one-hot-encoding-dellinput\">Step 1: One-Hot Encoding dell&rsquo;input</h3>\n<p>Ogni parola √® rappresentata come un vettore lungo quanto il vocabolario (es: 10.000 parole), con uno 0 ovunque tranne un 1 nella posizione della parola.</p>\n<p>Esempio:</p>\n<details class=\"code-container\">\n<summary>Code</summary>\n<div class=\"code-wrapper\">\n<button class=\"copy-button\" onclick=\"\n                const code = this.parentElement.querySelector('pre');\n                if (code) {\n                    navigator.clipboard.writeText(code.innerText);\n                    this.textContent = 'Copied!';\n                    setTimeout(() => this.textContent = 'Copy', 2000);\n                }\n            \">Copy</button>\n<div class=\"codehilite\"><pre><span></span><code>gatto ‚Üí [0, 0, ..., 1, ..., 0]\n</code></pre></div>\n</div>\n</details>\n\n<h3 id=\"step-2-layer-di-embedding-matrice-peso\">Step 2: Layer di embedding (matrice peso)</h3>\n<ul>\n<li>L‚Äôinput one-hot moltiplicato per una <strong>matrice dei pesi W</strong> restituisce il vettore dense.</li>\n<li>Se <code>W</code> ha dimensione <code>(vocab_size, embedding_dim)</code> ‚Üí otterrai un vettore <code>embedding_dim</code> (es. 100).</li>\n</ul>\n<h3 id=\"step-3-output-layer-softmax\">Step 3: Output layer + Softmax</h3>\n<p>Nel caso di CBOW:\n- Il contesto viene mediato ‚Üí moltiplicato per <code>W.T</code> ‚Üí passaggio a softmax ‚Üí si confronta con la parola target.\nNel caso di Skip-Gram:\n- La parola target genera il vettore ‚Üí moltiplicato ‚Üí predice ogni parola nel contesto.</p>\n<h2 id=\"intuizione-geometrica\">üí° Intuizione geometrica</h2>\n<ul>\n<li>Le <strong>distanze cosine</strong> tra vettori di parole simili sono piccole.</li>\n<li>I vettori non hanno significato assoluto, ma <strong>relativo</strong>: il significato emerge dalla posizione rispetto alle altre parole.</li>\n</ul>\n<p>üì∑ <img alt=\"Spazio vettoriale 2D\" src=\"/images/posts/word2vec_projection.png\" /></p>\n<h2 id=\"ottimizzazione-negative-sampling-e-hierarchical-softmax\">‚öôÔ∏è Ottimizzazione: Negative Sampling e Hierarchical Softmax</h2>\n<h3 id=\"problema\">üßÆ Problema</h3>\n<p>Calcolare una softmax su un vocabolario da 100.000 parole √® costoso.</p>\n<h3 id=\"soluzioni\">üí° Soluzioni:</h3>\n<h4 id=\"1-negative-sampling\">1. Negative Sampling</h4>\n<ul>\n<li>\n<p>Invece di aggiornare <strong>tutti i vettori</strong>, si aggiornano solo quelli delle parole <strong>corrette</strong> e di alcune <strong>parole negative scelte a caso</strong>.</p>\n</li>\n<li>\n<p>Esempio:</p>\n</li>\n<li>Target: &ldquo;gatto&rdquo;</li>\n<li>\n<p>Negative samples: [&ldquo;astronave&rdquo;, &ldquo;carburatore&rdquo;, &ldquo;banana&rdquo;]</p>\n</li>\n<li>\n<p>Si applica una <strong>logistic regression binaria</strong>: vera parola = 1, parole campione = 0.</p>\n</li>\n</ul>\n<h4 id=\"2-hierarchical-softmax\">2. Hierarchical Softmax</h4>\n<ul>\n<li>Organizza le parole in un <strong>albero binario Huffman</strong>.</li>\n<li>Ogni parola √® una foglia, ogni predizione √® un <strong>cammino da radice a foglia</strong>.</li>\n<li>Riduce la complessit√† computazionale da <code>O(V)</code> a <code>O(log V)</code>.</li>\n</ul>\n<h2 id=\"significato-semantico-nei-vettori\">üß† Significato Semantico nei Vettori</h2>\n<p>Grazie a Word2Vec, i vettori imparati <strong>catturano concetti</strong> come:</p>\n<ul>\n<li><strong>Somiglianza semantica</strong>: &ldquo;gatto&rdquo; vicino a &ldquo;cane&rdquo;</li>\n<li><strong>Relazioni analogiche</strong>: &ldquo;re - uomo + donna ‚âà regina&rdquo;</li>\n<li><strong>Sinonimia</strong>: &ldquo;auto&rdquo; vicino a &ldquo;macchina&rdquo;</li>\n</ul>\n<p>üì∑ <img alt=\"Analogies\" src=\"/images/posts/word2vec_analogies.png\" /></p>\n<h2 id=\"qualita-degli-embeddings\">üß™ Qualit√† degli embeddings</h2>\n<h3 id=\"metriche-comuni\">üîç Metriche comuni:</h3>\n<ul>\n<li><strong>Cosine Similarity</strong>: misura quanto due vettori puntano nella stessa direzione.</li>\n<li><strong>Word Analogies</strong>: test come &ldquo;paris : france = tokyo : ?&rdquo;</li>\n<li><strong>t-SNE / PCA</strong>: visualizzazioni per ridurre la dimensionalit√† e mostrare cluster semantici.</li>\n</ul>\n<h2 id=\"training-tips\">üìà Training Tips</h2>\n<ul>\n<li>Dataset pi√π grande ‚Üí embedding migliore.</li>\n<li>Pulizia dei dati importante: rimuovere stopword pu√≤ aiutare.</li>\n<li>Finestra (window size) bilancia semantica vs sintassi:</li>\n<li><strong>Piccola (2-3)</strong> ‚Üí sintassi</li>\n<li><strong>Grande (5-10)</strong> ‚Üí semantica</li>\n</ul>\n<h2 id=\"implementazioni-e-librerie\">üß∞ Implementazioni e librerie</h2>\n<ul>\n<li><code>gensim.models.Word2Vec</code> (Python, semplice e veloce)</li>\n<li>TensorFlow / PyTorch per implementazioni personalizzate</li>\n<li>FastText (Facebook): estende Word2Vec gestendo morfologia con n-grammi</li>\n</ul>\n<h2 id=\"limiti-di-word2vec\">üß≠ Limiti di Word2Vec</h2>\n<ul>\n<li>Staticit√†: ogni parola ha <strong>un solo vettore</strong>, anche se ha significati diversi.</li>\n<li>Mancanza di contesto: non √® sensibile alla frase.</li>\n<li>Non gestisce frasi n√© strutture sintattiche.</li>\n</ul>\n<p>‚û°Ô∏è Per superare questi limiti: <strong>ELMo, BERT, GPT</strong> e altri modelli <strong>contextual embeddings</strong>.</p>\n<h2 id=\"risorse-utili\">üìö Risorse utili</h2>\n<ul>\n<li>Paper originale: &ldquo;Efficient Estimation of Word Representations in Vector Space&rdquo; ‚Äì Mikolov et al., 2013</li>\n<li><a href=\"https://radimrehurek.com/gensim/\">Tutorial ufficiale Gensim</a></li>\n<li>Dataset: Google News (300D), Wikipedia, Common Crawl</li>\n</ul>\n<h2 id=\"conclusione\">‚úÖ Conclusione</h2>\n<p>Word2Vec ha rivoluzionato l&rsquo;NLP permettendo una <strong>rappresentazione densa e semantica</strong> delle parole. √à stato il <strong>ponte tra il bag-of-words e i language model profondi</strong>. Comprendere a fondo Word2Vec √® essenziale per chiunque lavori con linguaggio naturale, reti neurali e intelligenza artificiale in generale.</p>\n<p>üìé <em>&ldquo;You shall know a word by the company it keeps&rdquo; ‚Äì J.R. Firth (1957)</em></p>"
}