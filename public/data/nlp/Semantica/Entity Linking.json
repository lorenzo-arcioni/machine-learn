{
  "title": "üß† Entity Linking: Collegare il testo alla conoscenza",
  "content": "<style>pre { line-height: 125%; }\ntd.linenos .normal { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }\nspan.linenos { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }\ntd.linenos .special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }\nspan.linenos.special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }\n.codehilite .hll { background-color: #ffffcc }\n.codehilite { background: #f8f8f8; }\n.codehilite .c { color: #3D7B7B; font-style: italic } /* Comment */\n.codehilite .err { border: 1px solid #F00 } /* Error */\n.codehilite .k { color: #008000; font-weight: bold } /* Keyword */\n.codehilite .o { color: #666 } /* Operator */\n.codehilite .ch { color: #3D7B7B; font-style: italic } /* Comment.Hashbang */\n.codehilite .cm { color: #3D7B7B; font-style: italic } /* Comment.Multiline */\n.codehilite .cp { color: #9C6500 } /* Comment.Preproc */\n.codehilite .cpf { color: #3D7B7B; font-style: italic } /* Comment.PreprocFile */\n.codehilite .c1 { color: #3D7B7B; font-style: italic } /* Comment.Single */\n.codehilite .cs { color: #3D7B7B; font-style: italic } /* Comment.Special */\n.codehilite .gd { color: #A00000 } /* Generic.Deleted */\n.codehilite .ge { font-style: italic } /* Generic.Emph */\n.codehilite .ges { font-weight: bold; font-style: italic } /* Generic.EmphStrong */\n.codehilite .gr { color: #E40000 } /* Generic.Error */\n.codehilite .gh { color: #000080; font-weight: bold } /* Generic.Heading */\n.codehilite .gi { color: #008400 } /* Generic.Inserted */\n.codehilite .go { color: #717171 } /* Generic.Output */\n.codehilite .gp { color: #000080; font-weight: bold } /* Generic.Prompt */\n.codehilite .gs { font-weight: bold } /* Generic.Strong */\n.codehilite .gu { color: #800080; font-weight: bold } /* Generic.Subheading */\n.codehilite .gt { color: #04D } /* Generic.Traceback */\n.codehilite .kc { color: #008000; font-weight: bold } /* Keyword.Constant */\n.codehilite .kd { color: #008000; font-weight: bold } /* Keyword.Declaration */\n.codehilite .kn { color: #008000; font-weight: bold } /* Keyword.Namespace */\n.codehilite .kp { color: #008000 } /* Keyword.Pseudo */\n.codehilite .kr { color: #008000; font-weight: bold } /* Keyword.Reserved */\n.codehilite .kt { color: #B00040 } /* Keyword.Type */\n.codehilite .m { color: #666 } /* Literal.Number */\n.codehilite .s { color: #BA2121 } /* Literal.String */\n.codehilite .na { color: #687822 } /* Name.Attribute */\n.codehilite .nb { color: #008000 } /* Name.Builtin */\n.codehilite .nc { color: #00F; font-weight: bold } /* Name.Class */\n.codehilite .no { color: #800 } /* Name.Constant */\n.codehilite .nd { color: #A2F } /* Name.Decorator */\n.codehilite .ni { color: #717171; font-weight: bold } /* Name.Entity */\n.codehilite .ne { color: #CB3F38; font-weight: bold } /* Name.Exception */\n.codehilite .nf { color: #00F } /* Name.Function */\n.codehilite .nl { color: #767600 } /* Name.Label */\n.codehilite .nn { color: #00F; font-weight: bold } /* Name.Namespace */\n.codehilite .nt { color: #008000; font-weight: bold } /* Name.Tag */\n.codehilite .nv { color: #19177C } /* Name.Variable */\n.codehilite .ow { color: #A2F; font-weight: bold } /* Operator.Word */\n.codehilite .w { color: #BBB } /* Text.Whitespace */\n.codehilite .mb { color: #666 } /* Literal.Number.Bin */\n.codehilite .mf { color: #666 } /* Literal.Number.Float */\n.codehilite .mh { color: #666 } /* Literal.Number.Hex */\n.codehilite .mi { color: #666 } /* Literal.Number.Integer */\n.codehilite .mo { color: #666 } /* Literal.Number.Oct */\n.codehilite .sa { color: #BA2121 } /* Literal.String.Affix */\n.codehilite .sb { color: #BA2121 } /* Literal.String.Backtick */\n.codehilite .sc { color: #BA2121 } /* Literal.String.Char */\n.codehilite .dl { color: #BA2121 } /* Literal.String.Delimiter */\n.codehilite .sd { color: #BA2121; font-style: italic } /* Literal.String.Doc */\n.codehilite .s2 { color: #BA2121 } /* Literal.String.Double */\n.codehilite .se { color: #AA5D1F; font-weight: bold } /* Literal.String.Escape */\n.codehilite .sh { color: #BA2121 } /* Literal.String.Heredoc */\n.codehilite .si { color: #A45A77; font-weight: bold } /* Literal.String.Interpol */\n.codehilite .sx { color: #008000 } /* Literal.String.Other */\n.codehilite .sr { color: #A45A77 } /* Literal.String.Regex */\n.codehilite .s1 { color: #BA2121 } /* Literal.String.Single */\n.codehilite .ss { color: #19177C } /* Literal.String.Symbol */\n.codehilite .bp { color: #008000 } /* Name.Builtin.Pseudo */\n.codehilite .fm { color: #00F } /* Name.Function.Magic */\n.codehilite .vc { color: #19177C } /* Name.Variable.Class */\n.codehilite .vg { color: #19177C } /* Name.Variable.Global */\n.codehilite .vi { color: #19177C } /* Name.Variable.Instance */\n.codehilite .vm { color: #19177C } /* Name.Variable.Magic */\n.codehilite .il { color: #666 } /* Literal.Number.Integer.Long */\n\n/* Styling per blocchi di codice */\n.codehilite {\n    background: transparent !important;\n    border-radius: 8px;\n    overflow: hidden;\n}\n.codehilite pre {\n    background: transparent !important;\n    margin: 0 !important;\n    padding: 20px !important;\n    font-family: 'Monaco', 'Menlo', 'Consolas', monospace !important;\n    font-size: 14px !important;\n    line-height: 1.5 !important;\n    white-space: pre !important;\n    overflow-x: auto !important;\n    color: inherit !important;\n}\n.codehilite code {\n    background: transparent !important;\n    padding: 0 !important;\n    font-family: inherit !important;\n}\n\n\n.code-wrapper { \n    position: relative; \n}\n.copy-button {\n    position: absolute; \n    top: 12px; \n    right: 12px; \n    padding: 6px 12px; \n    font-size: 12px;\n    cursor: pointer; \n    border: none; \n    border-radius: 4px; \n    background: rgba(255,255,255,0.9);\n    color: #374151; \n    transition: all 0.2s ease;\n    font-weight: 500;\n}\n.copy-button:hover { \n    background: rgba(255,255,255,1);\n    transform: translateY(-1px);\n}\n\n\ndetails.code-container {\n    border: 1px solid #e5e7eb; \n    border-radius: 12px; \n    background: #f9fafb;\n    margin: 16px 0;\n    transition: all 0.3s ease;\n}\ndetails.code-container summary {\n    padding: 12px 16px;\n    font-size: 14px; \n    color: #6b7280; \n    cursor: pointer; \n    outline: none; \n    user-select: none;\n    font-weight: 500;\n}\ndetails.code-container[open] summary::after { \n    content: \" (Hide Code)\"; \n    color: #9ca3af; \n}\ndetails.code-container:not([open]) summary::after { \n    content: \" (Show Code)\"; \n    color: #d1d5db; \n}\ndetails.code-container .code-wrapper {\n    padding: 0;\n    margin: 0;\n}\n/* Blocchi di codice sempre visibili */\n.code-visible {\n    border: 1px solid #e5e7eb;\n    border-radius: 12px;\n    background: #f9fafb;\n    margin: 16px 0;\n}\n.code-visible .code-wrapper {\n    padding: 0;\n    margin: 0;\n}\n</style>\n<h2 id=\"cose-lentity-linking\">Cos&rsquo;√® l&rsquo;Entity Linking?</h2>\n<p>L&rsquo;Entity Linking (EL), anche noto come Named Entity Disambiguation (NED), √® una tecnica del Natural Language Processing (NLP) che collega entit√† menzionate in un testo (come persone, luoghi, organizzazioni, ecc.) a entit√† univoche contenute in una base di conoscenza strutturata, come Wikipedia, Wikidata o DBpedia.</p>\n<p>In altre parole, l&rsquo;obiettivo √® riconoscere <strong>a chi o a cosa si riferisce una certa parola o frase</strong> nel testo, e poi <strong>associare quella parola/frase a un&rsquo;entit√† specifica e unica</strong> nella base di conoscenza.</p>\n<h2 id=\"esempio-semplice\">‚úèÔ∏è Esempio semplice</h2>\n<p>Testo:</p>\n<blockquote>\n<p>&ldquo;Paris √® la capitale della Francia.&rdquo;</p>\n</blockquote>\n<p>Qui &ldquo;Paris&rdquo; potrebbe riferirsi:\n- Alla <strong>citt√† di Parigi</strong> üá´üá∑\n- A una <strong>persona di nome Paris</strong> (es. Paris Hilton)\n- A <strong>Paris</strong>, personaggio della mitologia greca üèõÔ∏è</p>\n<p>L&rsquo;Entity Linking aiuta a determinare il significato corretto in base al contesto. In questo caso, &ldquo;Paris&rdquo; viene collegato all&rsquo;entit√† <strong>&ldquo;Parigi (citt√†)&rdquo;</strong> nella base di conoscenza.</p>\n<h2 id=\"fasi-principali-del-processo\">‚öôÔ∏è Fasi principali del processo</h2>\n<ol>\n<li>\n<p><strong>Named Entity Recognition (NER)</strong><br />\n   Identificare nel testo le frasi o parole che potrebbero rappresentare un&rsquo;entit√† (es. &ldquo;Paris&rdquo;, &ldquo;Francia&rdquo;).</p>\n</li>\n<li>\n<p><strong>Candidate Generation</strong><br />\n   Per ogni entit√† trovata, generare una lista di possibili corrispondenze nella base di conoscenza.<br />\n   Esempio: &ldquo;Paris&rdquo; ‚Üí {Parigi (citt√†), Paris Hilton, Paris (mitologia)}.</p>\n</li>\n<li>\n<p><strong>Entity Disambiguation</strong><br />\n   Usare il contesto per scegliere la corrispondenza pi√π corretta tra i candidati.<br />\n   Esempio: la parola &ldquo;capitale&rdquo; vicino a &ldquo;Paris&rdquo; suggerisce che ci si riferisca alla citt√†.</p>\n</li>\n</ol>\n<p><br></p>\n<p><img alt=\"\" src=\"/images/posts/Entity_Linking_-_Example_of_pipeline.png\" /></p>\n<h2 id=\"obiettivo-finale\">üéØ Obiettivo finale</h2>\n<p>Associare ogni menzione nel testo a un identificatore univoco, come una pagina di Wikipedia o un ID in Wikidata.<br />\nQuesto rende il testo <strong>semanticamente arricchito</strong>, permettendo applicazioni pi√π avanzate come:\n- Risposte automatiche a domande\n- Riassunti intelligenti\n- Ricerca semantica</p>\n<h2 id=\"esempi-di-basi-di-conoscenza-usate\">üìö Esempi di basi di conoscenza usate</h2>\n<ul>\n<li><strong>Wikipedia</strong> ‚Üí link a pagine specifiche</li>\n<li><strong>Wikidata</strong> ‚Üí entit√† con ID univoci (es. Q90 per Parigi)</li>\n<li><strong>DBpedia</strong> ‚Üí estrazione strutturata da Wikipedia</li>\n</ul>\n<h2 id=\"differenza-con-named-entity-recognition-ner\">üß© Differenza con Named Entity Recognition (NER)</h2>\n<ul>\n<li>NER si limita a <strong>identificare</strong> e <strong>classificare</strong> le entit√† (es. &ldquo;Paris&rdquo; ‚Üí LOC = luogo)</li>\n<li>EL va oltre: <strong>collega</strong> &ldquo;Paris&rdquo; a una voce unica e specifica in una base di conoscenza</li>\n</ul>\n<h2 id=\"esempio-pratico-con-output-desiderato\">üí° Esempio pratico con output desiderato</h2>\n<p><strong>Testo</strong>:<br />\n&ldquo;Paris √® la capitale della Francia.&rdquo;</p>\n<p><strong>Output di Entity Linking</strong>:\n- &ldquo;Paris&rdquo; ‚Üí <a href=\"https://it.wikipedia.org/wiki/Parigi\">Parigi (citt√†)</a>\n- &ldquo;Francia&rdquo; ‚Üí <a href=\"https://it.wikipedia.org/wiki/Francia\">Francia</a></p>\n<h2 id=\"applicazioni\">üõ†Ô∏è Applicazioni</h2>\n<ul>\n<li>Motori di ricerca pi√π intelligenti</li>\n<li>Sistemi di raccomandazione</li>\n<li>Assistenti vocali</li>\n<li>Analisi di testi giornalistici o scientifici</li>\n</ul>"
}