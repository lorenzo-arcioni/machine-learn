{
  "title": "Untitled",
  "content": "<style>pre { line-height: 125%; }\ntd.linenos .normal { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }\nspan.linenos { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }\ntd.linenos .special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }\nspan.linenos.special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }\n.codehilite .hll { background-color: #ffffcc }\n.codehilite { background: #f8f8f8; }\n.codehilite .c { color: #3D7B7B; font-style: italic } /* Comment */\n.codehilite .err { border: 1px solid #F00 } /* Error */\n.codehilite .k { color: #008000; font-weight: bold } /* Keyword */\n.codehilite .o { color: #666 } /* Operator */\n.codehilite .ch { color: #3D7B7B; font-style: italic } /* Comment.Hashbang */\n.codehilite .cm { color: #3D7B7B; font-style: italic } /* Comment.Multiline */\n.codehilite .cp { color: #9C6500 } /* Comment.Preproc */\n.codehilite .cpf { color: #3D7B7B; font-style: italic } /* Comment.PreprocFile */\n.codehilite .c1 { color: #3D7B7B; font-style: italic } /* Comment.Single */\n.codehilite .cs { color: #3D7B7B; font-style: italic } /* Comment.Special */\n.codehilite .gd { color: #A00000 } /* Generic.Deleted */\n.codehilite .ge { font-style: italic } /* Generic.Emph */\n.codehilite .ges { font-weight: bold; font-style: italic } /* Generic.EmphStrong */\n.codehilite .gr { color: #E40000 } /* Generic.Error */\n.codehilite .gh { color: #000080; font-weight: bold } /* Generic.Heading */\n.codehilite .gi { color: #008400 } /* Generic.Inserted */\n.codehilite .go { color: #717171 } /* Generic.Output */\n.codehilite .gp { color: #000080; font-weight: bold } /* Generic.Prompt */\n.codehilite .gs { font-weight: bold } /* Generic.Strong */\n.codehilite .gu { color: #800080; font-weight: bold } /* Generic.Subheading */\n.codehilite .gt { color: #04D } /* Generic.Traceback */\n.codehilite .kc { color: #008000; font-weight: bold } /* Keyword.Constant */\n.codehilite .kd { color: #008000; font-weight: bold } /* Keyword.Declaration */\n.codehilite .kn { color: #008000; font-weight: bold } /* Keyword.Namespace */\n.codehilite .kp { color: #008000 } /* Keyword.Pseudo */\n.codehilite .kr { color: #008000; font-weight: bold } /* Keyword.Reserved */\n.codehilite .kt { color: #B00040 } /* Keyword.Type */\n.codehilite .m { color: #666 } /* Literal.Number */\n.codehilite .s { color: #BA2121 } /* Literal.String */\n.codehilite .na { color: #687822 } /* Name.Attribute */\n.codehilite .nb { color: #008000 } /* Name.Builtin */\n.codehilite .nc { color: #00F; font-weight: bold } /* Name.Class */\n.codehilite .no { color: #800 } /* Name.Constant */\n.codehilite .nd { color: #A2F } /* Name.Decorator */\n.codehilite .ni { color: #717171; font-weight: bold } /* Name.Entity */\n.codehilite .ne { color: #CB3F38; font-weight: bold } /* Name.Exception */\n.codehilite .nf { color: #00F } /* Name.Function */\n.codehilite .nl { color: #767600 } /* Name.Label */\n.codehilite .nn { color: #00F; font-weight: bold } /* Name.Namespace */\n.codehilite .nt { color: #008000; font-weight: bold } /* Name.Tag */\n.codehilite .nv { color: #19177C } /* Name.Variable */\n.codehilite .ow { color: #A2F; font-weight: bold } /* Operator.Word */\n.codehilite .w { color: #BBB } /* Text.Whitespace */\n.codehilite .mb { color: #666 } /* Literal.Number.Bin */\n.codehilite .mf { color: #666 } /* Literal.Number.Float */\n.codehilite .mh { color: #666 } /* Literal.Number.Hex */\n.codehilite .mi { color: #666 } /* Literal.Number.Integer */\n.codehilite .mo { color: #666 } /* Literal.Number.Oct */\n.codehilite .sa { color: #BA2121 } /* Literal.String.Affix */\n.codehilite .sb { color: #BA2121 } /* Literal.String.Backtick */\n.codehilite .sc { color: #BA2121 } /* Literal.String.Char */\n.codehilite .dl { color: #BA2121 } /* Literal.String.Delimiter */\n.codehilite .sd { color: #BA2121; font-style: italic } /* Literal.String.Doc */\n.codehilite .s2 { color: #BA2121 } /* Literal.String.Double */\n.codehilite .se { color: #AA5D1F; font-weight: bold } /* Literal.String.Escape */\n.codehilite .sh { color: #BA2121 } /* Literal.String.Heredoc */\n.codehilite .si { color: #A45A77; font-weight: bold } /* Literal.String.Interpol */\n.codehilite .sx { color: #008000 } /* Literal.String.Other */\n.codehilite .sr { color: #A45A77 } /* Literal.String.Regex */\n.codehilite .s1 { color: #BA2121 } /* Literal.String.Single */\n.codehilite .ss { color: #19177C } /* Literal.String.Symbol */\n.codehilite .bp { color: #008000 } /* Name.Builtin.Pseudo */\n.codehilite .fm { color: #00F } /* Name.Function.Magic */\n.codehilite .vc { color: #19177C } /* Name.Variable.Class */\n.codehilite .vg { color: #19177C } /* Name.Variable.Global */\n.codehilite .vi { color: #19177C } /* Name.Variable.Instance */\n.codehilite .vm { color: #19177C } /* Name.Variable.Magic */\n.codehilite .il { color: #666 } /* Literal.Number.Integer.Long */\n\n/* Styling per blocchi di codice */\n.codehilite {\n    background: transparent !important;\n    border-radius: 8px;\n    overflow: hidden;\n}\n.codehilite pre {\n    background: transparent !important;\n    margin: 0 !important;\n    padding: 20px !important;\n    font-family: 'Monaco', 'Menlo', 'Consolas', monospace !important;\n    font-size: 14px !important;\n    line-height: 1.5 !important;\n    white-space: pre !important;\n    overflow-x: auto !important;\n    color: inherit !important;\n}\n.codehilite code {\n    background: transparent !important;\n    padding: 0 !important;\n    font-family: inherit !important;\n}\n\n\n.code-wrapper { \n    position: relative; \n}\n.copy-button {\n    position: absolute; \n    top: 12px; \n    right: 12px; \n    padding: 6px 12px; \n    font-size: 12px;\n    cursor: pointer; \n    border: none; \n    border-radius: 4px; \n    background: rgba(255,255,255,0.9);\n    color: #374151; \n    transition: all 0.2s ease;\n    font-weight: 500;\n}\n.copy-button:hover { \n    background: rgba(255,255,255,1);\n    transform: translateY(-1px);\n}\n\n\ndetails.code-container {\n    border: 1px solid #e5e7eb; \n    border-radius: 12px; \n    background: #f9fafb;\n    margin: 16px 0;\n    transition: all 0.3s ease;\n}\ndetails.code-container summary {\n    padding: 12px 16px;\n    font-size: 14px; \n    color: #6b7280; \n    cursor: pointer; \n    outline: none; \n    user-select: none;\n    font-weight: 500;\n}\ndetails.code-container[open] summary::after { \n    content: \" (Hide Code)\"; \n    color: #9ca3af; \n}\ndetails.code-container:not([open]) summary::after { \n    content: \" (Show Code)\"; \n    color: #d1d5db; \n}\ndetails.code-container .code-wrapper {\n    padding: 0;\n    margin: 0;\n}\n/* Blocchi di codice sempre visibili */\n.code-visible {\n    border: 1px solid #e5e7eb;\n    border-radius: 12px;\n    background: #f9fafb;\n    margin: 16px 0;\n}\n.code-visible .code-wrapper {\n    padding: 0;\n    margin: 0;\n}\n</style>\n<hr />\n<p>aliases: [Modelli di Backoff, Stupid Backoff, Katz Backoff]\ntags: [nlp, modelli-linguistici, smoothing]</p>\n<hr />\n<h1 id=\"modelli-di-backoff-nella-modellazione-linguistica-con-math_inline_18-grammi\">Modelli di Backoff nella Modellazione Linguistica con $N$-grammi</h1>\n<h2 id=\"panoramica\">Panoramica</h2>\n<p>I modelli di backoff sono un&rsquo;alternativa all&rsquo;<a href=\"/theory/nlp/Modelli di Linguaggio/Interpolazione Lineare nei Modelli Linguistici\" class=\"text-blue-600 hover:underline\">interpolazione</a> per gestire dati sparsi nei modelli linguistici basati su $n$-grammi. A differenza dell&rsquo;interpolazione (che combina le probabilità di tutti gli ordini di $n$-grammi), il backoff utilizza $n$-grammi di ordine inferiore <strong>solo quando i conteggi di ordine superiore sono zero</strong>. Due varianti principali sono lo <strong>Stupid Backoff</strong> e il <strong>Katz Backoff</strong>.</p>\n<h2 id=\"1-backoff-vs-interpolazione\">1. Backoff vs Interpolazione</h2>\n<table>\n<thead>\n<tr>\n<th>Caratteristica</th>\n<th>Interpolazione</th>\n<th>Backoff</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Strategia</strong></td>\n<td>Combina tutti gli ordini di $n$-grammi</td>\n<td>Usa ordini inferiori solo se necessario</td>\n</tr>\n<tr>\n<td><strong>Massa Probabilistica</strong></td>\n<td>Richiede pesatura</td>\n<td>Richiede sconto (tranne Stupid Backoff)</td>\n</tr>\n<tr>\n<td><strong>Complessità</strong></td>\n<td>Computazionalmente pesante</td>\n<td>Ricorsione semplice</td>\n</tr>\n<tr>\n<td><strong>Validità Teorica</strong></td>\n<td>Distribuzione vera</td>\n<td>Stupid Backoff non è distribuzione vera</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"2-stupid-backoff-brants-et-al-2007\">2. Stupid Backoff (Brants et al., 2007)</h2>\n<h3 id=\"idea-generale\">Idea Generale</h3>\n<ul>\n<li><strong>Non basato su probabilità</strong>: Il metodo sacrifica la normalizzazione della distribuzione a favore della semplicità computazionale.</li>\n<li><strong>Nessun sconto sui conteggi</strong>: Gli $n$-grammi di ordine superiore usano i conteggi originali.</li>\n<li><strong>Peso fisso nel backoff</strong>: Se non viene trovato un $n$-gramma con conteggio positivo, si applica un peso costante (es. $\\lambda = 0.4$) per passare al modello di ordine inferiore.</li>\n</ul>\n<h3 id=\"la-formula\">La Formula</h3>\n<p>Per un modello $N$-grammi:\n$$\n\\mathbb S(w_i | w^{i-1}_{i-N+1}) =\n\\begin{cases}\n\\frac{\\text{count}(w_{i-N+1}^{i})}{\\text{count}(w^{i-1}_{i-N+1})} & \\text{se } \\text{count}(w_{i-N+1}^{i-1}) > 0, \\\\\n\\lambda \\cdot \\mathbb S(w_i | w_{i-N+2}^{i-1}) & \\text{altrimenti.}\n\\end{cases}\n$$</p>\n<p>Notiamo che, non essendo una probabilità, utilizziamo una funzione $\\mathbb S$ invece della $\\mathbb P$.</p>\n<h3 id=\"esempio-pratico\">Esempio Pratico</h3>\n<p>Testo: <code>\"I love natural language processing\"</code></p>\n<p>Supponiamo di avere i seguenti conteggi:\n- $\\text{count}(\\text{\"natural language processing\"}) = 2$\n- $\\text{count}(\\text{\"natural language\"}) = 5$\n- $\\text{count}(\\text{\"language processing\"}) = 3$\n- $\\text{count}(\\text{\"language\"}) = 10$\n- $\\text{count}(\\text{\"processing\"}) = 4$\n- Totale parole = 1000\n- $\\lambda = 0.4$</p>\n<p>Calcoliamo $S(\\text{\"processing\"} | \\text{\"natural language\"})$, abbiamo principalmente 3 casi:</p>\n<ol>\n<li>\n<p><strong>Trigramma presente</strong>:\n   $$\n   S(\\text{\"processing\"} | \\text{\"natural language\"}) = \\frac{2}{5} = 0.4\n   $$</p>\n</li>\n<li>\n<p><strong>Trigramma assente</strong>:\n   Supponiamo che il trigramma manchi. Allora passiamo al bigramma:\n   $$\n   S(\\text{\"processing\"} | \\text{\"natural language\"}) = \\lambda \\cdot \\mathbb S(\\text{\"processing\"} | \\text{\"language\"}) = 0.4 \\cdot \\frac{3}{10} = 0.4 \\cdot 0.3 = 0.12\n   $$</p>\n</li>\n<li>\n<p><strong>Anche il bigramma è assente?</strong><br />\n   Si fa backoff all’unigramma:\n   $$\n    S(\\text{\"processing\"} | \\text{\"natural language\"}) = \\lambda \\cdot (\\lambda \\cdot \\mathbb S(\\text{\"processing\"})) = \\lambda^2 \\cdot \\mathbb S(\\text{\"processing\"}) = (0.4)^2 \\cdot \\frac{4}{1000} = 0.00064\n   $$</p>\n</li>\n</ol>\n<h3 id=\"perche-stupid\">Perché &ldquo;Stupid&rdquo;?</h3>\n<ul>\n<li><strong>Non normalizzato</strong>: La somma $\\sum S(w_i | \\text{contesto})$ non equivale a 1, venendo così considerato un metodo di pseudo-probabilità.</li>\n<li><strong>Efficienza computazionale</strong>: È particolarmente adatto per task su larga scala (ad esempio, nei modelli di Google) grazie alla sua semplicità.</li>\n</ul>\n<h2 id=\"3-katz-backoff-katz-1987\">3. Katz Backoff (Katz, 1987)</h2>\n<h3 id=\"idea-generale_1\">Idea Generale</h3>\n<ul>\n<li><strong>Sconto dei conteggi</strong>: Riserva una parte della massa probabilistica per eventi non osservati, riducendo i conteggi osservati (es. con <a href=\"/theory/nlp/Modelli di Linguaggio/Smoothing nei Modelli Linguistici\" class=\"text-blue-600 hover:underline\">Good-Turing discounting</a>).</li>\n<li><strong>Retrocessione condizionata</strong>: Si applica il backoff solo se il conteggio dell&rsquo;$n$-gramma corrente è zero.</li>\n<li><strong>Distribuzione di probabilità valida</strong>: Garantisce $0 \\leq P_{\\text{Katz}}(w_i | \\text{contesto}) \\leq 1$ e la somma di $P_{\\text{Katz}}(w_i | \\text{contesto})$ su tutti i $w_i$ è 1.</li>\n</ul>\n<blockquote>\n<p>In altre parole, se si utilizza una stima MLE e $P_{\\text{Katz}}(w_i | \\text{contesto}) = 0$, viene definita:\n$$\n> P_{\\text{Katz}}(w_i | \\text{contesto}) = \\alpha \\cdot P_{\\text{Katz}}(w_i | \\text{contesto ridotto}),\n> $$\ndove $\\alpha$ è il peso di backoff.</p>\n</blockquote>\n<h3 id=\"la-formula_1\">La Formula</h3>\n<p>Per un modello $N$-grammi:\n$$\nP_{\\text{Katz}}(w_i | w_{i-N+1}^{i-1}) =\n\\begin{cases}\nP^*(w_i | w^{i-1}_{i-N+1}) & \\text{se } \\text{count}(w^{i-1}_{i-N+1}) > 0, \\\\\n\\alpha(w^{i-1}_{i-N+1}) \\cdot P_{\\text{Katz}}(w_i | w^{i-1}_{i-N+2}) & \\text{altrimenti.}\n\\end{cases}\n$$</p>\n<h3 id=\"componenti-fondamentali\">Componenti Fondamentali</h3>\n<ol>\n<li><strong>Probabilità Scontata ($P^*$)</strong><br />\n   Utilizza tecniche, come il <strong>Good-Turing discounting</strong>, per ridurre il conteggio:\n   $$\n   P^*(w_i | w^{i-1}_{i-N+1}) = P_{\\text{GT}}(w_i | w^{i-1}_{i-N+1}) = \\frac{k^*}{\\text{count}(w^{i-1}_{i-N+1})},\n   $$\n   dove:</li>\n<li>$k = \\text{count}(w^{i-1}_{i-N+1}, w_i)$ è il conteggio dell&rsquo;$n$-gramma osservato.</li>\n<li>$k^*$ è il conteggio corretto ottenuto tramite Good-Turing:\n     $$\n     k^* = \\frac{(k+1) \\cdot N_{k+1}}{N_k},\n     $$\n     con $N_k$ che indica il numero di $n$-grammi che appaiono esattamente $k$ volte.</li>\n<li>$\\text{count}(w^{i-1}_{i-N+1})$ è il numero totale di occorrenze del contesto $w^{i-1}_{i-N+1}$.</li>\n</ol>\n<p>L&rsquo;approccio Good-Turing permette di ridurre il valore dei conteggi osservati per &ldquo;riservare&rdquo; la massa probabilistica per gli eventi non osservati, migliorando la stima delle probabilità specialmente per eventi rari.</p>\n<ol>\n<li><strong>Peso di Backoff ($\\alpha$)</strong><br />\n   Quando il conteggio per un certo $n$-gramma è pari a zero, il modello Katz effettua il backoff a un contesto di ordine inferiore. Per assicurare la validità della distribuzione di probabilità, la massa residua (cioè quella riservata dopo lo sconto) viene redistribuita utilizzando il coefficiente di backoff $\\alpha$. Esso viene calcolato in modo da garantire:\n   $$\n   \\sum_{w_i} P_{\\text{Katz}}(w_i | w^{i-1}_{i-N+1}) = 1.\n   $$\n   In pratica, $\\alpha(w^{i-1}_{i-N+1})$ normalizza la probabilità totale assegnata agli $n$-grammi non osservati in modo coerente con la massa scontata.</li>\n</ol>\n<h3 id=\"dimostrazione-della-normalizzazione\">Dimostrazione della Normalizzazione</h3>\n<p>Per dimostrare che il modello Katz Backoff produce una distribuzione di probabilità valida, ovvero che la somma delle probabilità assegnate a tutti i possibili $w_i$ è 1, consideriamo la seguente suddivisione:</p>\n<ol>\n<li>\n<p><strong>$n$-grammi osservati</strong>:<br />\n   Per gli $n$-grammi tali che $\\text{count}(w^{i-1}_{i-N+1}, w_i) > 0$, il modello assegna la probabilità scontata:\n   $$\n   \\sum_{w_i: \\, \\text{count}>0} P^*(w_i | w^{i-1}_{i-N+1}).\n   $$</p>\n</li>\n<li>\n<p><strong>$n$-grammi non osservati</strong>:<br />\n   Per gli $n$-grammi con conteggio pari a zero, il modello utilizza il backoff:\n   $$\n   \\sum_{w_i: \\, \\text{count}=0} \\alpha(w^{i-1}_{i-N+1}) \\cdot P_{\\text{Katz}}(w_i | w^{i-1}_{i-N+2}).\n   $$</p>\n</li>\n</ol>\n<p>Il coefficiente $\\alpha(w^{i-1}_{i-N+1})$ viene calcolato in modo tale da &ldquo;riempire&rdquo; la massa probabilistica che manca, ossia:\n$$\n\\alpha(w^{i-1}_{i-N+1}) = \\frac{1 - \\sum_{w_i: \\, \\text{count}>0} P^*(w_i | w^{i-1}_{i-N+1})}{\\sum_{w_i: \\, \\text{count}=0} P_{\\text{Katz}}(w_i | w^{i-1}_{i-N+2})}.\n$$</p>\n<p>Sostituendo questa definizione nel sommario complessivo delle probabilità, otteniamo:\n$$\n\\begin{aligned}\n\\sum_{w_i} P_{\\text{Katz}}(w_i | w^{i-1}_{i-N+1}) &= \\sum_{w_i: \\, \\text{count}>0} P^*(w_i | w^{i-1}_{i-N+1}) \\\\\n&\\quad + \\alpha(w^{i-1}_{i-N+1}) \\sum_{w_i: \\, \\text{count}=0} P_{\\text{Katz}}(w_i | w^{i-1}_{i-N+2}) \\\\\n&= \\sum_{w_i: \\, \\text{count}>0} P^*(w_i | w^{i-1}_{i-N+1}) + \\left( 1 - \\sum_{w_i: \\, \\text{count}>0} P^*(w_i | w^{i-1}_{i-N+1}) \\right) \\\\\n&= 1.\n\\end{aligned}\n$$</p>\n<p>Questa dimostrazione evidenzia che, grazie alla corretta scelta di $\\alpha(w^{i-1}_{i-N+1})$, la massa di probabilità totale è redistribuita in modo tale da garantire che la somma delle probabilità su tutti i possibili $w_i$ sia esattamente 1. $\\square$</p>\n<h3 id=\"esempio-pratico_1\">Esempio Pratico</h3>\n<h4 id=\"1-probabilita-scontata-math_inline_68\">1. Probabilità Scontata ($P^*$)</h4>\n<p>Usiamo Good-Turing:</p>\n<p>Supponiamo:\n- $\\text{count}(\\text{\"natural language processing\"}) = 2$\n- $\\text{count}(\\text{\"natural language\"}) = 5$\n- Sconto $d = 0.5$</p>\n<p>Allora:\n$$\nP^*(\\text{\"processing\"} | \\text{\"natural language\"}) =\n\\frac{2 - 0.5}{5} = \\frac{1.5}{5} = 0.3\n$$</p>\n<h4 id=\"2-peso-di-backoff-math_inline_72\">2. Peso di Backoff ($\\alpha$)</h4>\n<p>Supponiamo:\n- Sono stati osservati 3 parole diverse dopo “natural language” con:\n  - $P^*(\\text{\"processing\"}) = 0.3$\n  - $P^*(\\text{\"generation\"}) = 0.2$\n  - $P^*(\\text{\"understanding\"}) = 0.1$\n  - Totale $\\sum P^* = 0.6$</p>\n<ul>\n<li>E i corrispondenti backoff al bigramma danno:</li>\n<li>$P_{\\text{Katz}}(\\text{\"processing\"} | \\text{\"language\"}) = 0.2$</li>\n<li>$P_{\\text{Katz}}(\\text{\"generation\"} | \\text{\"language\"}) = 0.1$</li>\n<li>$P_{\\text{Katz}}(\\text{\"understanding\"} | \\text{\"language\"}) = 0.1$</li>\n<li>Totale $\\sum = 0.4$</li>\n</ul>\n<p>Allora:\n$$\n\\alpha(\\text{\"natural language\"}) = \\frac{1 - 0.6}{1 - 0.4} = \\frac{0.4}{0.6} \\approx 0.667\n$$</p>\n<h4 id=\"backoff-finale\">Backoff Finale</h4>\n<p>Supponiamo che $\\text{count}(\\text{\"natural language processing\"}) = 0$, allora:\n$$\nP_{\\text{Katz}}(\\text{\"processing\"} | \\text{\"natural language\"}) = \\alpha(\\text{\"natural language\"}) \\cdot P_{\\text{Katz}}(\\text{\"processing\"} | \\text{\"language\"}) = 0.667 \\cdot 0.2 = 0.133\n$$</p>\n<h2 id=\"4-dettagli-matematici-e-parametri\">4. Dettagli Matematici e Parametri</h2>\n<h3 id=\"peso-nel-stupid-backoff\">Peso nel Stupid Backoff</h3>\n<ul>\n<li><strong>Esempio</strong><br />\n  Con $\\lambda = 0.4$, per passare da trigrammi a bigrammi:\n  $$\n  S(w_i | w_{i-2}, w_{i-1}) = 0.4 \\cdot \\frac{\\text{count}(w_{i-1}, w_i)}{\\text{count}(w_{i-1})}.\n  $$</li>\n</ul>\n<h3 id=\"sconto-nel-katz-backoff-good-turing\">Sconto nel Katz Backoff (Good-Turing)</h3>\n<ul>\n<li><strong>Esempio</strong><br />\n  Supponiamo di avere 10 trigrammi con conteggio 1 e 5 trigrammi con conteggio 2; la massa riservata per i trigrammi non osservati si può approssimare con:\n  $$\n  \\frac{n_1}{\\text{Totale trigrammi}} = \\frac{10}{\\text{Totale trigrammi}}.\n  $$</li>\n</ul>\n<h2 id=\"5-confronto-tra-i-metodi-di-backoff\">5. Confronto tra i Metodi di Backoff</h2>\n<table>\n<thead>\n<tr>\n<th><strong>Caratteristica</strong></th>\n<th><strong>Stupid Backoff</strong></th>\n<th><strong>Katz Backoff</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Validità Teorica</strong></td>\n<td>No (si ottengono pseudo-probabilità)</td>\n<td>Sì (garantisce una distribuzione valida)</td>\n</tr>\n<tr>\n<td><strong>Metodo di Sconto</strong></td>\n<td>Nessuno (si usano i conteggi originali)</td>\n<td>Applica sconti (es. Good-Turing)</td>\n</tr>\n<tr>\n<td><strong>Applicazioni</strong></td>\n<td>Task su larga scala, alta velocità</td>\n<td>Situazioni in cui è necessaria precisione</td>\n</tr>\n<tr>\n<td><strong>Implementazione</strong></td>\n<td>Semplice (peso fisso $\\lambda$)</td>\n<td>Più complessa (calcolo di $\\alpha$ e sconti)</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"6-conclusione\">6. Conclusione</h2>\n<p>Il backoff rappresenta una soluzione efficace per gestire la sparsità dei dati nei modelli linguistici basati su nn-grammi, bilanciando complessità computazionale e accuratezza teorica.</p>\n<ul>\n<li>\n<p><strong>Stupid Backoff</strong> si distingue per la semplicità e l’efficienza, rendendolo ideale per applicazioni su larga scala (es. motori di ricerca) dove la velocità è prioritaria. Tuttavia, la mancata normalizzazione lo rende inadatto a contesti che richiedono distribuzioni di probabilità rigorose.</p>\n</li>\n<li>\n<p><strong>Katz Backoff</strong>, grazie allo sconto probabilistico e al calcolo del peso $\\alpha$, garantisce una distribuzione valida, sacrificando parte dell’efficienza computazionale. È preferibile in scenari dove la precisione teorica è critica, come nella generazione di testo o nel calcolo di perplexity.</p>\n</li>\n</ul>\n<p>La scelta tra i due metodi dipende dagli obiettivi specifici:</p>\n<ul>\n<li>\n<p>Priorità alla velocità e scalabilità: Optare per Stupid Backoff con $\\lambda$ fisso.</p>\n</li>\n<li>\n<p>Priorità alla correttezza statistica: Utilizzare Katz Backoff con sconti come Good-Turing.</p>\n</li>\n</ul>\n<p>In ultima analisi, entrambi i metodi evidenziano un principio fondamentale nella modellazione linguistica: l’equilibrio tra flessibilità e rigore matematico, cruciale per affrontare le sfide poste dai dati sparsi e dal trade-off bias-varianza.</p>"
}