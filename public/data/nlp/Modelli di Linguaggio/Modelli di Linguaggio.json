{
  "title": "Modelli di Linguaggio",
  "content": "<style>pre { line-height: 125%; }\ntd.linenos .normal { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }\nspan.linenos { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }\ntd.linenos .special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }\nspan.linenos.special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }\n.codehilite .hll { background-color: #ffffcc }\n.codehilite { background: #f8f8f8; }\n.codehilite .c { color: #3D7B7B; font-style: italic } /* Comment */\n.codehilite .err { border: 1px solid #F00 } /* Error */\n.codehilite .k { color: #008000; font-weight: bold } /* Keyword */\n.codehilite .o { color: #666 } /* Operator */\n.codehilite .ch { color: #3D7B7B; font-style: italic } /* Comment.Hashbang */\n.codehilite .cm { color: #3D7B7B; font-style: italic } /* Comment.Multiline */\n.codehilite .cp { color: #9C6500 } /* Comment.Preproc */\n.codehilite .cpf { color: #3D7B7B; font-style: italic } /* Comment.PreprocFile */\n.codehilite .c1 { color: #3D7B7B; font-style: italic } /* Comment.Single */\n.codehilite .cs { color: #3D7B7B; font-style: italic } /* Comment.Special */\n.codehilite .gd { color: #A00000 } /* Generic.Deleted */\n.codehilite .ge { font-style: italic } /* Generic.Emph */\n.codehilite .ges { font-weight: bold; font-style: italic } /* Generic.EmphStrong */\n.codehilite .gr { color: #E40000 } /* Generic.Error */\n.codehilite .gh { color: #000080; font-weight: bold } /* Generic.Heading */\n.codehilite .gi { color: #008400 } /* Generic.Inserted */\n.codehilite .go { color: #717171 } /* Generic.Output */\n.codehilite .gp { color: #000080; font-weight: bold } /* Generic.Prompt */\n.codehilite .gs { font-weight: bold } /* Generic.Strong */\n.codehilite .gu { color: #800080; font-weight: bold } /* Generic.Subheading */\n.codehilite .gt { color: #04D } /* Generic.Traceback */\n.codehilite .kc { color: #008000; font-weight: bold } /* Keyword.Constant */\n.codehilite .kd { color: #008000; font-weight: bold } /* Keyword.Declaration */\n.codehilite .kn { color: #008000; font-weight: bold } /* Keyword.Namespace */\n.codehilite .kp { color: #008000 } /* Keyword.Pseudo */\n.codehilite .kr { color: #008000; font-weight: bold } /* Keyword.Reserved */\n.codehilite .kt { color: #B00040 } /* Keyword.Type */\n.codehilite .m { color: #666 } /* Literal.Number */\n.codehilite .s { color: #BA2121 } /* Literal.String */\n.codehilite .na { color: #687822 } /* Name.Attribute */\n.codehilite .nb { color: #008000 } /* Name.Builtin */\n.codehilite .nc { color: #00F; font-weight: bold } /* Name.Class */\n.codehilite .no { color: #800 } /* Name.Constant */\n.codehilite .nd { color: #A2F } /* Name.Decorator */\n.codehilite .ni { color: #717171; font-weight: bold } /* Name.Entity */\n.codehilite .ne { color: #CB3F38; font-weight: bold } /* Name.Exception */\n.codehilite .nf { color: #00F } /* Name.Function */\n.codehilite .nl { color: #767600 } /* Name.Label */\n.codehilite .nn { color: #00F; font-weight: bold } /* Name.Namespace */\n.codehilite .nt { color: #008000; font-weight: bold } /* Name.Tag */\n.codehilite .nv { color: #19177C } /* Name.Variable */\n.codehilite .ow { color: #A2F; font-weight: bold } /* Operator.Word */\n.codehilite .w { color: #BBB } /* Text.Whitespace */\n.codehilite .mb { color: #666 } /* Literal.Number.Bin */\n.codehilite .mf { color: #666 } /* Literal.Number.Float */\n.codehilite .mh { color: #666 } /* Literal.Number.Hex */\n.codehilite .mi { color: #666 } /* Literal.Number.Integer */\n.codehilite .mo { color: #666 } /* Literal.Number.Oct */\n.codehilite .sa { color: #BA2121 } /* Literal.String.Affix */\n.codehilite .sb { color: #BA2121 } /* Literal.String.Backtick */\n.codehilite .sc { color: #BA2121 } /* Literal.String.Char */\n.codehilite .dl { color: #BA2121 } /* Literal.String.Delimiter */\n.codehilite .sd { color: #BA2121; font-style: italic } /* Literal.String.Doc */\n.codehilite .s2 { color: #BA2121 } /* Literal.String.Double */\n.codehilite .se { color: #AA5D1F; font-weight: bold } /* Literal.String.Escape */\n.codehilite .sh { color: #BA2121 } /* Literal.String.Heredoc */\n.codehilite .si { color: #A45A77; font-weight: bold } /* Literal.String.Interpol */\n.codehilite .sx { color: #008000 } /* Literal.String.Other */\n.codehilite .sr { color: #A45A77 } /* Literal.String.Regex */\n.codehilite .s1 { color: #BA2121 } /* Literal.String.Single */\n.codehilite .ss { color: #19177C } /* Literal.String.Symbol */\n.codehilite .bp { color: #008000 } /* Name.Builtin.Pseudo */\n.codehilite .fm { color: #00F } /* Name.Function.Magic */\n.codehilite .vc { color: #19177C } /* Name.Variable.Class */\n.codehilite .vg { color: #19177C } /* Name.Variable.Global */\n.codehilite .vi { color: #19177C } /* Name.Variable.Instance */\n.codehilite .vm { color: #19177C } /* Name.Variable.Magic */\n.codehilite .il { color: #666 } /* Literal.Number.Integer.Long */\n\n/* Styling per blocchi di codice */\n.codehilite {\n    background: transparent !important;\n    border-radius: 8px;\n    overflow: hidden;\n}\n.codehilite pre {\n    background: transparent !important;\n    margin: 0 !important;\n    padding: 20px !important;\n    font-family: 'Monaco', 'Menlo', 'Consolas', monospace !important;\n    font-size: 14px !important;\n    line-height: 1.5 !important;\n    white-space: pre !important;\n    overflow-x: auto !important;\n    color: inherit !important;\n}\n.codehilite code {\n    background: transparent !important;\n    padding: 0 !important;\n    font-family: inherit !important;\n}\n\n\n.code-wrapper { \n    position: relative; \n}\n.copy-button {\n    position: absolute; \n    top: 12px; \n    right: 12px; \n    padding: 6px 12px; \n    font-size: 12px;\n    cursor: pointer; \n    border: none; \n    border-radius: 4px; \n    background: rgba(255,255,255,0.9);\n    color: #374151; \n    transition: all 0.2s ease;\n    font-weight: 500;\n}\n.copy-button:hover { \n    background: rgba(255,255,255,1);\n    transform: translateY(-1px);\n}\n\n\ndetails.code-container {\n    border: 1px solid #e5e7eb; \n    border-radius: 12px; \n    background: #f9fafb;\n    margin: 16px 0;\n    transition: all 0.3s ease;\n}\ndetails.code-container summary {\n    padding: 12px 16px;\n    font-size: 14px; \n    color: #6b7280; \n    cursor: pointer; \n    outline: none; \n    user-select: none;\n    font-weight: 500;\n}\ndetails.code-container[open] summary::after { \n    content: \" (Hide Code)\"; \n    color: #9ca3af; \n}\ndetails.code-container:not([open]) summary::after { \n    content: \" (Show Code)\"; \n    color: #d1d5db; \n}\ndetails.code-container .code-wrapper {\n    padding: 0;\n    margin: 0;\n}\n</style>\n<p>I modelli di linguaggio sono sistemi di intelligenza artificiale addestrati per comprendere, generare e manipolare il linguaggio umano. Utilizzano architetture avanzate (come i <strong><span class=\"text-gray-600\">transformers</span></strong>) per prevedere sequenze di parole o caratteri basandosi sul contesto. In particolare, sono distribuzioni probabilistiche sulle sequenze di parole, che permettono di prevedere il prossimo token in base al contesto precedente.</p>\n<p>Per un approfondimento sui linguaggi, <span class=\"text-gray-600\">qui</span>.</p>\n<h2 id=\"perche-distribuzioni-probabilistiche\">Perch√© Distribuzioni Probabilistiche?</h2>\n<h3 id=\"limiti-delle-grammatiche-formali\">Limiti delle Grammatiche Formali</h3>\n<ul>\n<li><strong>Modelli &ldquo;Binari&rdquo;</strong>:<br />\n  Le grammatiche formali (es. regolari, context-free) definiscono regole rigide per determinare se una frase √® <em>legal</em> o meno in una lingua (approccio <strong>0/1</strong>).<br />\n  ‚Üí <strong>Problema</strong>: Il linguaggio naturale √® ambiguo, flessibile e dipendente dal contesto.<br />\n  Esempio: <em>&ldquo;Leggo un libro sul volo&rdquo;</em> pu√≤ essere interpretato in modo diverso (lettura <em>su</em> un argomento vs. lettura <em>fisicamente sopra</em> un oggetto).</li>\n</ul>\n<h3 id=\"vantaggi-dei-modelli-probabilistici\">Vantaggi dei Modelli Probabilistici</h3>\n<ol>\n<li>\n<p><strong>Gestione dell&rsquo;incertezza</strong>:<br />\n   Assegnano una <strong>probabilit√†</strong> a ogni frase/stringa, riflettendo la sua &ldquo;naturalezza&rdquo; o plausibilit√† nel contesto reale.<br />\n   ‚Üí Utile per: disambiguazione, ranking di ipotesi, generazione fluida.</p>\n</li>\n<li>\n<p><strong>Adattabilit√† al mondo reale</strong>:  </p>\n</li>\n<li>Modellano variazioni linguistiche (dialetti, errori ortografici, slang).  </li>\n<li>\n<p>Tengono conto di correlazioni statistiche tra parole (es. <em>&ldquo;caff√®&rdquo;</em> ‚Üí alta probabilit√† di <em>&ldquo;bere&rdquo;</em> o <em>&ldquo;tazzina&rdquo;</em>).</p>\n</li>\n<li>\n<p><strong>Fondamento per NLP moderno</strong>:<br />\n   Consentono di:  </p>\n</li>\n<li>Addestrare modelli su corpora non perfetti (es. web text con rumore).  </li>\n<li>Ottimizzare task come traduzione o riconoscimento vocale tramite massimizzazione della likelihood.</li>\n</ol>\n<blockquote>\n<p>üìä <strong>Esempio Pratico</strong>:<br />\nUn modello probabilistico pu√≤ assegnare:<br />\n- P(<em>&ldquo;Il gatto corre sul tetto&rdquo;</em>) = 0.85<br />\n- P(<em>&ldquo;Il tetto corre sul gatto&rdquo;</em>) = 0.02<br />\nPur essendo entrambe frasi <em>sintatticamente corrette</em>, la probabilit√† riflette la plausibilit√† semantica.</p>\n</blockquote>\n<h3 id=\"confronto-chiave\">Confronto Chiave</h3>\n<table>\n<thead>\n<tr>\n<th><strong>Approccio</strong></th>\n<th>Grammatiche Formali</th>\n<th>Modelli Probabilistici</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Output</strong></td>\n<td>Binario (accetta/rigetta)</td>\n<td>Probabilit√† continua</td>\n</tr>\n<tr>\n<td><strong>Flessibilit√†</strong></td>\n<td>Bassa (regole fisse)</td>\n<td>Alta (apprendimento dati)</td>\n</tr>\n<tr>\n<td><strong>Gestione Ambiguit√†</strong></td>\n<td>Limitata</td>\n<td>Ottimizzata</td>\n</tr>\n<tr>\n<td><strong>Use Case</strong></td>\n<td>Compilatori, parser semplici</td>\n<td>NLP, generazione testo</td>\n</tr>\n</tbody>\n</table>\n<p>Prima di proseguire, √® bene aver compreso a pieno le <a href=\"/theory/math-for-ml/Probabilit√†/Basi di Probabilit√†\" class=\"text-blue-600 hover:underline\">Basi di Probabilit√†</a>.</p>\n<h2 id=\"previsione-probabilistica-del-completamento-delle-frasi\">Previsione Probabilistica del completamento delle frasi</h2>\n<p>Un modello linguistico supporta la previsione del completamento di una frase:\n- <strong>Esempi</strong>:\n  - <em>Please turn off your cell _____</em>\n  - <em>Your program does not ______</em>\n  - I sistemi di input predittivo possono indovinare ci√≤ che stai scrivendo e suggerire opzioni di completamento.</p>\n<h3 id=\"approccio-statistico-alla-previsione-delle-parole\">Approccio statistico alla previsione delle parole</h3>\n<p>L&rsquo;obiettivo √® prevedere la parola successiva in una frase o correggere un errore ortografico utilizzando <strong>probabilit√† condizionate</strong> basate sul contesto precedente.</p>\n<p><strong>Definizioni</strong>:</p>\n<ul>\n<li>\n<p>$w$: una data parola.</p>\n</li>\n<li>\n<p>$\\mathbb{P}(w_1, \\ldots, w_n)$: rappresenta la <strong>probabilit√† congiunta</strong> dell‚Äôintera sequenza di parole $(w_1, w_2, \\dots, w_n)$, ovvero la probabilit√† di ottenere proprio questa specifica sequenza di parole in un dato contesto (per esempio, un modello di linguaggio).</p>\n</li>\n<li>$\\mathbb P(w_n | w_1, w_2, ..., w_{n-1})$: √® la probabilit√† che, data la sequenza di parole $w_1, \\ldots, w_{n-1}$ (gi√† presenti nel contesto), la prossima parola sia $w_n$.</li>\n</ul>\n<p><strong>Esempio</strong>: Se consideriamo una frase come <em>&ldquo;oggi piove molto&rdquo;</em>, la probabilit√† congiunta $\\mathbb{P}(\\text{\"oggi\"}, \\text{\"piove\"}, \\text{\"molto\"})$ indica quanto questa sequenza sia comune nel linguaggio naturale.</p>\n<p><strong>Esempio</strong>: Se consideriamo una frase come <em>&ldquo;the pen is on the&rdquo;</em>, la probabilit√† che la prossima parola sia &ldquo;table&rdquo; √® $\\mathbb P(\"table\" | \"the\", \"pen\", \"is\", \"on\", \"the\")$.</p>\n<h3 id=\"stima-delle-frequenze-relative\">Stima delle frequenze relative</h3>\n<p>Per stimare queste probabilit√† su un <strong>corpus molto ampio</strong>:\n1. <strong>Probabilit√† congiunta</strong> (sequenza completa). Si conta il numero totale di parole $N$:\n   $$\\mathbb P(w_1, ..., w_n) = \\frac{\\text{Conteggio della sequenza } w_1, ..., w_n}{\\text{Conteggio della sequenza } w_1, ..., w_{n-1}} = \\frac{C(w_1, ..., w_n)}{N}$$\n2. <strong>Probabilit√† condizionata</strong> (parola successiva). Si conta quante volte una sequenza specifica occorre:\n   $$\\mathbb P(w_n | w_1, ..., w_{n-1}) = \\frac{\\text{Conteggio della sequenza } w_1, ..., w_n}{\\text{Conteggio della sequenza } w_1, ..., w_{n-1}} = \\frac{C(w_1, ..., w_{n-1}, w_n)}{C(w_1, ..., w_{n-1})}$$\n   Questo metodo √® chiamato <strong>stima della frequenza relativa</strong>.</p>\n<h3 id=\"vantaggi-e-svantaggi-della-stima-a-frequenza-relativa\">Vantaggi e svantaggi della stima a frequenza relativa</h3>\n<p><strong>Vantaggi</strong>:\n- La stima a frequenza relativa √® una <em>Stima di Massima Verosimiglianza (MLE)</em>:\n  - Dato un modello, l&rsquo;MLE produce la probabilit√† massima ottenibile dai dati disponibili.</p>\n<p><strong>Svantaggi</strong>:\n- Richiede un corpus <strong>ESTREMAMENTE GRANDE</strong> per stime accurate.\n- Computazionalmente impraticabile per sequenze lunghe o contesti complessi.</p>\n<p>Ci serve un modo pi√π efficiente per stimare $\\mathbb{P}(w_1, \\ldots, w_n)$.</p>\n<h3 id=\"math_inline_25-grams-models\">$N$-grams models</h3>\n<p>L&rsquo;idea alla base dei modelli N-grams √® <strong>semplificare il calcolo delle probabilit√† linguistiche</strong> evitando di considerare l&rsquo;intera storia del contesto. Si utilizza invece un&rsquo;approssimazione basata sulla <strong>propriet√† di Markov</strong>:</p>\n<blockquote>\n<p>&ldquo;La probabilit√† di una parola dipende solo dalle ultime $N-1$ parole precedenti&rdquo;</p>\n</blockquote>\n<p><strong>Formula generale</strong>:\n$$\\mathbb P(w_n | w_1, ..., w_{n-1}) \\approx P(w_n | w_{n-N+1}, ..., w_{n-1})$$</p>\n<p>Utilizziamo l&rsquo;indice $N-1$ perch√© $N$ rappresenta il numero di parole considerate, ma dato che una √® l&rsquo;$n$-esima (quella che dobbiamo predire), dobbiamo considerare il contesto precedente di $N-1$ parole. </p>\n<p>Questo significa che per predire la prossima parola $w_n$, ci basiamo sulle $N-1$ precedenti, ovvero $w_{n-N+1}, ..., w_{n-1}$. Che intuitivamente ha senso, in quanto la parola $w_n$ sar√† molto pi√π fortemente influenzata dalle precedenti pi√π vicine che da quelle pi√π distanti.</p>\n<p>Quindi, grazie alla <strong>propriet√† di Markov</strong>, abbiamo che </p>\n$$\n\\mathbb{P}(w_1, \\ldots, w_n) \\approx \\prod_{k=1}^n \\mathbb P(w_k \\mid w_{k-N+1}, \\ldots, w_{k-1})\n$$\n<p>Qui stiamo approssimando la probabilit√† congiunta usando un&rsquo;ipotesi di dipendenza limitata. </p>\n<p>Cosa significa questa espressione?<br />\n- Si tratta di un <strong>prodotto</strong> di probabilit√† condizionate.<br />\n- Ogni termine $\\mathbb{P}(w_k \\mid w_{k-N+1}, \\ldots, w_{k-1})$ rappresenta <strong>la probabilit√† che la parola $w_k$ appaia, dato il contesto delle $N-1$ parole precedenti</strong>.<br />\n- Stiamo assumendo che la probabilit√† di una parola dipenda solo dalle ultime $N-1$ parole, e non dall&rsquo;intera sequenza precedente.  </p>\n<p><strong>Interpretazione intuitiva</strong>:<br />\n- Invece di considerare tutta la sequenza passata, <strong>usiamo solo una finestra di dimensione $N-1$</strong> per predire la parola successiva.<br />\n- Questo semplifica i calcoli e rende il modello computazionalmente gestibile.  </p>\n<p><strong>Esempio</strong> (modello bigramma, $N=2$):<br />\nSe vogliamo stimare la probabilit√† di <em>&ldquo;oggi piove molto&rdquo;</em>, e assumiamo che ogni parola dipenda solo dalla precedente (<strong>modello bigramma</strong>), la formula diventa:  </p>\n$$\n\\mathbb{P}(\\text{\"oggi\"}, \\text{\"piove\"}, \\text{\"molto\"}) \\approx \\mathbb{P}(\\text{\"oggi\"}) \\cdot \\mathbb{P}(\\text{\"piove\"} \\mid \\text{\"oggi\"}) \\cdot \\mathbb{P}(\\text{\"molto\"} \\mid \\text{\"piove\"})\n$$\n<ul>\n<li><strong>$\\mathbb{P}(\\text{\"oggi\"})$</strong>: probabilit√† che inizi la frase con &ldquo;oggi&rdquo;.  </li>\n<li><strong>$\\mathbb{P}(\\text{\"piove\"} \\mid \\text{\"oggi\"})$</strong>: probabilit√† che &ldquo;piove&rdquo; segua &ldquo;oggi&rdquo;.  </li>\n<li><strong>$\\mathbb{P}(\\text{\"molto\"} \\mid \\text{\"piove\"})$</strong>: probabilit√† che &ldquo;molto&rdquo; segua &ldquo;piove&rdquo;.  </li>\n</ul>\n<p>In un <strong>modello trigramma</strong> ($N=3$), invece, avremmo:  </p>\n$$\n\\mathbb{P}(\\text{\"oggi\"}, \\text{\"piove\"}, \\text{\"molto\"}) \\approx \\mathbb{P}(\\text{\"oggi\"}) \\cdot \\mathbb{P}(\\text{\"piove\"} \\mid \\text{\"oggi\"}) \\cdot \\mathbb{P}(\\text{\"molto\"} \\mid \\text{\"oggi\"}, \\text{\"piove\"})\n$$\n<p>Qui, ogni parola dipende <strong>da entrambe le precedenti</strong>, anzich√© solo dall&rsquo;ultima.  </p>\n<h3 id=\"perche-questa-approssimazione\">Perch√© questa approssimazione?</h3>\n<ul>\n<li><strong>Motivazione computazionale</strong>: Calcolare la probabilit√† esatta di una sequenza lunga √® <strong>impraticabile</strong> perch√©: </li>\n<li>Se il nostro vocabolario ha, per esempio, <strong>20.000 parole</strong>, allora una sequenza di 5 parole pu√≤ teoricamente assumere $20.000^5 = 3.2 \\times 10^{23}$ combinazioni possibili! Questo significa che per stimare accuratamente tutte le probabilit√† congiunte necessarie, dovremmo raccogliere un <strong>enorme numero di esempi</strong> per coprire tutte le possibili frasi. Con questa approssimazione, invece, <strong>riduciamo drasticamente la complessit√†</strong>, poich√© stimiamo ogni parola solo in base a un numero <strong>limitato</strong> di parole precedenti.  </li>\n<li><strong>Motivazione linguistica</strong>: In molti casi il contesto rilevante √® <strong>localizzato</strong> (es. in italiano &ldquo;fare ___ colazione&rdquo; richiede quasi sempre &ldquo;la&rdquo;) e molti costrutti grammaticali si basano solo su &ldquo;poche&rdquo; parole precedenti. Questo significa che la <strong>propriet√† di Markov</strong> funziona bene per stimare le probabilit√† linguistiche.</li>\n</ul>\n<h3 id=\"differenze-nei-valori-di-math_inline_46\">Differenze nei valori di $N$</h3>\n<p>Un aspetto fondamentale nei modelli basati su n-grammi √® il valore di $N$. Questo parametro determina quante parole precedenti vengono considerate nel calcolo della probabilit√† di una parola successiva.  </p>\n<ul>\n<li><strong>Un valore pi√π grande di $N$ implica che:</strong>  </li>\n<li>Il modello ha <strong>pi√π informazioni sul contesto</strong>, poich√© considera una finestra pi√π ampia di parole precedenti.  </li>\n<li>Questo porta a una <strong>maggiore capacit√† discriminativa</strong>, cio√® il modello √® pi√π preciso nel prevedere la parola successiva in base a un contesto pi√π dettagliato.  </li>\n<li>\n<p>Tuttavia, <strong>cresce il problema della scarsit√† dei dati</strong> (<em>data sparseness</em>):  </p>\n<ul>\n<li>Le combinazioni di parole diventano pi√π numerose, quindi molte sequenze potrebbero non comparire mai nel dataset di addestramento.  </li>\n<li>Questo porta a difficolt√† nella stima delle probabilit√†, poich√© alcuni n-grammi potrebbero avere conteggi molto bassi o addirittura nulli.</li>\n<li>Le tecniche di <a href=\"/theory/nlp/Modelli di Linguaggio/Smoothing nei Modelli Linguistici\" class=\"text-blue-600 hover:underline\">smoothing</a> diventano cruciali e complesse.</li>\n</ul>\n</li>\n<li>\n<p><strong>Un valore pi√π piccolo di $N$ implica che:</strong>  </p>\n</li>\n<li>Il modello ha <strong>meno precisione</strong>, poich√© considera un contesto pi√π limitato.  </li>\n<li>Tuttavia, ci sono <strong>pi√π esempi nel dataset</strong> che corrispondono a ciascun n-gramma.  </li>\n<li>Questo rende le <strong>stime probabilistiche pi√π affidabili</strong>, poich√© √® meno probabile che ci siano sequenze con frequenza nulla.  </li>\n</ul>\n<p>In pratica, c&rsquo;√® un <strong>compromesso</strong> nella scelta di $N$:<br />\n- Un valore pi√π grande di $N$ aiuta a catturare meglio la struttura del linguaggio ma aumenta il rischio di dati insufficienti.<br />\n- Un valore pi√π piccolo riduce la precisione ma garantisce un modello pi√π stabile e generalizzabile.  </p>\n<p>Per affrontare il problema della scarsit√† dei dati nei modelli con $N$ elevato, si utilizzano tecniche come <strong><a href=\"/theory/nlp/Modelli di Linguaggio/Smoothing nei Modelli Linguistici\" class=\"text-blue-600 hover:underline\">smoothing</a></strong>, <strong><a href=\"/theory/nlp/Modelli di Linguaggio/Backoff nei Modelli Linguistici\" class=\"text-blue-600 hover:underline\">backoff</a></strong>, <strong><a href=\"/theory/nlp/Modelli di Linguaggio/Interpolazione Lineare nei Modelli Linguistici\" class=\"text-blue-600 hover:underline\">interpolazione</a></strong> e <strong>modelli neurali</strong> come le reti ricorrenti (<em>RNN</em>) o i Transformer.</p>\n<h3 id=\"riassumendo\">Riassumendo</h3>\n<p>I modelli <strong>N-gram</strong> approssimano la probabilit√† di sequenze di parole utilizzando contesti limitati di $N-1$ parole precedenti.  Se consideriamo una sequenza di parole $w_{1}^n = w_1, w_2, ..., w_n$ con $n$ parole, abbiamo:\n- <strong>Regola della catena delle probabilit√†</strong>:<br />\n  $$\n  P(w_1^n) = \\prod_{k=1}^n P(w_k \\mid w_1^{k-1})\n  $$<br />\n  Calcola la probabilit√† di una frase scomponendola in probabilit√† condizionate di ogni parola dato l&rsquo;intero contesto precedente.  </p>\n<ul>\n<li><strong>Approssimazioni</strong>:  </li>\n<li><strong>Bigramma</strong> ($N=2$): Considera solo la parola precedente:<br />\n    $$\n    P(w_1^n) = \\prod_{k=1}^n P(w_k \\mid w_{k-1})\n    $$  </li>\n<li><strong>N-gramma</strong> ($N$ generico): Utilizza le ultime $N-1$ parole:<br />\n    $$\n    P(w_1^n) = \\prod_{k=1}^n P(w_k \\mid w_{k-N+1}^{k-1})\n    $$  </li>\n</ul>\n<h4 id=\"stima-delle-probabilita-con-frequenze-relative\">Stima delle Probabilit√† con Frequenze Relative</h4>\n<p>Le probabilit√† condizionate si stimano dai conteggi delle sequenze nel corpus:<br />\n- <strong>Bigramma</strong>:<br />\n  $$\n  P(w_n \\mid w_{n-1}) = \\frac{C(w_{n-1}w_n)}{C(w_{n-1})}\n  $$<br />\n  Esempio: Se &ldquo;cane&rdquo; appare 100 volte e &ldquo;cane abbaia&rdquo; 30 volte, $P(\\text{abbaia} \\mid \\text{cane}) = 0.3$.  </p>\n<ul>\n<li><strong>N-gramma</strong>:<br />\n  $$\n  P(w_n \\mid w_{n-N+1}^{n-1}) = \\frac{C(w_{n-N+1}^{n-1}w_n)}{C(w_{n-N+1}^{n-1})}\n  $$<br />\n  Esempio: Per un trigramma ($N=3$), $P(\\text{mangia} \\mid \\text{il, cane}) = \\frac{C(\\text{il cane mangia})}{C(\\text{il cane})}$.  </li>\n</ul>\n<p>Questo approccio si basa sulla <strong>frequenza relativa</strong> delle sequenze, rendendolo semplice ma sensibile alla sparsit√† dei dati per $N$ elevati.</p>\n<p><a href=\"/theory/nlp/Legge di Zipf\" class=\"text-blue-600 hover:underline\">Qui</a> √® presente un approfondimento dettagliato sulla legge di Zipf. Che spiega la motivazione teorica dietro la sparsit√† dei dati nei modelli N-gram. La legge di Zipf mostra che in un corpus linguistico, la distribuzione delle parole segue una legge di potenza, dove poche parole (es. articoli, preposizioni) compaiono con frequenza estremamente alta, mentre la maggioranza delle parole √® rara.</p>\n<h2 id=\"limiti-e-problematiche\">Limiti e Problematiche</h2>\n<p>I modelli linguistici basati su n-grammi presentano diverse limitazioni intrinseche:</p>\n<h3 id=\"1-sparse-data-e-zero-probability\">1. Sparse Data e Zero Probability</h3>\n<ul>\n<li><strong>N-grammi non osservati</strong>:<br />\n  Sequenze plausibili ma assenti nel training set ricevono probabilit√† zero:<br />\n  $$P(w_n | w_{n-N+1}, ..., w_{n-1}) = 0 \\quad \\text{se } C(w_{n-N+1}, ..., w_n) = 0$$<br />\n  ‚Üí <strong>Impatto</strong>:  </li>\n<li>Frasi valide nel test set ottengono perplexity infinita.  </li>\n<li>Impossibilit√† di generalizzare a combinazioni non viste (es. <em>&ldquo;cane mangia kiwi&rdquo;</em>).  <blockquote>\n<p><em>Soluzione</em>: Tecniche di smoothing (approfondite in dettaglio <a href=\"/theory/nlp/Modelli di Linguaggio/Smoothing nei Modelli Linguistici\" class=\"text-blue-600 hover:underline\">qui</a>).</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"2-finestra-contestuale-limitata\">2. Finestra Contestuale Limitata</h3>\n<ul>\n<li><strong>Dipendenza da N fissato</strong>:\n  Con un modello basato su n-gram, il contesto considerato √® limitato a $N-1$ parole.</li>\n<li>Con N=3 (trigrammi), il modello ignora parole oltre le ultime 2:<br />\n<em>&ldquo;Ieri ho visitato il museo egizio che ___&rdquo;</em> ‚Üí Il contesto rilevante (&ldquo;museo&rdquo;) potrebbe essere troppo lontano.  </li>\n<li><strong>Esempio</strong>: In <em>&ldquo;La ragazza con gli occhiali da sole che ___&rdquo;</em>, la scelta di &ldquo;indossava&rdquo; vs &ldquo;rompe&rdquo; dipende da &ldquo;occhiali&rdquo;, non dalle ultime 2 parole (&ldquo;che&rdquo; e &ldquo;sole&rdquo;).</li>\n</ul>\n<h3 id=\"3-incapacita-di-modellare-strutture-complesse\">3. Incapacit√† di Modellare Strutture Complesse</h3>\n<ul>\n<li><strong>Dipendenza dall&rsquo;ordine locale</strong>:<br />\n  Non catturano fenomeni linguistici che richiedono memoria a lungo termine:  </li>\n<li>Accordi verbali: <em>&ldquo;Le donne che hanno ___&rdquo;</em> (richiede accordo plurale)  </li>\n<li>\n<p>Riferimenti anaforici: <em>&ldquo;Marco disse a Luca di comprare il pane. Poi ___ usc√¨&rdquo;</em> (chi usc√¨?)</p>\n</li>\n<li>\n<p><strong>Ambiguit√† lessicale</strong>:<br />\n  Non distinguono significati multipli in base al contesto globale:<br />\n  $$P(\\text{bank} | \\text{river}) ‚âà P(\\text{bank} | \\text{money})$$<br />\n  (manca comprensione semantica di &ldquo;bank&rdquo; come &ldquo;sponda&rdquo; vs &ldquo;banca&rdquo;).</p>\n</li>\n</ul>\n<h3 id=\"4-overhead-computazionale\">4. Overhead Computazionale</h3>\n<ul>\n<li><strong>Crescita esponenziale dello spazio</strong>:<br />\n  Per un vocabolario di 50k parole:  </li>\n<li>Bigrammi: $50k^2 = 2.5$ miliardi di parametri  </li>\n<li>\n<p>Trigrammi: $50k^3 = 125$ trilioni di parametri<br />\n  ‚Üí <strong>Problema</strong>: Memorizzazione e query inefficienti anche per N moderati.</p>\n<p>‚Üí <strong>Soluzione</strong>: Utilizzare tecniche di compressione (es. Huffman coding) e pruning.</p>\n</li>\n</ul>\n<h3 id=\"5-sensibilita-al-corpus-di-training\">5. Sensibilit√† al Corpus di Training</h3>\n<ul>\n<li><strong>Bias statistici</strong>:<br />\n  Riproducono stereotipi presenti nei dati:  </li>\n<li><em>&ldquo;L&rsquo;infermiere ___&rdquo;</em> ‚Üí Probabilit√† alta per &ldquo;lei&rdquo; (se il corpus ha prevalenza femminile nel ruolo)  </li>\n<li>\n<p><em>&ldquo;Il CEO di successo ___&rdquo;</em> ‚Üí Associazioni di genere/culturali distorte  </p>\n</li>\n<li>\n<p><strong>Out-Of-Vocabulary (OOV)</strong>:<br />\n  Parole nuove (slang, nomi propri, errori) non presenti nel training set vengono gestite male:<br />\n  $$\n  \\mathbb P(\\text{\"Il nuovo NFT\"}) = 0 \\quad \\text{se \"NFT\" non √® nel vocabolario}\n  $$</p>\n</li>\n</ul>\n<h3 id=\"6-apprendimento-superficiale\">6. Apprendimento Superficiale</h3>\n<ul>\n<li><strong>Modellano correlazioni, non causalit√†</strong>:<br />\n  Apprendono pattern statistici senza comprensione logica:  </li>\n<li><em>&ldquo;Se piove, prendo l&rsquo;ombrello&rdquo;</em> ‚Üí Alta probabilit√†  </li>\n<li>\n<p><em>&ldquo;Se prendo l&rsquo;ombrello, piove&rdquo;</em> ‚Üí Probabilit√† simile (manca relazione causale)  </p>\n</li>\n<li>\n<p><strong>Assenza di world knowledge</strong>:<br />\n  Non integrano informazioni esterne:<br />\n  $$P(\\text{\"Roma\"} | \\text{\"La capitale d'Italia √®\"}) = 0$$<br />\n  Anche se &ldquo;Roma&rdquo; √® l&rsquo;unica risposta corretta, il modello assegna probabilit√† basate solo sui bigrammi/trigrammi osservati.</p>\n</li>\n</ul>\n<h2 id=\"argomenti-collegati\">Argomenti Collegati</h2>\n<ul>\n<li><a href=\"/theory/nlp/Modelli di Linguaggio/Valutazione dei Modelli di Linguaggio\" class=\"text-blue-600 hover:underline\">Valutazione dei Modelli di Linguaggio</a></li>\n<li><a href=\"/theory/nlp/Modelli di Linguaggio/Smoothing nei Modelli Linguistici\" class=\"text-blue-600 hover:underline\">Smoothing nei Modelli Linguistici</a></li>\n<li><span class=\"text-gray-600\">Pruning e Compressione nei Modelli NLP</span></li>\n<li><span class=\"text-gray-600\">Bias e Fairness nell&rsquo;Elaborazione del Linguaggio Naturale</span></li>\n</ul>\n<h2 id=\"conclusione\">Conclusione</h2>\n<p>I modelli linguistici basati su n-gram hanno rappresentato una tappa fondamentale nello sviluppo dell&rsquo;NLP, ma presentano notevoli limitazioni: dalla gestione della sparsenza e del problema degli n-grammi non osservati, alla finestra contestuale limitata e alla difficolt√† nel modellare strutture linguistiche complesse. Inoltre, l&rsquo;esponenziale crescita dello spazio delle combinazioni e la sensibilit√† ai bias del corpus di training evidenziano il bisogno di approcci pi√π sofisticati. Questi limiti hanno favorito l&rsquo;evoluzione verso modelli neurali e architetture transformer, capaci di integrare contesto e conoscenza semantica in maniera pi√π efficace, aprendo la strada a progressi significativi nel campo dell&rsquo;elaborazione del linguaggio naturale.</p>"
}