{
  "title": "Automi a Stati Finiti (Finite State Automata)",
  "content": "<style>pre { line-height: 125%; }\ntd.linenos .normal { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }\nspan.linenos { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }\ntd.linenos .special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }\nspan.linenos.special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }\n.codehilite .hll { background-color: #ffffcc }\n.codehilite { background: #f8f8f8; }\n.codehilite .c { color: #3D7B7B; font-style: italic } /* Comment */\n.codehilite .err { border: 1px solid #F00 } /* Error */\n.codehilite .k { color: #008000; font-weight: bold } /* Keyword */\n.codehilite .o { color: #666 } /* Operator */\n.codehilite .ch { color: #3D7B7B; font-style: italic } /* Comment.Hashbang */\n.codehilite .cm { color: #3D7B7B; font-style: italic } /* Comment.Multiline */\n.codehilite .cp { color: #9C6500 } /* Comment.Preproc */\n.codehilite .cpf { color: #3D7B7B; font-style: italic } /* Comment.PreprocFile */\n.codehilite .c1 { color: #3D7B7B; font-style: italic } /* Comment.Single */\n.codehilite .cs { color: #3D7B7B; font-style: italic } /* Comment.Special */\n.codehilite .gd { color: #A00000 } /* Generic.Deleted */\n.codehilite .ge { font-style: italic } /* Generic.Emph */\n.codehilite .ges { font-weight: bold; font-style: italic } /* Generic.EmphStrong */\n.codehilite .gr { color: #E40000 } /* Generic.Error */\n.codehilite .gh { color: #000080; font-weight: bold } /* Generic.Heading */\n.codehilite .gi { color: #008400 } /* Generic.Inserted */\n.codehilite .go { color: #717171 } /* Generic.Output */\n.codehilite .gp { color: #000080; font-weight: bold } /* Generic.Prompt */\n.codehilite .gs { font-weight: bold } /* Generic.Strong */\n.codehilite .gu { color: #800080; font-weight: bold } /* Generic.Subheading */\n.codehilite .gt { color: #04D } /* Generic.Traceback */\n.codehilite .kc { color: #008000; font-weight: bold } /* Keyword.Constant */\n.codehilite .kd { color: #008000; font-weight: bold } /* Keyword.Declaration */\n.codehilite .kn { color: #008000; font-weight: bold } /* Keyword.Namespace */\n.codehilite .kp { color: #008000 } /* Keyword.Pseudo */\n.codehilite .kr { color: #008000; font-weight: bold } /* Keyword.Reserved */\n.codehilite .kt { color: #B00040 } /* Keyword.Type */\n.codehilite .m { color: #666 } /* Literal.Number */\n.codehilite .s { color: #BA2121 } /* Literal.String */\n.codehilite .na { color: #687822 } /* Name.Attribute */\n.codehilite .nb { color: #008000 } /* Name.Builtin */\n.codehilite .nc { color: #00F; font-weight: bold } /* Name.Class */\n.codehilite .no { color: #800 } /* Name.Constant */\n.codehilite .nd { color: #A2F } /* Name.Decorator */\n.codehilite .ni { color: #717171; font-weight: bold } /* Name.Entity */\n.codehilite .ne { color: #CB3F38; font-weight: bold } /* Name.Exception */\n.codehilite .nf { color: #00F } /* Name.Function */\n.codehilite .nl { color: #767600 } /* Name.Label */\n.codehilite .nn { color: #00F; font-weight: bold } /* Name.Namespace */\n.codehilite .nt { color: #008000; font-weight: bold } /* Name.Tag */\n.codehilite .nv { color: #19177C } /* Name.Variable */\n.codehilite .ow { color: #A2F; font-weight: bold } /* Operator.Word */\n.codehilite .w { color: #BBB } /* Text.Whitespace */\n.codehilite .mb { color: #666 } /* Literal.Number.Bin */\n.codehilite .mf { color: #666 } /* Literal.Number.Float */\n.codehilite .mh { color: #666 } /* Literal.Number.Hex */\n.codehilite .mi { color: #666 } /* Literal.Number.Integer */\n.codehilite .mo { color: #666 } /* Literal.Number.Oct */\n.codehilite .sa { color: #BA2121 } /* Literal.String.Affix */\n.codehilite .sb { color: #BA2121 } /* Literal.String.Backtick */\n.codehilite .sc { color: #BA2121 } /* Literal.String.Char */\n.codehilite .dl { color: #BA2121 } /* Literal.String.Delimiter */\n.codehilite .sd { color: #BA2121; font-style: italic } /* Literal.String.Doc */\n.codehilite .s2 { color: #BA2121 } /* Literal.String.Double */\n.codehilite .se { color: #AA5D1F; font-weight: bold } /* Literal.String.Escape */\n.codehilite .sh { color: #BA2121 } /* Literal.String.Heredoc */\n.codehilite .si { color: #A45A77; font-weight: bold } /* Literal.String.Interpol */\n.codehilite .sx { color: #008000 } /* Literal.String.Other */\n.codehilite .sr { color: #A45A77 } /* Literal.String.Regex */\n.codehilite .s1 { color: #BA2121 } /* Literal.String.Single */\n.codehilite .ss { color: #19177C } /* Literal.String.Symbol */\n.codehilite .bp { color: #008000 } /* Name.Builtin.Pseudo */\n.codehilite .fm { color: #00F } /* Name.Function.Magic */\n.codehilite .vc { color: #19177C } /* Name.Variable.Class */\n.codehilite .vg { color: #19177C } /* Name.Variable.Global */\n.codehilite .vi { color: #19177C } /* Name.Variable.Instance */\n.codehilite .vm { color: #19177C } /* Name.Variable.Magic */\n.codehilite .il { color: #666 } /* Literal.Number.Integer.Long */\n\n/* Styling per blocchi di codice */\n.codehilite {\n    background: transparent !important;\n    border-radius: 8px;\n    overflow: hidden;\n}\n.codehilite pre {\n    background: transparent !important;\n    margin: 0 !important;\n    padding: 20px !important;\n    font-family: 'Monaco', 'Menlo', 'Consolas', monospace !important;\n    font-size: 14px !important;\n    line-height: 1.5 !important;\n    white-space: pre !important;\n    overflow-x: auto !important;\n    color: inherit !important;\n}\n.codehilite code {\n    background: transparent !important;\n    padding: 0 !important;\n    font-family: inherit !important;\n}\n\n\n.code-wrapper { \n    position: relative; \n}\n.copy-button {\n    position: absolute; \n    top: 12px; \n    right: 12px; \n    padding: 6px 12px; \n    font-size: 12px;\n    cursor: pointer; \n    border: none; \n    border-radius: 4px; \n    background: rgba(255,255,255,0.9);\n    color: #374151; \n    transition: all 0.2s ease;\n    font-weight: 500;\n}\n.copy-button:hover { \n    background: rgba(255,255,255,1);\n    transform: translateY(-1px);\n}\n\n\ndetails.code-container {\n    border: 1px solid #e5e7eb; \n    border-radius: 12px; \n    background: #f9fafb;\n    margin: 16px 0;\n    transition: all 0.3s ease;\n}\ndetails.code-container summary {\n    padding: 12px 16px;\n    font-size: 14px; \n    color: #6b7280; \n    cursor: pointer; \n    outline: none; \n    user-select: none;\n    font-weight: 500;\n}\ndetails.code-container[open] summary::after { \n    content: \" (Hide Code)\"; \n    color: #9ca3af; \n}\ndetails.code-container:not([open]) summary::after { \n    content: \" (Show Code)\"; \n    color: #d1d5db; \n}\ndetails.code-container .code-wrapper {\n    padding: 0;\n    margin: 0;\n}\n/* Blocchi di codice sempre visibili */\n.code-visible {\n    border: 1px solid #e5e7eb;\n    border-radius: 12px;\n    background: #f9fafb;\n    margin: 16px 0;\n}\n.code-visible .code-wrapper {\n    padding: 0;\n    margin: 0;\n}\n</style>\n<h2 id=\"definizione-formale\">Definizione Formale</h2>\n<p>Un automa a stati finiti è una <strong>quintupla</strong> $(Q, \\Sigma, \\delta, q_0, A)$, dove:\n- <strong>$Q$</strong>: Insieme finito di stati (es. $q_0, q_1, q_2$).\n- <strong>$\\Sigma$</strong>: Alfabeto (simboli consentiti, es. $\\{a, b, l\\}$).\n- <strong>$\\delta: Q \\times \\Sigma \\rightarrow Q$</strong>: Funzione di transizione $\\delta(q, x) \\rightarrow q'$. Definisce come l&rsquo;automa passa da uno stato $q$ a $q'$ leggendo il simbolo $x$.\n- <strong>$q_0$</strong>: Stato iniziale (es. $q_0$).\n- <strong>$A$</strong>: Insieme di stati accettanti/finali (es. $\\{q_4\\}$).</p>\n<p>Gli automi a stati finiti fanno parte dei <strong>rule-based systems</strong>, come le <a href=\"/theory/nlp/Espressioni Regolari/Espressioni Regolari\" class=\"text-blue-600 hover:underline\">regex</a>.</p>\n<h2 id=\"esempio-il-linguaggio-delle-pecore\">Esempio: Il &ldquo;Linguaggio delle Pecore&rdquo;</h2>\n<h3 id=\"descrizione\">Descrizione</h3>\n<ul>\n<li><strong>Linguaggio $L_{\\text{sheep}} = \\{ \\text{baa!}, \\text{baaaa!}, \\text{baaaaaa!}, ... \\}$</strong>: Stringhe che iniziano con &ldquo;b&rdquo;, seguite da almeno due &ldquo;a&rdquo;, e terminano con &ldquo;!&rdquo;.</li>\n<li><strong>Regex corrispondente</strong>: <code>/baa+!/</code>.</li>\n</ul>\n<h3 id=\"automa-corrispondente\">Automa Corrispondente</h3>\n<p><img src=\"/images/tikz/c2065ac9f7677b8cda1c2e7e9cba0f18.svg\" style=\"display: block; width: 100%; height: auto; max-height: 600px;\" class=\"tikz-svg\" /></p>\n<h3 id=\"definita-come-fsa\">Definita come FSA</h3>\n<ul>\n<li><strong>Stati</strong>: $Q = \\{q_0, q_1, q_2, q_3, q_4\\}$.</li>\n<li><strong>Alfabeto</strong>: $\\Sigma = \\{b, a, !\\}$.</li>\n<li><strong>Stato iniziale</strong>: $q_0$.</li>\n<li><strong>Stati accettanti</strong>: $A = \\{q_4\\}$.</li>\n<li>\n<p><strong>Tabella di Transizione di $\\delta$</strong>:</p>\n<table>\n<thead>\n<tr>\n<th>Stato</th>\n<th>$b$</th>\n<th>$a$</th>\n<th>$!$</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>$q_0$</td>\n<td>$q_1$</td>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>$q_1$</td>\n<td>-</td>\n<td>$q_2$</td>\n<td>-</td>\n</tr>\n<tr>\n<td>$q_2$</td>\n<td>-</td>\n<td>$q_3$</td>\n<td>-</td>\n</tr>\n<tr>\n<td>$q_3$</td>\n<td>-</td>\n<td>$q_3$</td>\n<td>$q_4$</td>\n</tr>\n<tr>\n<td>$q_4$</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n<h2 id=\"funzionamento-di-un-fsa\">Funzionamento di un FSA</h2>\n<h3 id=\"processo-di-riconoscimento\">Processo di Riconoscimento</h3>\n<ol>\n<li><strong>Input</strong>: &ldquo;baaa!&rdquo;</li>\n<li>$q_0 \\xrightarrow{b} q_1 \\xrightarrow{a} q_2 \\xrightarrow{a} q_3 \\xrightarrow{a} q_3 \\xrightarrow{!} q_4$ → <strong>Accettata</strong>.</li>\n<li><strong>Input</strong>: &ldquo;ba!&rdquo;</li>\n<li>$q_0 \\xrightarrow{b} q_1 \\xrightarrow{a} q_2$ → Esaurimento input in stato non finale → <strong>Rifiutata</strong>.</li>\n</ol>\n<p>Quindi se l&rsquo;input si esaurisce in uno stato finale, la stringa viene <strong>riconosciuta</strong> come appartenente al linguaggio, mentre se si esaurisce in uno stato non finale, la stringa viene <strong>rifiutata</strong>. Se l&rsquo;automa non raggiunge mai uno stato finale, diremo che fallisce l&rsquo;accettazione.</p>\n<h2 id=\"accettatori-vs-generatori\">Accettatori vs. Generatori</h2>\n<p>I <span class=\"text-gray-600\">Linguaggi Formali</span> sono insiemi di stringhe composte di simboli derivati da un alfabeto (insieme finito di simboli). Gli FSA definiscono un linguaggio formale. Possiamo vedere gli FSA anche come <strong>generatori</strong> di stringhe di linguaggi formali.</p>\n<ul>\n<li><strong>Accettatori</strong>: Verificano se una stringa appartiene al linguaggio.</li>\n<li><strong>Generatori</strong>: Producono tutte le stringhe valide.</li>\n</ul>\n<h2 id=\"relazione-tra-regex-e-fsa\">Relazione tra Regex e FSA</h2>\n<p>Ogni Regex corrisponde ad un FSA che accetta il linguaggio corrispondente. Simmetricamente, ogni FSA corrisponde ad una Regex che accetta il linguaggio corrispondente. Un&rsquo;espressione regolare è un modo di caratterizzare un particolare linguaggio formale chiamato <span class=\"text-gray-600\">Linguaggio Regolare</span>. Entrambi FSA e Regex sono utilizzati per descrivere linguaggi regolari.</p>\n<p>Possiamo definire il linguaggio regolare così: \n$$L(M) = \\{ w \\in \\Sigma^* \\mid M \\text{ accetta } w \\}\n$$\ncon $M$ un FSA.</p>\n<h3 id=\"equivalenze\">Equivalenze</h3>\n<table>\n<thead>\n<tr>\n<th>Operazione Regex</th>\n<th>Operazione FSA</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>$RE_{L_1} \\mid RE_{L_2}$ (Unione)</td>\n<td>FSA che accetta $L_1 \\cup L_2 = \\{ w \\mid w \\in L_1 \\lor w \\in L_2 \\}$</td>\n</tr>\n<tr>\n<td>$RE_{L_1}RE_{L_2}$ (Concatenazione)</td>\n<td>FSA che accetta $L_1L_2 = \\{ xy \\mid x \\in L_1 \\land y \\in L_2 \\}$</td>\n</tr>\n<tr>\n<td>$RE^*$ (Kleene Star)</td>\n<td>FSA con loop per ripetizioni $L^* = \\bigcup_{n=0}^{\\infty} L^n$ chiamado <span class=\"text-gray-600\">Chiusura di Kleene</span></td>\n</tr>\n</tbody>\n</table>\n<p><strong>Esempio</strong>: Regex <code>(a|b)*c</code><br />\n<img src=\"/images/tikz/eff741d9ebf0391963103c5db1379ad9.svg\" style=\"display: block; width: 100%; height: auto; max-height: 600px;\" class=\"tikz-svg\" /></p>\n<h2 id=\"esercizio-guidato\">Esercizio Guidato</h2>\n<h3 id=\"dati\">Dati</h3>\n<ul>\n<li>$L_1 = \\{\\text{nlp}, \\text{nat_lang_proc}\\}$</li>\n<li>$L_2 = \\{\\text{_is_cool}\\}$</li>\n<li>$L_3 = L_1L_2^*$</li>\n</ul>\n<h3 id=\"soluzione\">Soluzione</h3>\n<p><strong>FSA per $L_3$</strong>:<br />\n<img src=\"/images/tikz/e54d19583106f0b2fce097f729c857a5.svg\" style=\"display: block; width: 100%; height: auto; max-height: 600px;\" class=\"tikz-svg\" /></p>\n<blockquote>\n<p><strong>Etichette</strong>: #FSA #Regex #LinguaggiFormali<br />\n<strong>Collegamenti</strong>: <a href=\"/theory/nlp/Espressioni Regolari/Espressioni Regolari\" class=\"text-blue-600 hover:underline\">Espressioni Regolari</a>, <span class=\"text-gray-600\">Teoria degli Automi</span><br />\n<strong>Risorse</strong>:<br />\n- <a href=\"https://web.stanford.edu/~jurafsky/slp3/\">Speech and Language Processing (Jurafsky &amp; Martin)</a><br />\n- <a href=\"https://ivanzuzak.info/noam/webapps/fsm_simulator/\">Simulatore FSA Online</a></p>\n</blockquote>"
}