{
  "title": "Parsing Sintattico",
  "content": "<style>pre { line-height: 125%; }\ntd.linenos .normal { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }\nspan.linenos { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }\ntd.linenos .special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }\nspan.linenos.special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }\n.codehilite .hll { background-color: #ffffcc }\n.codehilite { background: #f8f8f8; }\n.codehilite .c { color: #3D7B7B; font-style: italic } /* Comment */\n.codehilite .err { border: 1px solid #F00 } /* Error */\n.codehilite .k { color: #008000; font-weight: bold } /* Keyword */\n.codehilite .o { color: #666 } /* Operator */\n.codehilite .ch { color: #3D7B7B; font-style: italic } /* Comment.Hashbang */\n.codehilite .cm { color: #3D7B7B; font-style: italic } /* Comment.Multiline */\n.codehilite .cp { color: #9C6500 } /* Comment.Preproc */\n.codehilite .cpf { color: #3D7B7B; font-style: italic } /* Comment.PreprocFile */\n.codehilite .c1 { color: #3D7B7B; font-style: italic } /* Comment.Single */\n.codehilite .cs { color: #3D7B7B; font-style: italic } /* Comment.Special */\n.codehilite .gd { color: #A00000 } /* Generic.Deleted */\n.codehilite .ge { font-style: italic } /* Generic.Emph */\n.codehilite .ges { font-weight: bold; font-style: italic } /* Generic.EmphStrong */\n.codehilite .gr { color: #E40000 } /* Generic.Error */\n.codehilite .gh { color: #000080; font-weight: bold } /* Generic.Heading */\n.codehilite .gi { color: #008400 } /* Generic.Inserted */\n.codehilite .go { color: #717171 } /* Generic.Output */\n.codehilite .gp { color: #000080; font-weight: bold } /* Generic.Prompt */\n.codehilite .gs { font-weight: bold } /* Generic.Strong */\n.codehilite .gu { color: #800080; font-weight: bold } /* Generic.Subheading */\n.codehilite .gt { color: #04D } /* Generic.Traceback */\n.codehilite .kc { color: #008000; font-weight: bold } /* Keyword.Constant */\n.codehilite .kd { color: #008000; font-weight: bold } /* Keyword.Declaration */\n.codehilite .kn { color: #008000; font-weight: bold } /* Keyword.Namespace */\n.codehilite .kp { color: #008000 } /* Keyword.Pseudo */\n.codehilite .kr { color: #008000; font-weight: bold } /* Keyword.Reserved */\n.codehilite .kt { color: #B00040 } /* Keyword.Type */\n.codehilite .m { color: #666 } /* Literal.Number */\n.codehilite .s { color: #BA2121 } /* Literal.String */\n.codehilite .na { color: #687822 } /* Name.Attribute */\n.codehilite .nb { color: #008000 } /* Name.Builtin */\n.codehilite .nc { color: #00F; font-weight: bold } /* Name.Class */\n.codehilite .no { color: #800 } /* Name.Constant */\n.codehilite .nd { color: #A2F } /* Name.Decorator */\n.codehilite .ni { color: #717171; font-weight: bold } /* Name.Entity */\n.codehilite .ne { color: #CB3F38; font-weight: bold } /* Name.Exception */\n.codehilite .nf { color: #00F } /* Name.Function */\n.codehilite .nl { color: #767600 } /* Name.Label */\n.codehilite .nn { color: #00F; font-weight: bold } /* Name.Namespace */\n.codehilite .nt { color: #008000; font-weight: bold } /* Name.Tag */\n.codehilite .nv { color: #19177C } /* Name.Variable */\n.codehilite .ow { color: #A2F; font-weight: bold } /* Operator.Word */\n.codehilite .w { color: #BBB } /* Text.Whitespace */\n.codehilite .mb { color: #666 } /* Literal.Number.Bin */\n.codehilite .mf { color: #666 } /* Literal.Number.Float */\n.codehilite .mh { color: #666 } /* Literal.Number.Hex */\n.codehilite .mi { color: #666 } /* Literal.Number.Integer */\n.codehilite .mo { color: #666 } /* Literal.Number.Oct */\n.codehilite .sa { color: #BA2121 } /* Literal.String.Affix */\n.codehilite .sb { color: #BA2121 } /* Literal.String.Backtick */\n.codehilite .sc { color: #BA2121 } /* Literal.String.Char */\n.codehilite .dl { color: #BA2121 } /* Literal.String.Delimiter */\n.codehilite .sd { color: #BA2121; font-style: italic } /* Literal.String.Doc */\n.codehilite .s2 { color: #BA2121 } /* Literal.String.Double */\n.codehilite .se { color: #AA5D1F; font-weight: bold } /* Literal.String.Escape */\n.codehilite .sh { color: #BA2121 } /* Literal.String.Heredoc */\n.codehilite .si { color: #A45A77; font-weight: bold } /* Literal.String.Interpol */\n.codehilite .sx { color: #008000 } /* Literal.String.Other */\n.codehilite .sr { color: #A45A77 } /* Literal.String.Regex */\n.codehilite .s1 { color: #BA2121 } /* Literal.String.Single */\n.codehilite .ss { color: #19177C } /* Literal.String.Symbol */\n.codehilite .bp { color: #008000 } /* Name.Builtin.Pseudo */\n.codehilite .fm { color: #00F } /* Name.Function.Magic */\n.codehilite .vc { color: #19177C } /* Name.Variable.Class */\n.codehilite .vg { color: #19177C } /* Name.Variable.Global */\n.codehilite .vi { color: #19177C } /* Name.Variable.Instance */\n.codehilite .vm { color: #19177C } /* Name.Variable.Magic */\n.codehilite .il { color: #666 } /* Literal.Number.Integer.Long */\n\n/* Styling per blocchi di codice */\n.codehilite {\n    background: transparent !important;\n    border-radius: 8px;\n    overflow: hidden;\n}\n.codehilite pre {\n    background: transparent !important;\n    margin: 0 !important;\n    padding: 20px !important;\n    font-family: 'Monaco', 'Menlo', 'Consolas', monospace !important;\n    font-size: 14px !important;\n    line-height: 1.5 !important;\n    white-space: pre !important;\n    overflow-x: auto !important;\n    color: inherit !important;\n}\n.codehilite code {\n    background: transparent !important;\n    padding: 0 !important;\n    font-family: inherit !important;\n}\n\n\n.code-wrapper { \n    position: relative; \n}\n.copy-button {\n    position: absolute; \n    top: 12px; \n    right: 12px; \n    padding: 6px 12px; \n    font-size: 12px;\n    cursor: pointer; \n    border: none; \n    border-radius: 4px; \n    background: rgba(255,255,255,0.9);\n    color: #374151; \n    transition: all 0.2s ease;\n    font-weight: 500;\n}\n.copy-button:hover { \n    background: rgba(255,255,255,1);\n    transform: translateY(-1px);\n}\n\n\ndetails.code-container {\n    border: 1px solid #e5e7eb; \n    border-radius: 12px; \n    background: #f9fafb;\n    margin: 16px 0;\n    transition: all 0.3s ease;\n}\ndetails.code-container summary {\n    padding: 12px 16px;\n    font-size: 14px; \n    color: #6b7280; \n    cursor: pointer; \n    outline: none; \n    user-select: none;\n    font-weight: 500;\n}\ndetails.code-container[open] summary::after { \n    content: \" (Hide Code)\"; \n    color: #9ca3af; \n}\ndetails.code-container:not([open]) summary::after { \n    content: \" (Show Code)\"; \n    color: #d1d5db; \n}\ndetails.code-container .code-wrapper {\n    padding: 0;\n    margin: 0;\n}\n</style>\n<h2 id=\"introduzione\">Introduzione</h2>\n<p><strong>Definizione</strong><br />\nFare <em>parsing sintattico</em> significa riconoscere una frase e assegnarle una struttura sintattica. </p>\n<blockquote>\n<p>In inglese: <strong>Syntactic Parsing</strong></p>\n</blockquote>\n<h2 id=\"perche-fare-il-parsing-di-una-frase\">Perché fare il parsing di una frase?</h2>\n<ul>\n<li>\n<p><strong>Controllo grammaticale</strong><br />\n  Applicazioni per il controllo ortografico e grammaticale.<br />\n<em>Esempio</em>: Un parser segnala l’errore in &ldquo;He are student&rdquo;.</p>\n</li>\n<li>\n<p><strong>Analisi semantica</strong><br />\n  Serve come base per l’analisi semantica.<br />\n<em>Esempio</em>: In &ldquo;He eats sushi&rdquo;, il parser identifica &ldquo;eats&rdquo; come verbo principale.</p>\n</li>\n<li>\n<p><strong>Question Answering</strong><br />\n  Per rispondere ad una domanda è necessario almeno identificare:</p>\n</li>\n<li>il <strong>soggetto</strong> (es. <em>what books</em>)</li>\n<li>il <strong>verbo principale</strong> (<em>write</em>)</li>\n<li>\n<p>l’<strong>aggiunto da-agentivo</strong> (<em>Raymond Queneau</em>)</p>\n</li>\n<li>\n<p><strong>Traduzione automatica</strong><br />\n  Fornisce una struttura sintattica coerente da cui generare la traduzione.<br />\n<em>Esempio</em>: &ldquo;The cat sleeps&rdquo; → &ldquo;Il gatto dorme&rdquo;</p>\n</li>\n</ul>\n<h2 id=\"parsing-costitutivo\">Parsing Costitutivo</h2>\n<p>Si esplora lo <strong>spazio dei possibili alberi sintattici</strong> per trovare il migliore dato un input.</p>\n<h3 id=\"vincoli\">Vincoli</h3>\n<ol>\n<li>\n<p><strong>Vincolo sui dati</strong><br />\n   Un albero per una frase di $k$ parole deve avere <strong>$k$ foglie</strong>.<br />\n<em>Esempio</em>: &ldquo;He runs&rdquo; → foglie: &ldquo;He&rdquo;, &ldquo;runs&rdquo;</p>\n</li>\n<li>\n<p><strong>Vincolo grammaticale</strong><br />\n   L’albero deve avere <strong>una sola radice</strong>.<br />\n<em>Esempio</em>: &ldquo;He is a student&rdquo; → radice unica $S$</p>\n</li>\n</ol>\n<h2 id=\"strategie-di-parsing\">Strategie di parsing</h2>\n<h3 id=\"top-down-goal-directed\">Top-down (goal-directed)</h3>\n<p>Parte dalla radice $S$ ed espande ricorsivamente secondo la grammatica:</p>\n$$\n\\begin{align*}\n  N &= \\{ S, NP, Nom, VP, PP, Det, Noun, Verb, Adjective, Pronoun, Proper\\text{-}Noun, Preposition \\} \\\\\n  T &= \\{\\text{me}, \\text{I}, \\text{he}, \\text{you}, \\text{it}, \\text{him}, \\text{her}, \\text{Rome}, \\text{Sapienza}, \\\\\n    &\\quad \\text{a}, \\text{an}, \\text{the}, \\text{student}, \\text{researcher}, \\text{research}, \\text{am}, \\text{is}, \\\\\n    &\\quad \\text{bright}, \\text{from}, \\text{to}, \\text{on}, \\text{in}, \\text{near}, \\text{at}, \\text{and}, \\text{or}, \\text{but} \\} \\\\\n  P &= \\{ \\\\\n  &\\quad S \\rightarrow NP\\ VP, \\\\\n  &\\quad NP \\rightarrow Pronoun \\mid Proper\\text{-}Noun \\mid Det\\ Nom, \\\\\n  &\\quad Nom \\rightarrow Nom\\ Noun \\mid Noun, \\\\\n  &\\quad VP \\rightarrow Verb \\mid Verb\\ NP \\mid Verb\\ NP\\ PP \\mid Verb\\ PP, \\\\\n  &\\quad PP \\rightarrow Preposition\\ NP, \\\\\n  &\\quad Noun \\rightarrow \\text{student} \\mid \\text{researcher} \\mid \\text{research}, \\\\\n  &\\quad Verb \\rightarrow \\text{am} \\mid \\text{is}, \\\\\n  &\\quad Adjective \\rightarrow \\text{bright}, \\\\\n  &\\quad Pronoun \\rightarrow \\text{me} \\mid \\text{I} \\mid \\text{he} \\mid \\text{you} \\mid \\text{it} \\mid \\text{him} \\mid \\text{her}, \\\\\n  &\\quad Proper\\text{-}Noun \\rightarrow \\text{Rome} \\mid \\text{Sapienza}, \\\\\n  &\\quad Det \\rightarrow \\text{the} \\mid \\text{a} \\mid \\text{an}, \\\\\n  &\\quad Preposition \\rightarrow \\text{from} \\mid \\text{to} \\mid \\text{on} \\mid \\text{in} \\mid \\text{near} \\mid \\text{at}, \\\\\n  &\\quad Conjunction \\rightarrow \\text{and} \\mid \\text{or} \\mid \\text{but} \\\\\n  \\} \\\\\n  S &= S\n\\end{align*}\n$$\n<p>Di seguito, una semplice rappresentazione del parsing di un albero sintattico per la frase &ldquo;He is a student in Rome&rdquo; con la radice $S$:</p>\n<p><img src=\"/images/tikz/7200215fa19bbd707ac9891c4d6c6ab1.svg\" style=\"display: block; width: 100%; height: auto; max-height: 600px;\" class=\"tikz-svg\" />\n<img src=\"/images/tikz/7cc05607c592465f3113ea1f1ee35ee5.svg\" style=\"display: block; width: 100%; height: auto; max-height: 600px;\" class=\"tikz-svg\" />\n<img src=\"/images/tikz/6239c84d96fda5387fc44fd46339f2ce.svg\" style=\"display: block; width: 100%; height: auto; max-height: 600px;\" class=\"tikz-svg\" />\n<img src=\"/images/tikz/d5356d9e4104dbad6d82d2eb0918bb0f.svg\" style=\"display: block; width: 100%; height: auto; max-height: 600px;\" class=\"tikz-svg\" />\n<img src=\"/images/tikz/2a401a786f2da83f56ba6c461a97801c.svg\" style=\"display: block; width: 100%; height: auto; max-height: 600px;\" class=\"tikz-svg\" /></p>\n<h3 id=\"bottom-up-data-directed\">Bottom-up (data-directed)</h3>\n<p>Parte dalle parole e risale combinando in costituenti.</p>\n<p><img src=\"/images/tikz/349b24732100c60715dc4c8fe8a1926b.svg\" style=\"display: block; width: 100%; height: auto; max-height: 600px;\" class=\"tikz-svg\" />\n<img src=\"/images/tikz/15c5cf38b9e0e2ffa3777e1ed08f676d.svg\" style=\"display: block; width: 100%; height: auto; max-height: 600px;\" class=\"tikz-svg\" />\n<img src=\"/images/tikz/333a97a7d26529a4069e5875d3575a43.svg\" style=\"display: block; width: 100%; height: auto; max-height: 600px;\" class=\"tikz-svg\" />\n<img src=\"/images/tikz/7744a28b8344e8400ac22de97145da55.svg\" style=\"display: block; width: 100%; height: auto; max-height: 600px;\" class=\"tikz-svg\" />\n<img src=\"/images/tikz/87cf67ee1eb82df05562fb76c2a393fa.svg\" style=\"display: block; width: 100%; height: auto; max-height: 600px;\" class=\"tikz-svg\" />\n<img src=\"/images/tikz/b1d832ebd8334f4f81304993876f8160.svg\" style=\"display: block; width: 100%; height: auto; max-height: 600px;\" class=\"tikz-svg\" /></p>\n<h2 id=\"ambiguita-strutturale\">Ambiguità strutturale</h2>\n<p>Un’importante sfida nel parsing sintattico è la <strong>presenza di più alberi possibili per una stessa frase</strong>, ossia <em>ambiguità strutturale</em>.</p>\n<h3 id=\"esempio-classico\">Esempio classico</h3>\n<p><strong>Frase</strong>:  </p>\n<blockquote>\n<p>&ldquo;He saw the man with the telescope&rdquo;</p>\n</blockquote>\n<p>Questa frase ha <strong>due interpretazioni</strong> sintattiche distinte:</p>\n<ol>\n<li>\n<p><strong>Interpretazione 1</strong> – <em>Ha visto l’uomo con il telescopio</em> (cioè, l’uomo ha il telescopio)<br />\n   → Il sintagma preposizionale &ldquo;with the telescope&rdquo; si collega al <strong>nome &ldquo;man&rdquo;</strong></p>\n</li>\n<li>\n<p><strong>Interpretazione 2</strong> – <em>Ha visto (con il telescopio) l’uomo</em><br />\n   → Il sintagma preposizionale &ldquo;with the telescope&rdquo; si collega al <strong>verbo &ldquo;saw&rdquo;</strong></p>\n</li>\n</ol>\n<h3 id=\"implicazioni\">Implicazioni</h3>\n<ul>\n<li>Queste ambiguità sono comuni in linguaggio naturale.</li>\n<li>Rappresentano un ostacolo per i parser sintattici deterministici.</li>\n<li>In NLP, è spesso necessario ricorrere a <strong>modelli probabilistici</strong> o <strong>contesto semantico</strong> per risolverle.</li>\n</ul>\n<p>Anche se una frase non è ambigua globalmente, può essere ambigua localmente, e può essere computazionalmente costosa risolverla. Come ad esempio:</p>\n<p><strong>Frase</strong>:  </p>\n<blockquote>\n<p>&ldquo;Book that flight&rdquo;</p>\n</blockquote>\n<ul>\n<li>La frase non è ambigua globalmente.</li>\n<li>Quando il parser vede la parola <em>Book</em> non sa se si tratta di un verbo o un nome, per cui non riesce a decidere la sua [Part-of-Speech Tagging|PoS] corretta.</li>\n</ul>\n<h2 id=\"approccio-backtracking-nel-parsing\">Approccio Backtracking nel Parsing</h2>\n<p>Uno degli approcci più semplici per il parsing sintattico è il <strong>backtracking</strong>, in cui si esplorano <strong>tutte le possibili derivazioni</strong> della frase a partire dalla grammatica, tornando indietro ogni volta che un&rsquo;analisi si rivela non valida. Esattamente l&rsquo;approccio utilizzato negli esempi di parsing sintattico (Top-Down e Bottom-Up) precedenti.</p>\n<h3 id=\"come-funziona\">Come funziona</h3>\n<ul>\n<li>Si parte dal simbolo iniziale della grammatica.</li>\n<li>Si tenta di derivare la frase applicando le regole grammaticali.</li>\n<li>Se un cammino porta a un vicolo cieco, si torna indietro (<em>backtrack</em>) e si prova una derivazione alternativa.</li>\n</ul>\n<h3 id=\"svantaggi-del-backtracking\">Svantaggi del backtracking</h3>\n<ul>\n<li>È <strong>computazionalmente costoso</strong>, perché in presenza di ambiguità strutturale o grammatiche complesse, il numero di derivazioni può crescere <strong>esponenzialmente</strong>.</li>\n<li>Può causare <strong>ripetizione di lavoro</strong>, esplorando più volte gli stessi sottoproblemi.</li>\n</ul>\n<h3 id=\"programmazione-dinamica-come-alternativa\">Programmazione dinamica come alternativa</h3>\n<p>Per superare queste limitazioni, si preferisce usare <strong>algoritmi di parsing basati su programmazione dinamica</strong>, come l’algoritmo <strong>CKY</strong>, che:</p>\n<ul>\n<li>Evita ripetizioni memorizzando i risultati intermedi.</li>\n<li>Riduce il tempo di parsing a <strong>tempo polinomiale</strong> per grammatiche in forma normale di Chomsky (CNF).</li>\n<li>È più adatto per implementazioni efficienti in NLP.</li>\n</ul>\n<p>👉 Vedi anche: <a href=\"/theory/nlp/Sintassi/Algoritmo CKY\" class=\"text-blue-600 hover:underline\">Algoritmo CKY</a></p>\n<h2 id=\"conclusioni\">Conclusioni</h2>\n<p>Il <strong>parsing sintattico</strong> è un passaggio cruciale nell&rsquo;analisi del linguaggio naturale, in quanto permette di attribuire una struttura gerarchica e formale alle frasi. In questa nota abbiamo:</p>\n<ul>\n<li>Esplorato cosa siano gli <strong>alberi sintattici</strong> e il loro ruolo nella rappresentazione della struttura delle frasi.</li>\n<li>Analizzato il concetto di <strong>ambiguità strutturale</strong>, evidenziando come una stessa frase possa dare luogo a interpretazioni sintattiche differenti.</li>\n<li>Descritto l&rsquo;approccio di <strong>backtracking</strong> e i suoi limiti computazionali, motivando la preferenza per tecniche più efficienti come la <strong>programmazione dinamica</strong>.</li>\n</ul>\n<p>Comprendere il parsing sintattico non solo è essenziale per applicazioni NLP come l&rsquo;analisi grammaticale automatica, ma fornisce anche una base teorica solida per comprendere come i computer possano &ldquo;capire&rdquo; il linguaggio umano. È un ponte tra la linguistica e l&rsquo;informatica che dimostra la potenza e la bellezza delle grammatiche formali.</p>"
}