{
  "title": "üé≤ Algoritmo CKY Probabilistico (PCKY)",
  "content": "<style>pre { line-height: 125%; }\ntd.linenos .normal { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }\nspan.linenos { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }\ntd.linenos .special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }\nspan.linenos.special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }\n.codehilite .hll { background-color: #ffffcc }\n.codehilite { background: #f8f8f8; }\n.codehilite .c { color: #3D7B7B; font-style: italic } /* Comment */\n.codehilite .err { border: 1px solid #F00 } /* Error */\n.codehilite .k { color: #008000; font-weight: bold } /* Keyword */\n.codehilite .o { color: #666 } /* Operator */\n.codehilite .ch { color: #3D7B7B; font-style: italic } /* Comment.Hashbang */\n.codehilite .cm { color: #3D7B7B; font-style: italic } /* Comment.Multiline */\n.codehilite .cp { color: #9C6500 } /* Comment.Preproc */\n.codehilite .cpf { color: #3D7B7B; font-style: italic } /* Comment.PreprocFile */\n.codehilite .c1 { color: #3D7B7B; font-style: italic } /* Comment.Single */\n.codehilite .cs { color: #3D7B7B; font-style: italic } /* Comment.Special */\n.codehilite .gd { color: #A00000 } /* Generic.Deleted */\n.codehilite .ge { font-style: italic } /* Generic.Emph */\n.codehilite .ges { font-weight: bold; font-style: italic } /* Generic.EmphStrong */\n.codehilite .gr { color: #E40000 } /* Generic.Error */\n.codehilite .gh { color: #000080; font-weight: bold } /* Generic.Heading */\n.codehilite .gi { color: #008400 } /* Generic.Inserted */\n.codehilite .go { color: #717171 } /* Generic.Output */\n.codehilite .gp { color: #000080; font-weight: bold } /* Generic.Prompt */\n.codehilite .gs { font-weight: bold } /* Generic.Strong */\n.codehilite .gu { color: #800080; font-weight: bold } /* Generic.Subheading */\n.codehilite .gt { color: #04D } /* Generic.Traceback */\n.codehilite .kc { color: #008000; font-weight: bold } /* Keyword.Constant */\n.codehilite .kd { color: #008000; font-weight: bold } /* Keyword.Declaration */\n.codehilite .kn { color: #008000; font-weight: bold } /* Keyword.Namespace */\n.codehilite .kp { color: #008000 } /* Keyword.Pseudo */\n.codehilite .kr { color: #008000; font-weight: bold } /* Keyword.Reserved */\n.codehilite .kt { color: #B00040 } /* Keyword.Type */\n.codehilite .m { color: #666 } /* Literal.Number */\n.codehilite .s { color: #BA2121 } /* Literal.String */\n.codehilite .na { color: #687822 } /* Name.Attribute */\n.codehilite .nb { color: #008000 } /* Name.Builtin */\n.codehilite .nc { color: #00F; font-weight: bold } /* Name.Class */\n.codehilite .no { color: #800 } /* Name.Constant */\n.codehilite .nd { color: #A2F } /* Name.Decorator */\n.codehilite .ni { color: #717171; font-weight: bold } /* Name.Entity */\n.codehilite .ne { color: #CB3F38; font-weight: bold } /* Name.Exception */\n.codehilite .nf { color: #00F } /* Name.Function */\n.codehilite .nl { color: #767600 } /* Name.Label */\n.codehilite .nn { color: #00F; font-weight: bold } /* Name.Namespace */\n.codehilite .nt { color: #008000; font-weight: bold } /* Name.Tag */\n.codehilite .nv { color: #19177C } /* Name.Variable */\n.codehilite .ow { color: #A2F; font-weight: bold } /* Operator.Word */\n.codehilite .w { color: #BBB } /* Text.Whitespace */\n.codehilite .mb { color: #666 } /* Literal.Number.Bin */\n.codehilite .mf { color: #666 } /* Literal.Number.Float */\n.codehilite .mh { color: #666 } /* Literal.Number.Hex */\n.codehilite .mi { color: #666 } /* Literal.Number.Integer */\n.codehilite .mo { color: #666 } /* Literal.Number.Oct */\n.codehilite .sa { color: #BA2121 } /* Literal.String.Affix */\n.codehilite .sb { color: #BA2121 } /* Literal.String.Backtick */\n.codehilite .sc { color: #BA2121 } /* Literal.String.Char */\n.codehilite .dl { color: #BA2121 } /* Literal.String.Delimiter */\n.codehilite .sd { color: #BA2121; font-style: italic } /* Literal.String.Doc */\n.codehilite .s2 { color: #BA2121 } /* Literal.String.Double */\n.codehilite .se { color: #AA5D1F; font-weight: bold } /* Literal.String.Escape */\n.codehilite .sh { color: #BA2121 } /* Literal.String.Heredoc */\n.codehilite .si { color: #A45A77; font-weight: bold } /* Literal.String.Interpol */\n.codehilite .sx { color: #008000 } /* Literal.String.Other */\n.codehilite .sr { color: #A45A77 } /* Literal.String.Regex */\n.codehilite .s1 { color: #BA2121 } /* Literal.String.Single */\n.codehilite .ss { color: #19177C } /* Literal.String.Symbol */\n.codehilite .bp { color: #008000 } /* Name.Builtin.Pseudo */\n.codehilite .fm { color: #00F } /* Name.Function.Magic */\n.codehilite .vc { color: #19177C } /* Name.Variable.Class */\n.codehilite .vg { color: #19177C } /* Name.Variable.Global */\n.codehilite .vi { color: #19177C } /* Name.Variable.Instance */\n.codehilite .vm { color: #19177C } /* Name.Variable.Magic */\n.codehilite .il { color: #666 } /* Literal.Number.Integer.Long */\n\n/* Styling per blocchi di codice */\n.codehilite {\n    background: transparent !important;\n    border-radius: 8px;\n    overflow: hidden;\n}\n.codehilite pre {\n    background: transparent !important;\n    margin: 0 !important;\n    padding: 20px !important;\n    font-family: 'Monaco', 'Menlo', 'Consolas', monospace !important;\n    font-size: 14px !important;\n    line-height: 1.5 !important;\n    white-space: pre !important;\n    overflow-x: auto !important;\n    color: inherit !important;\n}\n.codehilite code {\n    background: transparent !important;\n    padding: 0 !important;\n    font-family: inherit !important;\n}\n\n\n.code-wrapper { \n    position: relative; \n}\n.copy-button {\n    position: absolute; \n    top: 12px; \n    right: 12px; \n    padding: 6px 12px; \n    font-size: 12px;\n    cursor: pointer; \n    border: none; \n    border-radius: 4px; \n    background: rgba(255,255,255,0.9);\n    color: #374151; \n    transition: all 0.2s ease;\n    font-weight: 500;\n}\n.copy-button:hover { \n    background: rgba(255,255,255,1);\n    transform: translateY(-1px);\n}\n\n\ndetails.code-container {\n    border: 1px solid #e5e7eb; \n    border-radius: 12px; \n    background: #f9fafb;\n    margin: 16px 0;\n    transition: all 0.3s ease;\n}\ndetails.code-container summary {\n    padding: 12px 16px;\n    font-size: 14px; \n    color: #6b7280; \n    cursor: pointer; \n    outline: none; \n    user-select: none;\n    font-weight: 500;\n}\ndetails.code-container[open] summary::after { \n    content: \" (Hide Code)\"; \n    color: #9ca3af; \n}\ndetails.code-container:not([open]) summary::after { \n    content: \" (Show Code)\"; \n    color: #d1d5db; \n}\ndetails.code-container .code-wrapper {\n    padding: 0;\n    margin: 0;\n}\n/* Blocchi di codice sempre visibili */\n.code-visible {\n    border: 1px solid #e5e7eb;\n    border-radius: 12px;\n    background: #f9fafb;\n    margin: 16px 0;\n}\n.code-visible .code-wrapper {\n    padding: 0;\n    margin: 0;\n}\n</style>\n<p>L&rsquo;algoritmo <strong>CKY Probabilistico</strong> (PCKY) √® una variante avanzata dell&rsquo;algoritmo CKY classico che introduce <strong>probabilit√†</strong> per selezionare l&rsquo;analisi sintattica pi√π plausibile di una frase. Utilizza una <strong>Probabilistic Context-Free Grammar (PCFG)</strong> e combina programmazione dinamica con tecniche di massimizzazione delle probabilit√†.</p>\n<h2 id=\"cose-una-pcfg\">üìä Cos&rsquo;√® una PCFG?</h2>\n<p>Una <strong>Probabilistic Context-Free Grammar</strong> assegna a ogni regola di produzione una probabilit√†, con due vincoli fondamentali:\n1. Per ogni non-terminale $A$, la somma delle probabilit√† di tutte le regole con $A$ a sinistra deve essere 1:\n   $$\n   \\sum_{\\alpha} P(A \\rightarrow \\alpha) = 1\n   $$\n2. La grammatica deve essere in <strong>Forma Normale di Chomsky (CNF)</strong>.</p>\n<h2 id=\"struttura-della-tabella-pcky\">üßÆ Struttura della Tabella PCKY</h2>\n<p>La tabella √® una matrice triangolare superiore di dimensioni $(n+1) \\times (n+1)$, dove ogni cella <code>table[i][j]</code> contiene:\n- <strong>Non-terminali</strong> con la <strong>probabilit√† massima</strong> di generare la sottostringa da $i$ a $j$.\n- <strong>Backpointers</strong> per ricostruire l&rsquo;albero di derivazione ottimale.</p>\n<h3 id=\"formato-di-una-cella\">Formato di una cella:</h3>\n$$\ntable[i][j][A] = \n\\begin{cases} \n\\text{probabilit√† massima} & \\text{se } A \\text{ genera } w_i \\dots w_{j-1} \\\\\n\\text{backpointer } (k, B, C) & \\text{indici e simboli per la ricostruzione}\n\\end{cases}\n$$\n<p><strong>Esempio di tabella per &ldquo;John loves Mary&rdquo;:</strong>\n|       | 0                  | 1                  | 2                  | 3                    |\n|-------|--------------------|--------------------|--------------------|----------------------|\n| <strong>0</strong> | -                  | <code>NP: 0.3</code>          | ‚àÖ                  | <code>S: 0.1512</code>          |\n| <strong>1</strong> | -                  | -                  | <code>V: 1.0</code>           | <code>VP: 0.63</code>           |\n| <strong>2</strong> | -                  | -                  | -                  | <code>NP: 0.7</code>            |\n| <strong>3</strong> | -                  | -                  | -                  | -                    |</p>\n<h2 id=\"meccanismo-del-pcky-tre-fasi-chiave\">üîç Meccanismo del PCKY: Tre Fasi Chiave</h2>\n<h3 id=\"1-inizializzazione-terminali\">1. <strong>Inizializzazione (Terminali)</strong></h3>\n<p>Per ogni parola $w_j$ nella posizione $j$:\n- Per ogni regola terminale $A \\rightarrow w_j$ con probabilit√† $p$:\n  - Imposta $table[j-1][j][A] = p$<br />\n  - Esempio: Se $NP \\rightarrow \\text{John}\\ [0.3]$, allora $table[0][1][NP] = 0.3$.</p>\n<h3 id=\"2-combinazione-regole-binarie\">2. <strong>Combinazione (Regole Binarie)</strong></h3>\n<p>Per ogni sottostringa di lunghezza $l \\geq 2$ e posizione iniziale $i$:\n- Per ogni punto di split $k$ tra $i+1$ e $j-1$:\n  - Per ogni coppia di non-terminali $(B, C)$ in $table[i][k]$ e $table[k][j]$:\n    - Calcola la probabilit√† <strong>congiunta</strong>:\n      $$\n      P_{\\text{new}} = P(B) \\times P(C) \\times P(A \\rightarrow B\\ C)\n      $$\n    - Se $P_{\\text{new}} > P(A) \\text{ corrente in } table[i][j]$, aggiorna la cella.</p>\n<h3 id=\"3-selezione-della-probabilita-massima\">3. <strong>Selezione della Probabilit√† Massima</strong></h3>\n<p>Mantieni solo la <strong>probabilit√† massima</strong> per ogni non-terminale $A$ in $table[i][j]$, registrando il backpointer $(k, B, C)$ che ha generato il valore.</p>\n<h2 id=\"pseudocodice-formale-del-pcky\">üìú Pseudocodice Formale del PCKY</h2>\n$$\n\\begin{array}{ll}\n\\textbf{function } \\text{PCKY-Parse}(words, \\text{PCFG}) \\rightarrow \\text{table} \\\\[1em]\n1. & n \\leftarrow \\text{length}(words) \\\\\n2. & \\text{Inizializza } table[0 \\dots n][0 \\dots n] \\text{ come mappa vuota} \\\\\n3. & \\\\\n4. & \\textbf{for } j = 1 \\text{ to } n \\textbf{ do} \\quad \\triangleright \\text{Inizializzazione terminali} \\\\\n5. & \\quad \\textbf{for each } (A \\rightarrow words[j-1]) \\in \\text{PCFG} \\textbf{ do} \\\\\n6. & \\quad \\quad table[j-1][j][A] \\leftarrow \\{ \\text{prob: } P(A \\rightarrow words[j-1]), \\text{ back: } \\emptyset \\} \\\\\n7. & \\\\\n8. & \\textbf{for } l = 2 \\text{ to } n \\textbf{ do} \\quad \\triangleright \\text{Sottostringhe di lunghezza } l \\\\\n9. & \\quad \\textbf{for } i = 0 \\text{ to } n - l \\textbf{ do} \\\\\n10. & \\quad \\quad j \\leftarrow i + l \\\\\n11. & \\quad \\quad \\textbf{for } k = i + 1 \\text{ to } j - 1 \\textbf{ do} \\quad \\triangleright \\text{Tutti i possibili split} \\\\\n12. & \\quad \\quad \\quad \\textbf{for each } B \\in table[i][k] \\textbf{ do} \\\\\n13. & \\quad \\quad \\quad \\quad \\textbf{for each } C \\in table[k][j] \\textbf{ do} \\\\\n14. & \\quad \\quad \\quad \\quad \\quad \\textbf{for each } (A \\rightarrow B\\ C) \\in \\text{PCFG} \\textbf{ do} \\\\\n15. & \\quad \\quad \\quad \\quad \\quad \\quad p_{\\text{new}} \\leftarrow table[i][k][B].\\text{prob} \\times table[k][j][C].\\text{prob} \\times P(A \\rightarrow B\\ C) \\\\\n16. & \\quad \\quad \\quad \\quad \\quad \\quad \\textbf{if } p_{\\text{new}} > table[i][j].\\text{get}(A, 0) \\textbf{ then} \\\\\n17. & \\quad \\quad \\quad \\quad \\quad \\quad \\quad table[i][j][A] \\leftarrow \\{ \\text{prob: } p_{\\text{new}}, \\text{ back: } (k, B, C) \\} \\\\\n18. & \\\\\n19. & \\textbf{return } table\n\\end{array}\n$$\n<h3 id=\"spiegazione-dello-pseudocodice\">Spiegazione dello Pseudocodice</h3>\n<ul>\n<li><strong>Righe 4-6</strong>: Inizializzazione delle celle diagonali con le probabilit√† delle regole terminali.</li>\n<li><strong>Righe 8-17</strong>: Riempimento della tabella per sottostringhe di lunghezza crescente:</li>\n<li>Per ogni split point $k$, combina le probabilit√† dei non-terminali $B$ e $C$.</li>\n<li>Calcola la probabilit√† congiunta e aggiorna la cella solo se supera il valore corrente.</li>\n</ul>\n<h2 id=\"esempio-dettagliato-john-loves-mary\">üìò Esempio Dettagliato: &ldquo;John loves Mary&rdquo;</h2>\n<h3 id=\"grammatica-pcfg\">Grammatica PCFG:</h3>\n$$\n\\begin{align*}\nS   & \\rightarrow NP\\ VP \\quad [1.0] \\\\\nNP  & \\rightarrow \\text{John} \\quad [0.3] \\\\\nNP  & \\rightarrow \\text{Mary} \\quad [0.7] \\\\\nVP  & \\rightarrow V\\ NP \\quad [0.9] \\\\\nVP  & \\rightarrow V \\quad [0.1] \\\\\nV   & \\rightarrow \\text{loves} \\quad [1.0]\n\\end{align*}\n$$\n<h3 id=\"fase-1-inizializzazione\">Fase 1: Inizializzazione</h3>\n<p>Riempimento delle celle diagonali con regole terminali:</p>\n<table>\n<thead>\n<tr>\n<th>Cella</th>\n<th>Contenuto</th>\n<th>Regola Applicata</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>table[0][1]</code></td>\n<td><code>NP: 0.3</code></td>\n<td>$NP \\rightarrow \\text{John}$</td>\n</tr>\n<tr>\n<td><code>table[1][2]</code></td>\n<td><code>V: 1.0</code></td>\n<td>$V \\rightarrow \\text{loves}$</td>\n</tr>\n<tr>\n<td><code>table[2][3]</code></td>\n<td><code>NP: 0.7</code></td>\n<td>$NP \\rightarrow \\text{Mary}$</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"fase-2-combinazione-per-table13-loves-mary\">Fase 2: Combinazione per <code>table[1][3]</code> (&ldquo;loves Mary&rdquo;)</h3>\n<ul>\n<li><strong>Split point</strong>: $k = 2$</li>\n<li><strong>Componenti</strong>:</li>\n<li>$B = V$ (probabilit√†: $1.0$ da <code>table[1][2]</code>)</li>\n<li>$C = NP$ (probabilit√†: $0.7$ da <code>table[2][3]</code>)</li>\n<li><strong>Regola applicata</strong>: $VP \\rightarrow V\\ NP$ con $P = 0.9$</li>\n</ul>\n$$\nP_{\\text{new}} = P(V) \\times P(NP) \\times P(VP \\rightarrow V\\ NP) = 1.0 \\times 0.7 \\times 0.9 = 0.63\n$$\n<p><strong>Aggiornamento</strong>: $table[1][3] = VP: 0.63$</p>\n<h3 id=\"fase-3-combinazione-per-table03-john-loves-mary\">Fase 3: Combinazione per <code>table[0][3]</code> (&ldquo;John loves Mary&rdquo;)</h3>\n<ul>\n<li><strong>Split point</strong>: $k = 1$</li>\n<li><strong>Componenti</strong>:</li>\n<li>$B = NP$ (probabilit√†: $0.3$ da <code>table[0][1]</code>)</li>\n<li>$C = VP$ (probabilit√†: $0.63$ da <code>table[1][3]</code>)</li>\n<li><strong>Regola applicata</strong>: $S \\rightarrow NP\\ VP$ con $P = 1.0$</li>\n</ul>\n$$\nP_{\\text{new}} = P(NP) \\times P(VP) \\times P(S \\rightarrow NP\\ VP) = 0.3 \\times 0.63 \\times 1.0 = 0.189\n$$\n<p><strong>Aggiornamento</strong>: $table[0][3] = S: 0.189$</p>\n<h3 id=\"tabella-finale\">Tabella Finale:</h3>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>0</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>0</strong></td>\n<td>-</td>\n<td><code>NP: 0.3</code></td>\n<td>‚àÖ</td>\n<td><code>S: 0.189</code></td>\n</tr>\n<tr>\n<td><strong>1</strong></td>\n<td>-</td>\n<td>-</td>\n<td><code>V: 1.0</code></td>\n<td><code>VP: 0.63</code></td>\n</tr>\n<tr>\n<td><strong>2</strong></td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n<td><code>NP: 0.7</code></td>\n</tr>\n<tr>\n<td><strong>3</strong></td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"differenze-chiave-dal-cky-classico\">üîÑ Differenze Chiave dal CKY Classico</h2>\n<table>\n<thead>\n<tr>\n<th>Caratteristica</th>\n<th>CKY Classico</th>\n<th>PCKY Probabilistico</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Contenuto celle</strong></td>\n<td>Insiemi di non-terminali</td>\n<td>Probabilit√† + backpointers</td>\n</tr>\n<tr>\n<td><strong>Obiettivo</strong></td>\n<td>Verifica grammaticalit√†</td>\n<td>Selezione albero pi√π probabile</td>\n</tr>\n<tr>\n<td><strong>Regole</strong></td>\n<td>CNF standard</td>\n<td>PCFG in CNF</td>\n</tr>\n<tr>\n<td><strong>Complessit√†</strong></td>\n<td>$O(n^3 \\cdot |G|)$</td>\n<td>$O(n^3 \\cdot |G|^3)$ (per backpointers)</td>\n</tr>\n<tr>\n<td><strong>Ambiguit√†</strong></td>\n<td>Restituisce tutte le opzioni</td>\n<td>Sceglie l&rsquo;opzione con probabilit√† max</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"limitazioni-pratiche\">‚ö†Ô∏è Limitazioni Pratiche</h2>\n<ol>\n<li><strong>Indipendenza delle Regole</strong>: Le PCFG assumono che le regole siano indipendenti, il che non √® realistico in linguaggio naturale.</li>\n<li>\n<p>Esempio: La scelta tra &ldquo;NP ‚Üí John&rdquo; e &ldquo;NP ‚Üí Mary&rdquo; non dipende dal contesto.</p>\n</li>\n<li>\n<p><strong>Addestramento</strong>: Richiede un <strong>albero sintattico annotato</strong> per stimare le probabilit√†, operazione costosa.</p>\n</li>\n<li>\n<p><strong>Underflow Numerico</strong>: Le probabilit√† moltiplicate diventano rapidamente piccole. Soluzione: Usare <strong>log-probabilit√†</strong>:\n   $$\n   \\log(P_{\\text{new}}) = \\log(P(B)) + \\log(P(C)) + \\log(P(A \\rightarrow B\\ C))\n   $$</p>\n</li>\n</ol>\n<h2 id=\"applicazioni-pratiche\">üèÜ Applicazioni Pratiche</h2>\n<ul>\n<li>\n<p><strong>Disambiguazione sintattica</strong>:<br />\n<em>&ldquo;He saw the girl with the telescope&rdquo;</em> ‚Üí Decide se &ldquo;with the telescope&rdquo; modifica &ldquo;saw&rdquo; o &ldquo;girl&rdquo;.</p>\n</li>\n<li>\n<p><strong>Machine Translation</strong>: Seleziona l&rsquo;analisi sorgente pi√π plausibile per generare una traduzione corretta.</p>\n</li>\n<li>\n<p><strong>Information Extraction</strong>: Identifica relazioni (soggetto, oggetto) in frasi complesse.</p>\n</li>\n</ul>"
}