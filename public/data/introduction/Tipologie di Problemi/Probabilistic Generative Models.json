{
  "title": "Untitled",
  "content": "<style>pre { line-height: 125%; }\ntd.linenos .normal { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }\nspan.linenos { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }\ntd.linenos .special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }\nspan.linenos.special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }\n.codehilite .hll { background-color: #ffffcc }\n.codehilite { background: #f8f8f8; }\n.codehilite .c { color: #3D7B7B; font-style: italic } /* Comment */\n.codehilite .err { border: 1px solid #F00 } /* Error */\n.codehilite .k { color: #008000; font-weight: bold } /* Keyword */\n.codehilite .o { color: #666 } /* Operator */\n.codehilite .ch { color: #3D7B7B; font-style: italic } /* Comment.Hashbang */\n.codehilite .cm { color: #3D7B7B; font-style: italic } /* Comment.Multiline */\n.codehilite .cp { color: #9C6500 } /* Comment.Preproc */\n.codehilite .cpf { color: #3D7B7B; font-style: italic } /* Comment.PreprocFile */\n.codehilite .c1 { color: #3D7B7B; font-style: italic } /* Comment.Single */\n.codehilite .cs { color: #3D7B7B; font-style: italic } /* Comment.Special */\n.codehilite .gd { color: #A00000 } /* Generic.Deleted */\n.codehilite .ge { font-style: italic } /* Generic.Emph */\n.codehilite .ges { font-weight: bold; font-style: italic } /* Generic.EmphStrong */\n.codehilite .gr { color: #E40000 } /* Generic.Error */\n.codehilite .gh { color: #000080; font-weight: bold } /* Generic.Heading */\n.codehilite .gi { color: #008400 } /* Generic.Inserted */\n.codehilite .go { color: #717171 } /* Generic.Output */\n.codehilite .gp { color: #000080; font-weight: bold } /* Generic.Prompt */\n.codehilite .gs { font-weight: bold } /* Generic.Strong */\n.codehilite .gu { color: #800080; font-weight: bold } /* Generic.Subheading */\n.codehilite .gt { color: #04D } /* Generic.Traceback */\n.codehilite .kc { color: #008000; font-weight: bold } /* Keyword.Constant */\n.codehilite .kd { color: #008000; font-weight: bold } /* Keyword.Declaration */\n.codehilite .kn { color: #008000; font-weight: bold } /* Keyword.Namespace */\n.codehilite .kp { color: #008000 } /* Keyword.Pseudo */\n.codehilite .kr { color: #008000; font-weight: bold } /* Keyword.Reserved */\n.codehilite .kt { color: #B00040 } /* Keyword.Type */\n.codehilite .m { color: #666 } /* Literal.Number */\n.codehilite .s { color: #BA2121 } /* Literal.String */\n.codehilite .na { color: #687822 } /* Name.Attribute */\n.codehilite .nb { color: #008000 } /* Name.Builtin */\n.codehilite .nc { color: #00F; font-weight: bold } /* Name.Class */\n.codehilite .no { color: #800 } /* Name.Constant */\n.codehilite .nd { color: #A2F } /* Name.Decorator */\n.codehilite .ni { color: #717171; font-weight: bold } /* Name.Entity */\n.codehilite .ne { color: #CB3F38; font-weight: bold } /* Name.Exception */\n.codehilite .nf { color: #00F } /* Name.Function */\n.codehilite .nl { color: #767600 } /* Name.Label */\n.codehilite .nn { color: #00F; font-weight: bold } /* Name.Namespace */\n.codehilite .nt { color: #008000; font-weight: bold } /* Name.Tag */\n.codehilite .nv { color: #19177C } /* Name.Variable */\n.codehilite .ow { color: #A2F; font-weight: bold } /* Operator.Word */\n.codehilite .w { color: #BBB } /* Text.Whitespace */\n.codehilite .mb { color: #666 } /* Literal.Number.Bin */\n.codehilite .mf { color: #666 } /* Literal.Number.Float */\n.codehilite .mh { color: #666 } /* Literal.Number.Hex */\n.codehilite .mi { color: #666 } /* Literal.Number.Integer */\n.codehilite .mo { color: #666 } /* Literal.Number.Oct */\n.codehilite .sa { color: #BA2121 } /* Literal.String.Affix */\n.codehilite .sb { color: #BA2121 } /* Literal.String.Backtick */\n.codehilite .sc { color: #BA2121 } /* Literal.String.Char */\n.codehilite .dl { color: #BA2121 } /* Literal.String.Delimiter */\n.codehilite .sd { color: #BA2121; font-style: italic } /* Literal.String.Doc */\n.codehilite .s2 { color: #BA2121 } /* Literal.String.Double */\n.codehilite .se { color: #AA5D1F; font-weight: bold } /* Literal.String.Escape */\n.codehilite .sh { color: #BA2121 } /* Literal.String.Heredoc */\n.codehilite .si { color: #A45A77; font-weight: bold } /* Literal.String.Interpol */\n.codehilite .sx { color: #008000 } /* Literal.String.Other */\n.codehilite .sr { color: #A45A77 } /* Literal.String.Regex */\n.codehilite .s1 { color: #BA2121 } /* Literal.String.Single */\n.codehilite .ss { color: #19177C } /* Literal.String.Symbol */\n.codehilite .bp { color: #008000 } /* Name.Builtin.Pseudo */\n.codehilite .fm { color: #00F } /* Name.Function.Magic */\n.codehilite .vc { color: #19177C } /* Name.Variable.Class */\n.codehilite .vg { color: #19177C } /* Name.Variable.Global */\n.codehilite .vi { color: #19177C } /* Name.Variable.Instance */\n.codehilite .vm { color: #19177C } /* Name.Variable.Magic */\n.codehilite .il { color: #666 } /* Literal.Number.Integer.Long */\n\n/* Styling per blocchi di codice */\n.codehilite {\n    background: transparent !important;\n    border-radius: 8px;\n    overflow: hidden;\n}\n.codehilite pre {\n    background: transparent !important;\n    margin: 0 !important;\n    padding: 20px !important;\n    font-family: 'Monaco', 'Menlo', 'Consolas', monospace !important;\n    font-size: 14px !important;\n    line-height: 1.5 !important;\n    white-space: pre !important;\n    overflow-x: auto !important;\n    color: inherit !important;\n}\n.codehilite code {\n    background: transparent !important;\n    padding: 0 !important;\n    font-family: inherit !important;\n}\n\n\n.code-wrapper { \n    position: relative; \n}\n.copy-button {\n    position: absolute; \n    top: 12px; \n    right: 12px; \n    padding: 6px 12px; \n    font-size: 12px;\n    cursor: pointer; \n    border: none; \n    border-radius: 4px; \n    background: rgba(255,255,255,0.9);\n    color: #374151; \n    transition: all 0.2s ease;\n    font-weight: 500;\n}\n.copy-button:hover { \n    background: rgba(255,255,255,1);\n    transform: translateY(-1px);\n}\n\n\ndetails.code-container {\n    border: 1px solid #e5e7eb; \n    border-radius: 12px; \n    background: #f9fafb;\n    margin: 16px 0;\n    transition: all 0.3s ease;\n}\ndetails.code-container summary {\n    padding: 12px 16px;\n    font-size: 14px; \n    color: #6b7280; \n    cursor: pointer; \n    outline: none; \n    user-select: none;\n    font-weight: 500;\n}\ndetails.code-container[open] summary::after { \n    content: \" (Hide Code)\"; \n    color: #9ca3af; \n}\ndetails.code-container:not([open]) summary::after { \n    content: \" (Show Code)\"; \n    color: #d1d5db; \n}\ndetails.code-container .code-wrapper {\n    padding: 0;\n    margin: 0;\n}\n</style>\n<h2 id=\"modelli-generativi-probabilistici\">Modelli Generativi Probabilistici</h2>\n<p>I <strong>modelli generativi probabilistici</strong> sono una classe di modelli di apprendimento automatico che stimano la distribuzione congiunta delle caratteristiche $\\mathbf{x}$ e delle etichette $y$, ovvero $p(\\mathbf{x}, y)$. Questi modelli possono essere utilizzati per la classificazione e la generazione di nuovi dati.</p>\n<h3 id=\"definizione\">Definizione</h3>\n<p>Un modello generativo probabilistico apprende la distribuzione congiunta $p(\\mathbf{x}, y)$ e poi utilizza la regola di Bayes per calcolare la probabilità a posteriori:\n$$\np(y \\mid \\mathbf{x}) = \\frac{p(\\mathbf{x}, y)}{p(\\mathbf{x})} = \\frac{p(\\mathbf{x} \\mid y) p(y)}{p(\\mathbf{x})}\n$$</p>\n<p>Dove:\n- $p(\\mathbf{x} \\mid y)$ è la <strong>verosimiglianza</strong>, ovvero la probabilità di osservare $\\mathbf{x}$ dato $y$,\n- $p(y)$ è la <strong>probabilità a priori</strong> della classe $y$,\n- $p(\\mathbf{x})$ è la <strong>probabilità marginale</strong> di $\\mathbf{x}$, utilizzata per la normalizzazione.</p>\n<h3 id=\"esempi-di-modelli-generativi-probabilistici\">Esempi di Modelli Generativi Probabilistici</h3>\n<ol>\n<li><strong>Naive Bayes</strong>: Assume che le caratteristiche siano indipendenti dato $y$, semplificando il calcolo di $p(\\mathbf{x} \\mid y)$.</li>\n<li><strong>Analisi Discriminante Lineare (LDA)</strong>: Assume che $p(\\mathbf{x} \\mid y)$ segua una distribuzione gaussiana con covarianza comune tra le classi.</li>\n<li><strong>Modelli di Mixture Gaussiane (GMM)</strong>: Modella $p(\\mathbf{x})$ come una combinazione di più distribuzioni gaussiane, utile per clustering e generazione di dati.</li>\n<li><strong>Modelli Generativi Avversari (GANs)</strong>: Una rete generativa viene addestrata in competizione con un discriminatore per generare dati realistici.</li>\n<li><strong>Variational Autoencoders (VAEs)</strong>: Utilizzano metodi bayesiani per apprendere rappresentazioni latenti continue di dati complessi.</li>\n</ol>\n<h3 id=\"vantaggi-e-limitazioni\">Vantaggi e Limitazioni</h3>\n<p>✅ <strong>Vantaggi</strong>:\n- Capacità di generare nuovi dati simili a quelli di training.\n- Possono essere utilizzati per il data augmentation e la modellazione della distribuzione sottostante.\n- Flessibilità nell&rsquo;incorporare conoscenze a priori tramite la modellazione delle distribuzioni.</p>\n<p>❌ <strong>Limitazioni</strong>:\n- Le assunzioni sulle distribuzioni (es. gaussiane in LDA) possono non essere sempre realistiche.\n- Possono essere computazionalmente intensivi, specialmente per modelli generativi complessi come GANs e VAEs.\n- Sensibilità alla qualità dei dati di training: modelli generativi tendono a imparare le caratteristiche dei dati di input e possono soffrire di overfitting.</p>\n<h3 id=\"applicazioni\">Applicazioni</h3>\n<ul>\n<li><strong>Classificazione</strong>: Naive Bayes, LDA.</li>\n<li><strong>Generazione di dati</strong>: GANs, VAEs.</li>\n<li><strong>Elaborazione del linguaggio naturale</strong>: Generazione di testo, modelli basati su probabilità.</li>\n<li><strong>Computer Vision</strong>: Creazione di immagini sintetiche.</li>\n<li><strong>Clustering e segmentazione</strong>: GMM.</li>\n</ul>\n<hr />\n<p>📌 <strong>Nota</strong>: I modelli generativi probabilistici sono una potente alternativa ai modelli discriminativi, in quanto forniscono una comprensione più approfondita della distribuzione dei dati e possono essere usati non solo per la classificazione, ma anche per la generazione di nuovi esempi.</p>"
}