{
  "title": "**Classificazione**",
  "content": "<style>pre { line-height: 125%; }\ntd.linenos .normal { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }\nspan.linenos { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }\ntd.linenos .special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }\nspan.linenos.special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }\n.codehilite .hll { background-color: #ffffcc }\n.codehilite { background: #f8f8f8; }\n.codehilite .c { color: #3D7B7B; font-style: italic } /* Comment */\n.codehilite .err { border: 1px solid #F00 } /* Error */\n.codehilite .k { color: #008000; font-weight: bold } /* Keyword */\n.codehilite .o { color: #666 } /* Operator */\n.codehilite .ch { color: #3D7B7B; font-style: italic } /* Comment.Hashbang */\n.codehilite .cm { color: #3D7B7B; font-style: italic } /* Comment.Multiline */\n.codehilite .cp { color: #9C6500 } /* Comment.Preproc */\n.codehilite .cpf { color: #3D7B7B; font-style: italic } /* Comment.PreprocFile */\n.codehilite .c1 { color: #3D7B7B; font-style: italic } /* Comment.Single */\n.codehilite .cs { color: #3D7B7B; font-style: italic } /* Comment.Special */\n.codehilite .gd { color: #A00000 } /* Generic.Deleted */\n.codehilite .ge { font-style: italic } /* Generic.Emph */\n.codehilite .ges { font-weight: bold; font-style: italic } /* Generic.EmphStrong */\n.codehilite .gr { color: #E40000 } /* Generic.Error */\n.codehilite .gh { color: #000080; font-weight: bold } /* Generic.Heading */\n.codehilite .gi { color: #008400 } /* Generic.Inserted */\n.codehilite .go { color: #717171 } /* Generic.Output */\n.codehilite .gp { color: #000080; font-weight: bold } /* Generic.Prompt */\n.codehilite .gs { font-weight: bold } /* Generic.Strong */\n.codehilite .gu { color: #800080; font-weight: bold } /* Generic.Subheading */\n.codehilite .gt { color: #04D } /* Generic.Traceback */\n.codehilite .kc { color: #008000; font-weight: bold } /* Keyword.Constant */\n.codehilite .kd { color: #008000; font-weight: bold } /* Keyword.Declaration */\n.codehilite .kn { color: #008000; font-weight: bold } /* Keyword.Namespace */\n.codehilite .kp { color: #008000 } /* Keyword.Pseudo */\n.codehilite .kr { color: #008000; font-weight: bold } /* Keyword.Reserved */\n.codehilite .kt { color: #B00040 } /* Keyword.Type */\n.codehilite .m { color: #666 } /* Literal.Number */\n.codehilite .s { color: #BA2121 } /* Literal.String */\n.codehilite .na { color: #687822 } /* Name.Attribute */\n.codehilite .nb { color: #008000 } /* Name.Builtin */\n.codehilite .nc { color: #00F; font-weight: bold } /* Name.Class */\n.codehilite .no { color: #800 } /* Name.Constant */\n.codehilite .nd { color: #A2F } /* Name.Decorator */\n.codehilite .ni { color: #717171; font-weight: bold } /* Name.Entity */\n.codehilite .ne { color: #CB3F38; font-weight: bold } /* Name.Exception */\n.codehilite .nf { color: #00F } /* Name.Function */\n.codehilite .nl { color: #767600 } /* Name.Label */\n.codehilite .nn { color: #00F; font-weight: bold } /* Name.Namespace */\n.codehilite .nt { color: #008000; font-weight: bold } /* Name.Tag */\n.codehilite .nv { color: #19177C } /* Name.Variable */\n.codehilite .ow { color: #A2F; font-weight: bold } /* Operator.Word */\n.codehilite .w { color: #BBB } /* Text.Whitespace */\n.codehilite .mb { color: #666 } /* Literal.Number.Bin */\n.codehilite .mf { color: #666 } /* Literal.Number.Float */\n.codehilite .mh { color: #666 } /* Literal.Number.Hex */\n.codehilite .mi { color: #666 } /* Literal.Number.Integer */\n.codehilite .mo { color: #666 } /* Literal.Number.Oct */\n.codehilite .sa { color: #BA2121 } /* Literal.String.Affix */\n.codehilite .sb { color: #BA2121 } /* Literal.String.Backtick */\n.codehilite .sc { color: #BA2121 } /* Literal.String.Char */\n.codehilite .dl { color: #BA2121 } /* Literal.String.Delimiter */\n.codehilite .sd { color: #BA2121; font-style: italic } /* Literal.String.Doc */\n.codehilite .s2 { color: #BA2121 } /* Literal.String.Double */\n.codehilite .se { color: #AA5D1F; font-weight: bold } /* Literal.String.Escape */\n.codehilite .sh { color: #BA2121 } /* Literal.String.Heredoc */\n.codehilite .si { color: #A45A77; font-weight: bold } /* Literal.String.Interpol */\n.codehilite .sx { color: #008000 } /* Literal.String.Other */\n.codehilite .sr { color: #A45A77 } /* Literal.String.Regex */\n.codehilite .s1 { color: #BA2121 } /* Literal.String.Single */\n.codehilite .ss { color: #19177C } /* Literal.String.Symbol */\n.codehilite .bp { color: #008000 } /* Name.Builtin.Pseudo */\n.codehilite .fm { color: #00F } /* Name.Function.Magic */\n.codehilite .vc { color: #19177C } /* Name.Variable.Class */\n.codehilite .vg { color: #19177C } /* Name.Variable.Global */\n.codehilite .vi { color: #19177C } /* Name.Variable.Instance */\n.codehilite .vm { color: #19177C } /* Name.Variable.Magic */\n.codehilite .il { color: #666 } /* Literal.Number.Integer.Long */\n\n/* Styling per blocchi di codice */\n.codehilite {\n    background: transparent !important;\n    border-radius: 8px;\n    overflow: hidden;\n}\n.codehilite pre {\n    background: transparent !important;\n    margin: 0 !important;\n    padding: 20px !important;\n    font-family: 'Monaco', 'Menlo', 'Consolas', monospace !important;\n    font-size: 14px !important;\n    line-height: 1.5 !important;\n    white-space: pre !important;\n    overflow-x: auto !important;\n    color: inherit !important;\n}\n.codehilite code {\n    background: transparent !important;\n    padding: 0 !important;\n    font-family: inherit !important;\n}\n\n\n.code-wrapper { \n    position: relative; \n}\n.copy-button {\n    position: absolute; \n    top: 12px; \n    right: 12px; \n    padding: 6px 12px; \n    font-size: 12px;\n    cursor: pointer; \n    border: none; \n    border-radius: 4px; \n    background: rgba(255,255,255,0.9);\n    color: #374151; \n    transition: all 0.2s ease;\n    font-weight: 500;\n}\n.copy-button:hover { \n    background: rgba(255,255,255,1);\n    transform: translateY(-1px);\n}\n\n\ndetails.code-container {\n    border: 1px solid #e5e7eb; \n    border-radius: 12px; \n    background: #f9fafb;\n    margin: 16px 0;\n    transition: all 0.3s ease;\n}\ndetails.code-container summary {\n    padding: 12px 16px;\n    font-size: 14px; \n    color: #6b7280; \n    cursor: pointer; \n    outline: none; \n    user-select: none;\n    font-weight: 500;\n}\ndetails.code-container[open] summary::after { \n    content: \" (Hide Code)\"; \n    color: #9ca3af; \n}\ndetails.code-container:not([open]) summary::after { \n    content: \" (Show Code)\"; \n    color: #d1d5db; \n}\ndetails.code-container .code-wrapper {\n    padding: 0;\n    margin: 0;\n}\n</style>\n<h2 id=\"introduzione\"><strong>Introduzione</strong></h2>\n<p>Un compito molto comune nel machine learning è la <strong>classificazione</strong>, in cui l&rsquo;obiettivo è prevedere una <strong>categoria</strong> o una <strong>classe</strong> per un determinato dato.<br />\nAd esempio, dati alcuni attributi che descrivono un&rsquo;email, potremmo voler classificare il messaggio come <strong>spam</strong> o <strong>non-spam</strong>. Questo è un esempio di <strong>classificazione binaria</strong>.</p>\n<p>La classificazione è alla base di numerosi problemi in machine learning, tra cui:  </p>\n<ul>\n<li><strong>Riconoscimento di immagini</strong>: determinare se un&rsquo;immagine contiene un gatto o un cane.  </li>\n<li><strong>Diagnosi mediche</strong>: prevedere se un paziente ha una malattia basandosi su dati clinici.  </li>\n<li><strong>Elaborazione del linguaggio naturale (NLP)</strong>: categorizzare recensioni come positive o negative.  </li>\n</ul>\n<h2 id=\"classificazione-vs-regressione\"><strong>Classificazione vs Regressione</strong></h2>\n<p>Si potrebbe pensare che la classificazione sia semplicemente un caso particolare di regressione, dato che possiamo rappresentare l&rsquo;insieme delle possibili categorie come numeri naturali, ovvero un sottoinsieme di $\\mathbb{R}$.<br />\nL&rsquo;idea sarebbe quindi di usare la regressione standard e poi applicare un <strong>post-processing</strong> per convertire il valore di output in una categoria.<br />\nAd esempio, nel problema della rilevazione dello spam, potremmo applicare una soglia per ottenere un output binario.  </p>\n<p>Tuttavia, questo approccio presenta alcune limitazioni:  </p>\n<ul>\n<li><strong>Perdita di ottimalità</strong>: la regressione lineare minimizza l&rsquo;errore quadratico medio (MSE), ma se poi applichiamo un post-processing per ottenere una classe, il risultato <strong>non è più necessariamente ottimale</strong> per il problema di classificazione.  </li>\n<li><strong>Scarsa interpretabilità</strong>: i valori previsti non hanno una chiara interpretazione probabilistica, mentre i modelli di classificazione forniscono spesso probabilità esplicite per ogni classe.  </li>\n<li><strong>Difficoltà con più classi</strong>: nel caso di classificazione multiclasse, il mapping tra numeri reali e classi diventa meno naturale rispetto all&rsquo;uso di modelli specifici per la classificazione.  </li>\n</ul>\n<p>Per questi motivi, è preferibile utilizzare modelli specifici per la classificazione, che ottimizzano una funzione di perdita più adatta al problema.</p>\n<h2 id=\"funzioni-di-perdita-per-la-classificazione\"><strong>Funzioni di Perdita per la Classificazione</strong></h2>\n<p>Un aspetto fondamentale della classificazione è l&rsquo;uso di <strong>funzioni di perdita</strong> progettate appositamente per questo tipo di problemi.<br />\nLe più comuni includono:</p>\n<ul>\n<li><strong><span class=\"text-gray-600\">Log Loss (Cross-Entropy Loss)</span></strong>: usata nei problemi di classificazione binaria e multiclasse, misura quanto la probabilità predetta si discosta dalla classe corretta.  </li>\n<li><strong><a href=\"./Hinge-Loss.md\">Hinge Loss</a></strong>: utilizzata per le <strong>macchine a vettori di supporto (SVM)</strong>, penalizza le classificazioni errate.  </li>\n<li><strong><a href=\"./Sparse-Categorical-Crossentropy.md\">Sparse Categorical Crossentropy</a></strong>: simile alla cross-entropy ma più efficiente per classi rappresentate come interi.  </li>\n</ul>\n<h2 id=\"modelli-di-classificazione\"><strong>Modelli di Classificazione</strong></h2>\n<p>Diversi modelli sono stati sviluppati per risolvere problemi di classificazione, tra cui:</p>\n<ul>\n<li><strong><a href=\"/theory/supervised-learning/Linear Models/Regressione Logistica\" class=\"text-blue-600 hover:underline\">Regressione Logistica</a></strong>: un modello di base per la classificazione binaria che utilizza la funzione sigmoide per produrre probabilità.  </li>\n<li><strong><a href=\"./SVM.md\">Support Vector Machines (SVM)</a></strong>: cerca di trovare un iperpiano che separa al meglio le classi.  </li>\n<li><strong><a href=\"./Alberi-di-Decisione.md\">Alberi di Decisione</a></strong> e <strong><a href=\"./Random-Forest.md\">Random Forest</a></strong>: modelli basati su alberi decisionali per classificazione binaria e multiclasse.  </li>\n<li><strong><a href=\"./Reti-Neurali.md\">Reti Neurali</a></strong>: usate per problemi di classificazione più complessi, sfruttando architetture profonde.  </li>\n</ul>\n<h2 id=\"tipologie-di-classificazione\"><strong>Tipologie di Classificazione</strong></h2>\n<p>Esistono diverse varianti della classificazione in base alla natura del problema:</p>\n<ul>\n<li><strong><a href=\"/theory/introduction/Tipologie di Problemi/Classificazione Binaria\" class=\"text-blue-600 hover:underline\">Classificazione Binaria</a></strong>: due sole classi, ad esempio spam/non-spam.  </li>\n<li><strong><span class=\"text-gray-600\">Classificazione Multiclasse</span></strong>: più di due classi, come il riconoscimento di cifre scritte a mano (0-9).  </li>\n<li><strong><a href=\"./Classificazione-Multi-Label.md\">Classificazione Multi-Label</a></strong>: un dato può appartenere a più classi contemporaneamente, ad esempio un&rsquo;immagine che contiene sia un cane che un gatto.  </li>\n</ul>\n<h2 id=\"conclusione\"><strong>Conclusione</strong></h2>\n<p>La classificazione è uno dei problemi più importanti nel machine learning e ha numerose applicazioni pratiche.<br />\nA differenza della regressione, richiede funzioni di perdita specifiche e modelli adatti a gestire dati categoriali.<br />\nLe reti neurali, in particolare, hanno rivoluzionato il campo, permettendo di ottenere risultati di alto livello su problemi complessi come il riconoscimento di immagini e il NLP.  </p>\n<p>Per approfondire, puoi consultare i seguenti argomenti correlati:</p>\n<ul>\n<li><strong><a href=\"./Regressione-Logistica.md\">Regressione Logistica</a></strong></li>\n<li><strong><a href=\"./Softmax.md\">Softmax e Classificazione Multiclasse</a></strong></li>\n<li><strong><a href=\"./Funzioni-di-Attivazione.md\">Funzioni di Attivazione</a></strong></li>\n<li><strong><a href=\"./Overfitting-e-Regolarizzazione.md\">Overfitting e Regolarizzazione</a></strong></li>\n<li><strong><a href=\"./Reti-Neurali-Classificazione.md\">Reti Neurali per la Classificazione</a></strong>  </li>\n</ul>"
}