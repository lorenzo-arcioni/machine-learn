{
  "title": "Untitled",
  "content": "<style>pre { line-height: 125%; }\ntd.linenos .normal { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }\nspan.linenos { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }\ntd.linenos .special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }\nspan.linenos.special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }\n.codehilite .hll { background-color: #ffffcc }\n.codehilite { background: #f8f8f8; }\n.codehilite .c { color: #3D7B7B; font-style: italic } /* Comment */\n.codehilite .err { border: 1px solid #F00 } /* Error */\n.codehilite .k { color: #008000; font-weight: bold } /* Keyword */\n.codehilite .o { color: #666 } /* Operator */\n.codehilite .ch { color: #3D7B7B; font-style: italic } /* Comment.Hashbang */\n.codehilite .cm { color: #3D7B7B; font-style: italic } /* Comment.Multiline */\n.codehilite .cp { color: #9C6500 } /* Comment.Preproc */\n.codehilite .cpf { color: #3D7B7B; font-style: italic } /* Comment.PreprocFile */\n.codehilite .c1 { color: #3D7B7B; font-style: italic } /* Comment.Single */\n.codehilite .cs { color: #3D7B7B; font-style: italic } /* Comment.Special */\n.codehilite .gd { color: #A00000 } /* Generic.Deleted */\n.codehilite .ge { font-style: italic } /* Generic.Emph */\n.codehilite .ges { font-weight: bold; font-style: italic } /* Generic.EmphStrong */\n.codehilite .gr { color: #E40000 } /* Generic.Error */\n.codehilite .gh { color: #000080; font-weight: bold } /* Generic.Heading */\n.codehilite .gi { color: #008400 } /* Generic.Inserted */\n.codehilite .go { color: #717171 } /* Generic.Output */\n.codehilite .gp { color: #000080; font-weight: bold } /* Generic.Prompt */\n.codehilite .gs { font-weight: bold } /* Generic.Strong */\n.codehilite .gu { color: #800080; font-weight: bold } /* Generic.Subheading */\n.codehilite .gt { color: #04D } /* Generic.Traceback */\n.codehilite .kc { color: #008000; font-weight: bold } /* Keyword.Constant */\n.codehilite .kd { color: #008000; font-weight: bold } /* Keyword.Declaration */\n.codehilite .kn { color: #008000; font-weight: bold } /* Keyword.Namespace */\n.codehilite .kp { color: #008000 } /* Keyword.Pseudo */\n.codehilite .kr { color: #008000; font-weight: bold } /* Keyword.Reserved */\n.codehilite .kt { color: #B00040 } /* Keyword.Type */\n.codehilite .m { color: #666 } /* Literal.Number */\n.codehilite .s { color: #BA2121 } /* Literal.String */\n.codehilite .na { color: #687822 } /* Name.Attribute */\n.codehilite .nb { color: #008000 } /* Name.Builtin */\n.codehilite .nc { color: #00F; font-weight: bold } /* Name.Class */\n.codehilite .no { color: #800 } /* Name.Constant */\n.codehilite .nd { color: #A2F } /* Name.Decorator */\n.codehilite .ni { color: #717171; font-weight: bold } /* Name.Entity */\n.codehilite .ne { color: #CB3F38; font-weight: bold } /* Name.Exception */\n.codehilite .nf { color: #00F } /* Name.Function */\n.codehilite .nl { color: #767600 } /* Name.Label */\n.codehilite .nn { color: #00F; font-weight: bold } /* Name.Namespace */\n.codehilite .nt { color: #008000; font-weight: bold } /* Name.Tag */\n.codehilite .nv { color: #19177C } /* Name.Variable */\n.codehilite .ow { color: #A2F; font-weight: bold } /* Operator.Word */\n.codehilite .w { color: #BBB } /* Text.Whitespace */\n.codehilite .mb { color: #666 } /* Literal.Number.Bin */\n.codehilite .mf { color: #666 } /* Literal.Number.Float */\n.codehilite .mh { color: #666 } /* Literal.Number.Hex */\n.codehilite .mi { color: #666 } /* Literal.Number.Integer */\n.codehilite .mo { color: #666 } /* Literal.Number.Oct */\n.codehilite .sa { color: #BA2121 } /* Literal.String.Affix */\n.codehilite .sb { color: #BA2121 } /* Literal.String.Backtick */\n.codehilite .sc { color: #BA2121 } /* Literal.String.Char */\n.codehilite .dl { color: #BA2121 } /* Literal.String.Delimiter */\n.codehilite .sd { color: #BA2121; font-style: italic } /* Literal.String.Doc */\n.codehilite .s2 { color: #BA2121 } /* Literal.String.Double */\n.codehilite .se { color: #AA5D1F; font-weight: bold } /* Literal.String.Escape */\n.codehilite .sh { color: #BA2121 } /* Literal.String.Heredoc */\n.codehilite .si { color: #A45A77; font-weight: bold } /* Literal.String.Interpol */\n.codehilite .sx { color: #008000 } /* Literal.String.Other */\n.codehilite .sr { color: #A45A77 } /* Literal.String.Regex */\n.codehilite .s1 { color: #BA2121 } /* Literal.String.Single */\n.codehilite .ss { color: #19177C } /* Literal.String.Symbol */\n.codehilite .bp { color: #008000 } /* Name.Builtin.Pseudo */\n.codehilite .fm { color: #00F } /* Name.Function.Magic */\n.codehilite .vc { color: #19177C } /* Name.Variable.Class */\n.codehilite .vg { color: #19177C } /* Name.Variable.Global */\n.codehilite .vi { color: #19177C } /* Name.Variable.Instance */\n.codehilite .vm { color: #19177C } /* Name.Variable.Magic */\n.codehilite .il { color: #666 } /* Literal.Number.Integer.Long */\n\n/* Styling per blocchi di codice */\n.codehilite {\n    background: transparent !important;\n    border-radius: 8px;\n    overflow: hidden;\n}\n.codehilite pre {\n    background: transparent !important;\n    margin: 0 !important;\n    padding: 20px !important;\n    font-family: 'Monaco', 'Menlo', 'Consolas', monospace !important;\n    font-size: 14px !important;\n    line-height: 1.5 !important;\n    white-space: pre !important;\n    overflow-x: auto !important;\n    color: inherit !important;\n}\n.codehilite code {\n    background: transparent !important;\n    padding: 0 !important;\n    font-family: inherit !important;\n}\n\n\n.code-wrapper { \n    position: relative; \n}\n.copy-button {\n    position: absolute; \n    top: 12px; \n    right: 12px; \n    padding: 6px 12px; \n    font-size: 12px;\n    cursor: pointer; \n    border: none; \n    border-radius: 4px; \n    background: rgba(255,255,255,0.9);\n    color: #374151; \n    transition: all 0.2s ease;\n    font-weight: 500;\n}\n.copy-button:hover { \n    background: rgba(255,255,255,1);\n    transform: translateY(-1px);\n}\n\n\ndetails.code-container {\n    border: 1px solid #e5e7eb; \n    border-radius: 12px; \n    background: #f9fafb;\n    margin: 16px 0;\n    transition: all 0.3s ease;\n}\ndetails.code-container summary {\n    padding: 12px 16px;\n    font-size: 14px; \n    color: #6b7280; \n    cursor: pointer; \n    outline: none; \n    user-select: none;\n    font-weight: 500;\n}\ndetails.code-container[open] summary::after { \n    content: \" (Hide Code)\"; \n    color: #9ca3af; \n}\ndetails.code-container:not([open]) summary::after { \n    content: \" (Show Code)\"; \n    color: #d1d5db; \n}\ndetails.code-container .code-wrapper {\n    padding: 0;\n    margin: 0;\n}\n/* Blocchi di codice sempre visibili */\n.code-visible {\n    border: 1px solid #e5e7eb;\n    border-radius: 12px;\n    background: #f9fafb;\n    margin: 16px 0;\n}\n.code-visible .code-wrapper {\n    padding: 0;\n    margin: 0;\n}\n</style>\n<hr />\n<h2 id=\"alias-ottimizzazione-lineare-programmazione-lineare\">alias: [&ldquo;Ottimizzazione Lineare&rdquo;, &ldquo;Programmazione Lineare&rdquo;]</h2>\n<h1 id=\"ottimizzazione-lineare\">Ottimizzazione Lineare</h1>\n<h2 id=\"definizione-formale\">Definizione Formale</h2>\n<p>L&rsquo;<strong>ottimizzazione lineare</strong> (o <strong>programmazione lineare</strong>) cerca di ottimizzare una funzione obiettivo lineare soggetta a vincoli lineari:</p>\n$$\n\\begin{align*}\n\\text{min/max} \\quad & \\mathbf c^T \\mathbf x \\\\\n\\text{s.t.} \\quad & \\mathbf A \\mathbf x \\leq \\mathbf b \\\\\n& \\mathbf x \\geq 0\n\\end{align*}\n$$\n<p>dove:\n- $\\mathbf x \\in \\mathbb{R}^n$: vettore delle variabili decisionali\n- $\\mathbf c \\in \\mathbb{R}^n$: vettore dei coefficienti della funzione obiettivo\n- $\\mathbf A \\in \\mathbb{R}^{m \\times n}$: matrice dei vincoli\n- $\\mathbf b \\in \\mathbb{R}^m$: termini noti</p>\n<h3 id=\"proprieta-strutturali\">Proprietà Strutturali</h3>\n<ol>\n<li><strong>Convessità</strong>: La regione ammissibile è un insieme convesso</li>\n<li><strong>Ottimalità</strong>: Se esiste una soluzione ottima, giace su un vertice (<span class=\"text-gray-600\">Teorema Fondamentale della PL</span>)</li>\n<li><strong>Dualità</strong>: Ogni problema primale ammette un <span class=\"text-gray-600\">Duale Lagrangiano</span> con interessanti proprietà</li>\n</ol>\n<h2 id=\"linearita-come-caso-particolare-di-convessita\">Linearità come Caso Particolare di Convessità</h2>\n<p>Una funzione <strong>lineare</strong> $f(x) = c^T x + b$ è sia <strong>convessa</strong> che <strong>concava</strong> per definizione formale.<br />\nPer verificarlo, si applichi la disuguaglianza di Jensen a due punti $x, y \\in \\mathbb{R}^n$ e $\\lambda \\in [0,1]$:</p>\n$$\n\\begin{aligned}\nf(\\lambda x + (1-\\lambda)y) &= c^T(\\lambda x + (1-\\lambda)y) + b \\\\\n&= \\lambda c^T x + (1-\\lambda)c^T y + b \\\\\n&= \\lambda f(x) + (1-\\lambda)f(y)\n\\end{aligned}\n$$\n<p>Questa uguaglianza soddisfa <strong>entrambe</strong> le condizioni:<br />\n1. $f(\\lambda x + (1-\\lambda)y) \\leq \\lambda f(x) + (1-\\lambda)f(y)$ (convessità)<br />\n2. $f(\\lambda x + (1-\\lambda)y) \\geq \\lambda f(x) + (1-\\lambda)f(y)$ (concavità)  </p>\n<h3 id=\"implicazioni-per-lottimizzazione-lineare\">Implicazioni per l&rsquo;Ottimizzazione Lineare</h3>\n<ol>\n<li><strong>Sempre convessa</strong>:  </li>\n<li>Funzioni lineari rientrano nella classe delle funzioni convesse  </li>\n<li>\n<p>L&rsquo;insieme ammissibile $\\{x \\ | \\ A x \\leq b, x \\geq 0\\}$ è un poliedro convesso  </p>\n</li>\n<li>\n<p><strong>Nessuna non-convessità</strong>:  </p>\n</li>\n<li>La linearità <strong>esclude</strong> curvature non convesse (es. picchi, valli)  </li>\n<li>Eventuali &ldquo;non-convessità&rdquo; richiederebbero termini non lineari (es. $x^2$, $\\sin(x)$), che per definizione non sono ammessi  </li>\n</ol>\n<p><strong>Esempio Istruttivo</strong>:<br />\nIl problema lineare $\\min_{x} \\ 2x$ con $x \\geq 1$:<br />\n- Funzione obiettivo lineare (e quindi convessa)<br />\n- Regione ammissibile convessa ($x \\in [1, \\infty)$)<br />\n- Soluzione ottima unica a $x = 1$, tipico comportamento convesso  </p>\n<p>La linearità è dunque un <strong>caso limite</strong> di convessità, dove le disuguaglianze diventano uguaglianze.  </p>\n<h2 id=\"algoritmi-classici\">Algoritmi Classici</h2>\n<table>\n<thead>\n<tr>\n<th>Metodo</th>\n<th>Complessità</th>\n<th>Caso d&rsquo;Uso Tipico</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><span class=\"text-gray-600\">Metodo del Simplesso</span></td>\n<td>$O(2^n)$ (worst)</td>\n<td>Problemi con $n < 10^4$</td>\n</tr>\n<tr>\n<td><span class=\"text-gray-600\">Algoritmo dei Punti Interni</span></td>\n<td>$O(n^{3.5}L)$</td>\n<td>Problemi su larga scala</td>\n</tr>\n<tr>\n<td><span class=\"text-gray-600\">Metodo del Ellissoide</span></td>\n<td>$O(n^6L^2)$</td>\n<td>Teoria della complessità</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"applicazioni\">Applicazioni</h2>\n<ul>\n<li><span class=\"text-gray-600\">Pianificazione della Produzione</span>: Ottimizzazione mix produttivo</li>\n<li><span class=\"text-gray-600\">Logistica</span>: Problemi di trasporto e assegnazione</li>\n<li><span class=\"text-gray-600\">Portfolio Optimization</span>: Selezione asset finanziari</li>\n</ul>\n<h2 id=\"estensioni-importanti\">Estensioni Importanti</h2>\n<ol>\n<li><strong><span class=\"text-gray-600\">Programmazione Lineare Intera</span></strong> (ILP):</li>\n<li>Variabili discrete $x_i \\in \\mathbb{Z}$</li>\n<li>\n<p>Applicazioni in <span class=\"text-gray-600\">Scheduling</span> e <span class=\"text-gray-600\">Routing</span></p>\n</li>\n<li>\n<p><strong><span class=\"text-gray-600\">Programmazione Stocastica</span></strong>:</p>\n</li>\n<li>Vincoli con parametri probabilistici</li>\n<li>Usata in <span class=\"text-gray-600\">Pianificazione Energetica</span></li>\n</ol>"
}