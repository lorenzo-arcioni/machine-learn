{
  "title": "Introduzione all'Ottimizzazione non Lineare",
  "content": "<style>pre { line-height: 125%; }\ntd.linenos .normal { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }\nspan.linenos { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }\ntd.linenos .special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }\nspan.linenos.special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }\n.codehilite .hll { background-color: #ffffcc }\n.codehilite { background: #f8f8f8; }\n.codehilite .c { color: #3D7B7B; font-style: italic } /* Comment */\n.codehilite .err { border: 1px solid #F00 } /* Error */\n.codehilite .k { color: #008000; font-weight: bold } /* Keyword */\n.codehilite .o { color: #666 } /* Operator */\n.codehilite .ch { color: #3D7B7B; font-style: italic } /* Comment.Hashbang */\n.codehilite .cm { color: #3D7B7B; font-style: italic } /* Comment.Multiline */\n.codehilite .cp { color: #9C6500 } /* Comment.Preproc */\n.codehilite .cpf { color: #3D7B7B; font-style: italic } /* Comment.PreprocFile */\n.codehilite .c1 { color: #3D7B7B; font-style: italic } /* Comment.Single */\n.codehilite .cs { color: #3D7B7B; font-style: italic } /* Comment.Special */\n.codehilite .gd { color: #A00000 } /* Generic.Deleted */\n.codehilite .ge { font-style: italic } /* Generic.Emph */\n.codehilite .ges { font-weight: bold; font-style: italic } /* Generic.EmphStrong */\n.codehilite .gr { color: #E40000 } /* Generic.Error */\n.codehilite .gh { color: #000080; font-weight: bold } /* Generic.Heading */\n.codehilite .gi { color: #008400 } /* Generic.Inserted */\n.codehilite .go { color: #717171 } /* Generic.Output */\n.codehilite .gp { color: #000080; font-weight: bold } /* Generic.Prompt */\n.codehilite .gs { font-weight: bold } /* Generic.Strong */\n.codehilite .gu { color: #800080; font-weight: bold } /* Generic.Subheading */\n.codehilite .gt { color: #04D } /* Generic.Traceback */\n.codehilite .kc { color: #008000; font-weight: bold } /* Keyword.Constant */\n.codehilite .kd { color: #008000; font-weight: bold } /* Keyword.Declaration */\n.codehilite .kn { color: #008000; font-weight: bold } /* Keyword.Namespace */\n.codehilite .kp { color: #008000 } /* Keyword.Pseudo */\n.codehilite .kr { color: #008000; font-weight: bold } /* Keyword.Reserved */\n.codehilite .kt { color: #B00040 } /* Keyword.Type */\n.codehilite .m { color: #666 } /* Literal.Number */\n.codehilite .s { color: #BA2121 } /* Literal.String */\n.codehilite .na { color: #687822 } /* Name.Attribute */\n.codehilite .nb { color: #008000 } /* Name.Builtin */\n.codehilite .nc { color: #00F; font-weight: bold } /* Name.Class */\n.codehilite .no { color: #800 } /* Name.Constant */\n.codehilite .nd { color: #A2F } /* Name.Decorator */\n.codehilite .ni { color: #717171; font-weight: bold } /* Name.Entity */\n.codehilite .ne { color: #CB3F38; font-weight: bold } /* Name.Exception */\n.codehilite .nf { color: #00F } /* Name.Function */\n.codehilite .nl { color: #767600 } /* Name.Label */\n.codehilite .nn { color: #00F; font-weight: bold } /* Name.Namespace */\n.codehilite .nt { color: #008000; font-weight: bold } /* Name.Tag */\n.codehilite .nv { color: #19177C } /* Name.Variable */\n.codehilite .ow { color: #A2F; font-weight: bold } /* Operator.Word */\n.codehilite .w { color: #BBB } /* Text.Whitespace */\n.codehilite .mb { color: #666 } /* Literal.Number.Bin */\n.codehilite .mf { color: #666 } /* Literal.Number.Float */\n.codehilite .mh { color: #666 } /* Literal.Number.Hex */\n.codehilite .mi { color: #666 } /* Literal.Number.Integer */\n.codehilite .mo { color: #666 } /* Literal.Number.Oct */\n.codehilite .sa { color: #BA2121 } /* Literal.String.Affix */\n.codehilite .sb { color: #BA2121 } /* Literal.String.Backtick */\n.codehilite .sc { color: #BA2121 } /* Literal.String.Char */\n.codehilite .dl { color: #BA2121 } /* Literal.String.Delimiter */\n.codehilite .sd { color: #BA2121; font-style: italic } /* Literal.String.Doc */\n.codehilite .s2 { color: #BA2121 } /* Literal.String.Double */\n.codehilite .se { color: #AA5D1F; font-weight: bold } /* Literal.String.Escape */\n.codehilite .sh { color: #BA2121 } /* Literal.String.Heredoc */\n.codehilite .si { color: #A45A77; font-weight: bold } /* Literal.String.Interpol */\n.codehilite .sx { color: #008000 } /* Literal.String.Other */\n.codehilite .sr { color: #A45A77 } /* Literal.String.Regex */\n.codehilite .s1 { color: #BA2121 } /* Literal.String.Single */\n.codehilite .ss { color: #19177C } /* Literal.String.Symbol */\n.codehilite .bp { color: #008000 } /* Name.Builtin.Pseudo */\n.codehilite .fm { color: #00F } /* Name.Function.Magic */\n.codehilite .vc { color: #19177C } /* Name.Variable.Class */\n.codehilite .vg { color: #19177C } /* Name.Variable.Global */\n.codehilite .vi { color: #19177C } /* Name.Variable.Instance */\n.codehilite .vm { color: #19177C } /* Name.Variable.Magic */\n.codehilite .il { color: #666 } /* Literal.Number.Integer.Long */\n\n/* Styling per blocchi di codice */\n.codehilite {\n    background: transparent !important;\n    border-radius: 8px;\n    overflow: hidden;\n}\n.codehilite pre {\n    background: transparent !important;\n    margin: 0 !important;\n    padding: 20px !important;\n    font-family: 'Monaco', 'Menlo', 'Consolas', monospace !important;\n    font-size: 14px !important;\n    line-height: 1.5 !important;\n    white-space: pre !important;\n    overflow-x: auto !important;\n    color: inherit !important;\n}\n.codehilite code {\n    background: transparent !important;\n    padding: 0 !important;\n    font-family: inherit !important;\n}\n\n\n.code-wrapper { \n    position: relative; \n}\n.copy-button {\n    position: absolute; \n    top: 12px; \n    right: 12px; \n    padding: 6px 12px; \n    font-size: 12px;\n    cursor: pointer; \n    border: none; \n    border-radius: 4px; \n    background: rgba(255,255,255,0.9);\n    color: #374151; \n    transition: all 0.2s ease;\n    font-weight: 500;\n}\n.copy-button:hover { \n    background: rgba(255,255,255,1);\n    transform: translateY(-1px);\n}\n\n\ndetails.code-container {\n    border: 1px solid #e5e7eb; \n    border-radius: 12px; \n    background: #f9fafb;\n    margin: 16px 0;\n    transition: all 0.3s ease;\n}\ndetails.code-container summary {\n    padding: 12px 16px;\n    font-size: 14px; \n    color: #6b7280; \n    cursor: pointer; \n    outline: none; \n    user-select: none;\n    font-weight: 500;\n}\ndetails.code-container[open] summary::after { \n    content: \" (Hide Code)\"; \n    color: #9ca3af; \n}\ndetails.code-container:not([open]) summary::after { \n    content: \" (Show Code)\"; \n    color: #d1d5db; \n}\ndetails.code-container .code-wrapper {\n    padding: 0;\n    margin: 0;\n}\n</style>\n<h2 id=\"perche-serve\">Perch√© serve?</h2>\n<p>Quando lavoriamo con problemi di <strong>regressione</strong>, abbiamo notato che i dati <strong>raramente</strong> seguono una distribuzione lineare.<br />\nLa maggior parte dei fenomeni reali √® <strong>non lineare</strong>, e quindi i nostri modelli devono essere in grado di rappresentare questa complessit√†.</p>\n<p>In generale, capita molto spesso di trovarsi davanti a una <strong>funzione di perdita</strong> il cui gradiente dipende dai parametri del modello in maniera <strong>non lineare</strong>.<br />\nUn esempio classico √® la <strong>regressione logistica</strong>.</p>\n<p>üëâ Abbiamo visto che:\n- Solo per funzioni <strong>convesse</strong> possiamo trovare una <strong>soluzione in forma chiusa</strong> (ponendo il gradiente $= 0$).\n- Le funzioni non lineari <strong>non sono sempre</strong> non convesse (ad esempio le funzioni quadratiche sono non lineari ma restano convesse).\n- Tuttavia, <strong>molte funzioni non lineari sono non convesse</strong>: in questi casi <strong>non esistono soluzioni in forma chiusa</strong>, e dobbiamo ricorrere all‚Äô<strong>ottimizzazione numerica non lineare</strong>.</p>\n<h2 id=\"metodi-di-primo-ordine\">üå± Metodi di Primo Ordine</h2>\n<p>La famiglia di algoritmi pi√π semplice e diffusa sono i <strong>metodi di primo ordine</strong>, che utilizzano <strong>solo il gradiente</strong> (derivata prima) della funzione obiettivo.  </p>\n<p>Il pi√π noto √® la <strong><a href=\"/theory/math-for-ml/Ottimizzazione/Non-Lineare/Discesa del Gradiente\" class=\"text-blue-600 hover:underline\">Discesa del Gradiente</a> (Gradient Descent, GD)</strong>:\n- algoritmo iterativo che muove i parametri nella direzione opposta al gradiente,<br />\n- permette di avvicinarsi progressivamente a un <strong>minimo locale</strong>,<br />\n- garantisce il <strong>minimo globale</strong> solo se la funzione √® convessa.  </p>\n<h2 id=\"oltre-il-primo-ordine\">üå≥ Oltre il Primo Ordine</h2>\n<p>Oltre ai metodi di primo ordine, esistono algoritmi pi√π sofisticati che sfruttano anche informazioni di ordine superiore:  </p>\n<ul>\n<li><strong>Metodi di secondo ordine</strong> ‚Üí utilizzano anche le derivate seconde (Hessiana), come il metodo di Newton o quasi-Newton.  </li>\n<li><strong>Tecniche ibride e varianti moderne</strong> ‚Üí come i metodi adattivi (Adam, RMSProp, Adagrad), o strategie di ottimizzazione vincolata.  </li>\n</ul>\n<h2 id=\"in-questa-sezione\">üìÇ In questa sezione</h2>\n<p>Questa nota funge da <strong>introduzione generale</strong>.<br />\nNelle note collegate approfondiamo le diverse tecniche di ottimizzazione:</p>\n<ul>\n<li>üëâ <a href=\"Gradient_Descent.md\">Gradient Descent (GD)</a>  </li>\n<li>üëâ <a href=\"Second_Order_Methods.md\">Metodi di Secondo Ordine</a>  </li>\n<li>üëâ <a href=\"Adaptive_Optimizers.md\">Ottimizzazioni Adattive</a>  </li>\n</ul>\n<hr />\n<p>‚úçÔ∏è <strong>In sintesi</strong>:<br />\nL‚Äôottimizzazione non lineare √® il cuore dell‚Äôapprendimento automatico.<br />\nChe si tratti di un metodo semplice come il GD o di algoritmi pi√π avanzati, tutti condividono lo stesso obiettivo: <strong>trovare parametri che minimizzino la funzione di perdita</strong>.  </p>"
}