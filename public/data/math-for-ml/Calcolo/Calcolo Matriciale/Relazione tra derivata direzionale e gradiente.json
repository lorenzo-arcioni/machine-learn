{
  "title": "Relazione tra derivata direzionale e gradiente (caso multivariato)",
  "content": "<style>pre { line-height: 125%; }\ntd.linenos .normal { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }\nspan.linenos { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }\ntd.linenos .special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }\nspan.linenos.special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }\n.codehilite .hll { background-color: #ffffcc }\n.codehilite { background: #f8f8f8; }\n.codehilite .c { color: #3D7B7B; font-style: italic } /* Comment */\n.codehilite .err { border: 1px solid #F00 } /* Error */\n.codehilite .k { color: #008000; font-weight: bold } /* Keyword */\n.codehilite .o { color: #666 } /* Operator */\n.codehilite .ch { color: #3D7B7B; font-style: italic } /* Comment.Hashbang */\n.codehilite .cm { color: #3D7B7B; font-style: italic } /* Comment.Multiline */\n.codehilite .cp { color: #9C6500 } /* Comment.Preproc */\n.codehilite .cpf { color: #3D7B7B; font-style: italic } /* Comment.PreprocFile */\n.codehilite .c1 { color: #3D7B7B; font-style: italic } /* Comment.Single */\n.codehilite .cs { color: #3D7B7B; font-style: italic } /* Comment.Special */\n.codehilite .gd { color: #A00000 } /* Generic.Deleted */\n.codehilite .ge { font-style: italic } /* Generic.Emph */\n.codehilite .ges { font-weight: bold; font-style: italic } /* Generic.EmphStrong */\n.codehilite .gr { color: #E40000 } /* Generic.Error */\n.codehilite .gh { color: #000080; font-weight: bold } /* Generic.Heading */\n.codehilite .gi { color: #008400 } /* Generic.Inserted */\n.codehilite .go { color: #717171 } /* Generic.Output */\n.codehilite .gp { color: #000080; font-weight: bold } /* Generic.Prompt */\n.codehilite .gs { font-weight: bold } /* Generic.Strong */\n.codehilite .gu { color: #800080; font-weight: bold } /* Generic.Subheading */\n.codehilite .gt { color: #04D } /* Generic.Traceback */\n.codehilite .kc { color: #008000; font-weight: bold } /* Keyword.Constant */\n.codehilite .kd { color: #008000; font-weight: bold } /* Keyword.Declaration */\n.codehilite .kn { color: #008000; font-weight: bold } /* Keyword.Namespace */\n.codehilite .kp { color: #008000 } /* Keyword.Pseudo */\n.codehilite .kr { color: #008000; font-weight: bold } /* Keyword.Reserved */\n.codehilite .kt { color: #B00040 } /* Keyword.Type */\n.codehilite .m { color: #666 } /* Literal.Number */\n.codehilite .s { color: #BA2121 } /* Literal.String */\n.codehilite .na { color: #687822 } /* Name.Attribute */\n.codehilite .nb { color: #008000 } /* Name.Builtin */\n.codehilite .nc { color: #00F; font-weight: bold } /* Name.Class */\n.codehilite .no { color: #800 } /* Name.Constant */\n.codehilite .nd { color: #A2F } /* Name.Decorator */\n.codehilite .ni { color: #717171; font-weight: bold } /* Name.Entity */\n.codehilite .ne { color: #CB3F38; font-weight: bold } /* Name.Exception */\n.codehilite .nf { color: #00F } /* Name.Function */\n.codehilite .nl { color: #767600 } /* Name.Label */\n.codehilite .nn { color: #00F; font-weight: bold } /* Name.Namespace */\n.codehilite .nt { color: #008000; font-weight: bold } /* Name.Tag */\n.codehilite .nv { color: #19177C } /* Name.Variable */\n.codehilite .ow { color: #A2F; font-weight: bold } /* Operator.Word */\n.codehilite .w { color: #BBB } /* Text.Whitespace */\n.codehilite .mb { color: #666 } /* Literal.Number.Bin */\n.codehilite .mf { color: #666 } /* Literal.Number.Float */\n.codehilite .mh { color: #666 } /* Literal.Number.Hex */\n.codehilite .mi { color: #666 } /* Literal.Number.Integer */\n.codehilite .mo { color: #666 } /* Literal.Number.Oct */\n.codehilite .sa { color: #BA2121 } /* Literal.String.Affix */\n.codehilite .sb { color: #BA2121 } /* Literal.String.Backtick */\n.codehilite .sc { color: #BA2121 } /* Literal.String.Char */\n.codehilite .dl { color: #BA2121 } /* Literal.String.Delimiter */\n.codehilite .sd { color: #BA2121; font-style: italic } /* Literal.String.Doc */\n.codehilite .s2 { color: #BA2121 } /* Literal.String.Double */\n.codehilite .se { color: #AA5D1F; font-weight: bold } /* Literal.String.Escape */\n.codehilite .sh { color: #BA2121 } /* Literal.String.Heredoc */\n.codehilite .si { color: #A45A77; font-weight: bold } /* Literal.String.Interpol */\n.codehilite .sx { color: #008000 } /* Literal.String.Other */\n.codehilite .sr { color: #A45A77 } /* Literal.String.Regex */\n.codehilite .s1 { color: #BA2121 } /* Literal.String.Single */\n.codehilite .ss { color: #19177C } /* Literal.String.Symbol */\n.codehilite .bp { color: #008000 } /* Name.Builtin.Pseudo */\n.codehilite .fm { color: #00F } /* Name.Function.Magic */\n.codehilite .vc { color: #19177C } /* Name.Variable.Class */\n.codehilite .vg { color: #19177C } /* Name.Variable.Global */\n.codehilite .vi { color: #19177C } /* Name.Variable.Instance */\n.codehilite .vm { color: #19177C } /* Name.Variable.Magic */\n.codehilite .il { color: #666 } /* Literal.Number.Integer.Long */\n\n/* Styling per blocchi di codice */\n.codehilite {\n    background: transparent !important;\n    border-radius: 8px;\n    overflow: hidden;\n}\n.codehilite pre {\n    background: transparent !important;\n    margin: 0 !important;\n    padding: 20px !important;\n    font-family: 'Monaco', 'Menlo', 'Consolas', monospace !important;\n    font-size: 14px !important;\n    line-height: 1.5 !important;\n    white-space: pre !important;\n    overflow-x: auto !important;\n    color: inherit !important;\n}\n.codehilite code {\n    background: transparent !important;\n    padding: 0 !important;\n    font-family: inherit !important;\n}\n\n\n.code-wrapper { \n    position: relative; \n}\n.copy-button {\n    position: absolute; \n    top: 12px; \n    right: 12px; \n    padding: 6px 12px; \n    font-size: 12px;\n    cursor: pointer; \n    border: none; \n    border-radius: 4px; \n    background: rgba(255,255,255,0.9);\n    color: #374151; \n    transition: all 0.2s ease;\n    font-weight: 500;\n}\n.copy-button:hover { \n    background: rgba(255,255,255,1);\n    transform: translateY(-1px);\n}\n\n\ndetails.code-container {\n    border: 1px solid #e5e7eb; \n    border-radius: 12px; \n    background: #f9fafb;\n    margin: 16px 0;\n    transition: all 0.3s ease;\n}\ndetails.code-container summary {\n    padding: 12px 16px;\n    font-size: 14px; \n    color: #6b7280; \n    cursor: pointer; \n    outline: none; \n    user-select: none;\n    font-weight: 500;\n}\ndetails.code-container[open] summary::after { \n    content: \" (Hide Code)\"; \n    color: #9ca3af; \n}\ndetails.code-container:not([open]) summary::after { \n    content: \" (Show Code)\"; \n    color: #d1d5db; \n}\ndetails.code-container .code-wrapper {\n    padding: 0;\n    margin: 0;\n}\n/* Blocchi di codice sempre visibili */\n.code-visible {\n    border: 1px solid #e5e7eb;\n    border-radius: 12px;\n    background: #f9fafb;\n    margin: 16px 0;\n}\n.code-visible .code-wrapper {\n    padding: 0;\n    margin: 0;\n}\n</style>\n<p>In questa nota esploriamo in dettaglio la relazione tra <strong>derivata direzionale</strong> e <strong>gradiente</strong> per funzioni multivariate $f:\\mathbb{R}^n \\to \\mathbb{R}$. L&rsquo;obiettivo è fornire una comprensione sia concettuale che formale di come il gradiente descriva le variazioni di $f$ lungo qualsiasi direzione nello spazio, e come questa informazione sia fondamentale nelle applicazioni di ottimizzazione, analisi numerica e geometria differenziale.</p>\n<h2 id=\"1-derivata-direzionale-in-math_inline_16\">1. Derivata direzionale in $\\mathbb{R}^n$</h2>\n<p>Sia $f:\\mathbb{R}^n \\to \\mathbb{R}$ differenziabile e sia $\\mathbf{v} = (v_1, v_2, \\dots, v_n) \\in \\mathbb{R}^n$ un vettore.<br />\nLa <strong>derivata direzionale</strong> di $f$ in un punto $P_0 \\in \\mathbb{R}^n$ lungo $\\mathbf{v}$ è:</p>\n$$\n\\frac{df}{d\\mathbf{v}}(P_0) = \\lim_{t \\to 0} \\frac{f(P_0 + t \\mathbf{v}) - f(P_0)}{t},\n$$\n<p>dove $t$ è un parametro scalare che misura quanto ci spostiamo lungo la direzione del vettore $\\mathbf v$.</p>\n<p>Intuitivamente, misura <strong>come cambia $f$ muovendosi da $P_0$ nella direzione di $\\mathbf{v}$</strong>.</p>\n<h2 id=\"2-espressione-tramite-il-gradiente\">2. Espressione tramite il gradiente</h2>\n<p>Per funzioni differenziabili, il <strong>differenziale totale</strong> di $f$ è:</p>\n$$\ndf = \\sum_{i=1}^n \\frac{\\partial f}{\\partial x_i} dx_i\n$$\n<p>Considerciamo che $dt$ rappresenta un incremento infinitesimale di $t$.</p>\n<p>Se ci spostiamo lungo $\\mathbf{v}$, abbiamo $dx_i = v_i dt$, quindi:</p>\n$$\ndf = \\sum_{i=1}^n \\frac{\\partial f}{\\partial x_i} v_i dt\n\\quad \\implies \\quad\n\\frac{df}{dt} = \\sum_{i=1}^n \\frac{\\partial f}{\\partial x_i} v_i\n$$\n<p>Valutando in $P_0$:</p>\n$$\n\\frac{df}{d\\mathbf{v}}(P_0) = \\sum_{i=1}^n \\frac{\\partial f}{\\partial x_i}(P_0) v_i\n$$\n<p>Definendo il <strong>gradiente</strong> in $P_0$ come</p>\n$$\n\\nabla f(P_0) = \\begin{pmatrix} \\frac{\\partial f}{\\partial x_1}(P_0) \\\\[1mm] \\vdots \\\\[1mm] \\frac{\\partial f}{\\partial x_n}(P_0) \\end{pmatrix},\n$$\n<p>otteniamo la formula compatta:</p>\n$$\n\\frac{df}{d\\mathbf{v}}(P_0) = \\langle \\nabla f(P_0), \\mathbf{v} \\rangle\n$$\n<p>dove $\\langle \\cdot, \\cdot \\rangle$ è il <strong>prodotto scalare standard</strong> in $\\mathbb{R}^n$.</p>\n<h2 id=\"3-interpretazione-geometrica\">3. Interpretazione geometrica</h2>\n<ul>\n<li>$\\nabla f(P_0)$ indica la <strong>direzione di massima crescita di $f$</strong>.  </li>\n<li>La derivata direzionale misura <strong>quanto cresce $f$ nella direzione $\\mathbf{v}$</strong>.  </li>\n<li>Massima derivata: $\\mathbf{v} \\parallel \\nabla f(P_0)$</li>\n<li>Minima derivata: $\\mathbf{v} \\parallel -\\nabla f(P_0)$</li>\n<li>Derivata nulla: $\\mathbf{v} \\perp \\nabla f(P_0)$ → vettore tangente a una <strong>curva (o superficie) di livello</strong>.</li>\n</ul>\n<h2 id=\"4-curvesuperfici-di-livello\">4. Curve/superfici di livello</h2>\n<p>Definiamo la <strong>superficie di livello</strong> in $P_0$ come:</p>\n$$\n\\mathcal{L}_{f,c} = \\{ \\mathbf{x} \\in \\mathbb{R}^n \\mid f(\\mathbf{x}) = f(P_0) = c \\}\n$$\n<p>Se $\\mathbf{v}$ è <strong>tangente a $\\mathcal{L}_{f,c}$</strong>:</p>\n$$\n\\frac{df}{d\\mathbf{v}}(P_0) = \\langle \\nabla f(P_0), \\mathbf{v} \\rangle = 0\n$$\n<p>✅ <strong>Conclusione generale:</strong> ogni vettore tangente alla superficie di livello è ortogonale al gradiente.</p>\n<h2 id=\"5-scelta-di-un-vettore-tangente-concreto\">5. Scelta di un vettore tangente concreto</h2>\n<p>Sia $\\nabla f(P_0) = (g_1, \\dots, g_n)$.<br />\nPer trovare $\\mathbf{v} \\neq 0$ tangente:</p>\n$$\n\\langle \\nabla f(P_0), \\mathbf{v} \\rangle = \\sum_{i=1}^n g_i v_i = 0\n$$\n<ul>\n<li>Equazione lineare con $n$ incognite → <strong>infinite soluzioni</strong>.  </li>\n<li>Possiamo fissare $n-1$ componenti arbitrariamente e risolvere l’ultima.  </li>\n<li>Esempio in $n=3$:<br />\n  $\\nabla f(P_0) = (1,2,3)$ e scegliamo $v_1 = 1, v_2 = 0$, allora:</li>\n</ul>\n$$\n1\\cdot 1 + 2\\cdot 0 + 3 v_3 = 0 \\implies v_3 = -\\frac{1}{3}\n$$\n<p>Otteniamo $\\mathbf{v} = (1,0,-1/3)$ tangente alla superficie di livello in $P_0$.</p>\n<h3 id=\"6-sintesi-concettuale\">6. Sintesi concettuale</h3>\n<ul>\n<li><strong>Derivata direzionale</strong> lungo $\\mathbf{v}$ in $P_0$:</li>\n</ul>\n$$\n\\frac{df}{d\\mathbf{v}}(P_0) = \\langle \\nabla f(P_0), \\mathbf{v} \\rangle\n$$\n<ul>\n<li><strong>Gradiente</strong>: direzione di massima crescita, modulo della derivata massima:</li>\n</ul>\n$$\n\\max_{\\|\\mathbf{v}\\|=1} \\frac{df}{d\\mathbf{v}}(P_0) \n= \\max_{\\|\\mathbf{v}\\|=1} \\langle \\nabla f(P_0), \\mathbf{v} \\rangle \n= \\|\\nabla f(P_0)\\| \\cdot \\max_{\\|\\mathbf{v}\\|=1} \\cos \\theta \n= \\|\\nabla f(P_0)\\| \\cdot 1 \n= \\|\\nabla f(P_0)\\|\n$$\n<ul>\n<li><strong>Minima derivata</strong>: direzione opposta al gradiente:</li>\n</ul>\n$$\n\\min_{\\|\\mathbf{v}\\|=1} \\frac{df}{d\\mathbf{v}} = -\\|\\nabla f(P_0)\\|, \\quad \n\\mathbf{v} = -\\frac{\\nabla f(P_0)}{\\|\\nabla f(P_0)\\|}\n$$\n<ul>\n<li><strong>Vettori tangenti a curve/superfici di livello</strong>: ortogonali al gradiente:</li>\n</ul>\n$$\n\\nabla f(P_0) \\cdot \\mathbf{v} = 0\n$$\n<ul>\n<li><strong>Generalizzazione a $n$ dimensioni</strong>: scelta libera di $n-1$ componenti → infinite direzioni tangenti possibili.</li>\n</ul>\n<blockquote>\n<p>Questi concetti sono fondamentali nell&rsquo;<strong>ottimizzazione multivariata</strong> e nello studio delle <strong>superfici di livello</strong>.</p>\n</blockquote>"
}