{
  "title": "Differenziazione Automatica - Automatic Differentiation",
  "content": "<style>pre { line-height: 125%; }\ntd.linenos .normal { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }\nspan.linenos { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }\ntd.linenos .special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }\nspan.linenos.special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }\n.codehilite .hll { background-color: #ffffcc }\n.codehilite { background: #f8f8f8; }\n.codehilite .c { color: #3D7B7B; font-style: italic } /* Comment */\n.codehilite .err { border: 1px solid #F00 } /* Error */\n.codehilite .k { color: #008000; font-weight: bold } /* Keyword */\n.codehilite .o { color: #666 } /* Operator */\n.codehilite .ch { color: #3D7B7B; font-style: italic } /* Comment.Hashbang */\n.codehilite .cm { color: #3D7B7B; font-style: italic } /* Comment.Multiline */\n.codehilite .cp { color: #9C6500 } /* Comment.Preproc */\n.codehilite .cpf { color: #3D7B7B; font-style: italic } /* Comment.PreprocFile */\n.codehilite .c1 { color: #3D7B7B; font-style: italic } /* Comment.Single */\n.codehilite .cs { color: #3D7B7B; font-style: italic } /* Comment.Special */\n.codehilite .gd { color: #A00000 } /* Generic.Deleted */\n.codehilite .ge { font-style: italic } /* Generic.Emph */\n.codehilite .ges { font-weight: bold; font-style: italic } /* Generic.EmphStrong */\n.codehilite .gr { color: #E40000 } /* Generic.Error */\n.codehilite .gh { color: #000080; font-weight: bold } /* Generic.Heading */\n.codehilite .gi { color: #008400 } /* Generic.Inserted */\n.codehilite .go { color: #717171 } /* Generic.Output */\n.codehilite .gp { color: #000080; font-weight: bold } /* Generic.Prompt */\n.codehilite .gs { font-weight: bold } /* Generic.Strong */\n.codehilite .gu { color: #800080; font-weight: bold } /* Generic.Subheading */\n.codehilite .gt { color: #04D } /* Generic.Traceback */\n.codehilite .kc { color: #008000; font-weight: bold } /* Keyword.Constant */\n.codehilite .kd { color: #008000; font-weight: bold } /* Keyword.Declaration */\n.codehilite .kn { color: #008000; font-weight: bold } /* Keyword.Namespace */\n.codehilite .kp { color: #008000 } /* Keyword.Pseudo */\n.codehilite .kr { color: #008000; font-weight: bold } /* Keyword.Reserved */\n.codehilite .kt { color: #B00040 } /* Keyword.Type */\n.codehilite .m { color: #666 } /* Literal.Number */\n.codehilite .s { color: #BA2121 } /* Literal.String */\n.codehilite .na { color: #687822 } /* Name.Attribute */\n.codehilite .nb { color: #008000 } /* Name.Builtin */\n.codehilite .nc { color: #00F; font-weight: bold } /* Name.Class */\n.codehilite .no { color: #800 } /* Name.Constant */\n.codehilite .nd { color: #A2F } /* Name.Decorator */\n.codehilite .ni { color: #717171; font-weight: bold } /* Name.Entity */\n.codehilite .ne { color: #CB3F38; font-weight: bold } /* Name.Exception */\n.codehilite .nf { color: #00F } /* Name.Function */\n.codehilite .nl { color: #767600 } /* Name.Label */\n.codehilite .nn { color: #00F; font-weight: bold } /* Name.Namespace */\n.codehilite .nt { color: #008000; font-weight: bold } /* Name.Tag */\n.codehilite .nv { color: #19177C } /* Name.Variable */\n.codehilite .ow { color: #A2F; font-weight: bold } /* Operator.Word */\n.codehilite .w { color: #BBB } /* Text.Whitespace */\n.codehilite .mb { color: #666 } /* Literal.Number.Bin */\n.codehilite .mf { color: #666 } /* Literal.Number.Float */\n.codehilite .mh { color: #666 } /* Literal.Number.Hex */\n.codehilite .mi { color: #666 } /* Literal.Number.Integer */\n.codehilite .mo { color: #666 } /* Literal.Number.Oct */\n.codehilite .sa { color: #BA2121 } /* Literal.String.Affix */\n.codehilite .sb { color: #BA2121 } /* Literal.String.Backtick */\n.codehilite .sc { color: #BA2121 } /* Literal.String.Char */\n.codehilite .dl { color: #BA2121 } /* Literal.String.Delimiter */\n.codehilite .sd { color: #BA2121; font-style: italic } /* Literal.String.Doc */\n.codehilite .s2 { color: #BA2121 } /* Literal.String.Double */\n.codehilite .se { color: #AA5D1F; font-weight: bold } /* Literal.String.Escape */\n.codehilite .sh { color: #BA2121 } /* Literal.String.Heredoc */\n.codehilite .si { color: #A45A77; font-weight: bold } /* Literal.String.Interpol */\n.codehilite .sx { color: #008000 } /* Literal.String.Other */\n.codehilite .sr { color: #A45A77 } /* Literal.String.Regex */\n.codehilite .s1 { color: #BA2121 } /* Literal.String.Single */\n.codehilite .ss { color: #19177C } /* Literal.String.Symbol */\n.codehilite .bp { color: #008000 } /* Name.Builtin.Pseudo */\n.codehilite .fm { color: #00F } /* Name.Function.Magic */\n.codehilite .vc { color: #19177C } /* Name.Variable.Class */\n.codehilite .vg { color: #19177C } /* Name.Variable.Global */\n.codehilite .vi { color: #19177C } /* Name.Variable.Instance */\n.codehilite .vm { color: #19177C } /* Name.Variable.Magic */\n.codehilite .il { color: #666 } /* Literal.Number.Integer.Long */\n\n/* Styling per blocchi di codice */\n.codehilite {\n    background: transparent !important;\n    border-radius: 8px;\n    overflow: hidden;\n}\n.codehilite pre {\n    background: transparent !important;\n    margin: 0 !important;\n    padding: 20px !important;\n    font-family: 'Monaco', 'Menlo', 'Consolas', monospace !important;\n    font-size: 14px !important;\n    line-height: 1.5 !important;\n    white-space: pre !important;\n    overflow-x: auto !important;\n    color: inherit !important;\n}\n.codehilite code {\n    background: transparent !important;\n    padding: 0 !important;\n    font-family: inherit !important;\n}\n\n\n.code-wrapper { \n    position: relative; \n}\n.copy-button {\n    position: absolute; \n    top: 12px; \n    right: 12px; \n    padding: 6px 12px; \n    font-size: 12px;\n    cursor: pointer; \n    border: none; \n    border-radius: 4px; \n    background: rgba(255,255,255,0.9);\n    color: #374151; \n    transition: all 0.2s ease;\n    font-weight: 500;\n}\n.copy-button:hover { \n    background: rgba(255,255,255,1);\n    transform: translateY(-1px);\n}\n\n\ndetails.code-container {\n    border: 1px solid #e5e7eb; \n    border-radius: 12px; \n    background: #f9fafb;\n    margin: 16px 0;\n    transition: all 0.3s ease;\n}\ndetails.code-container summary {\n    padding: 12px 16px;\n    font-size: 14px; \n    color: #6b7280; \n    cursor: pointer; \n    outline: none; \n    user-select: none;\n    font-weight: 500;\n}\ndetails.code-container[open] summary::after { \n    content: \" (Hide Code)\"; \n    color: #9ca3af; \n}\ndetails.code-container:not([open]) summary::after { \n    content: \" (Show Code)\"; \n    color: #d1d5db; \n}\ndetails.code-container .code-wrapper {\n    padding: 0;\n    margin: 0;\n}\n/* Blocchi di codice sempre visibili */\n.code-visible {\n    border: 1px solid #e5e7eb;\n    border-radius: 12px;\n    background: #f9fafb;\n    margin: 16px 0;\n}\n.code-visible .code-wrapper {\n    padding: 0;\n    margin: 0;\n}\n</style>\n<h2 id=\"definizione-e-concetti-fondamentali\">Definizione e Concetti Fondamentali</h2>\n<p>La <strong>differenziazione automatica</strong> (Automatic Differentiation, AD) è una tecnica computazionale per calcolare derivate di funzioni definite attraverso programmi informatici con <strong>precisione numerica esatta</strong> (fino alla precisione della macchina).</p>\n<p><strong>Definizione formale</strong>: Data una funzione $f: \\mathbb{R}^n \\to \\mathbb{R}^m$ implementata come sequenza di operazioni elementari, l&rsquo;AD calcola il gradiente $\\nabla f$ o la matrice Jacobiana $J_f$ senza approssimazioni numeriche.</p>\n<h3 id=\"differenze-con-altri-metodi\">Differenze con Altri Metodi</h3>\n<table>\n<thead>\n<tr>\n<th>Metodo</th>\n<th>Precisione</th>\n<th>Costo Computazionale</th>\n<th>Limitazioni</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Differenze Finite</strong></td>\n<td>$O(h)$ o $O(h^2)$</td>\n<td>$O(n) \\cdot \\text{costo}(f)$</td>\n<td>Errori di troncamento e cancellazione</td>\n</tr>\n<tr>\n<td><strong>Differenziazione Simbolica</strong></td>\n<td>Esatta</td>\n<td>Esplosione espressioni</td>\n<td>Non pratica per funzioni complesse</td>\n</tr>\n<tr>\n<td><strong>Differenziazione Automatica</strong></td>\n<td>Esatta (precisione macchina)</td>\n<td>$O(1) - O(n) \\cdot \\text{costo}(f)$</td>\n<td>Richiede implementazione speciale</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"teorema-fondamentale-dellad\">Teorema Fondamentale dell&rsquo;AD</h2>\n<p><strong>Teorema</strong>: Ogni programma che calcola una funzione numerica può essere decomposto in una sequenza di operazioni elementari. Se conosciamo le derivate di queste operazioni elementari, possiamo calcolare la derivata dell&rsquo;intera funzione applicando ripetutamente la <strong><a href=\"/theory/math-for-ml/Calcolo/Chain Rule\" class=\"text-blue-600 hover:underline\">Chain Rule</a></strong>.</p>\n<p><strong>Formalizzazione</strong>: Se $f = f_m \\circ f_{m-1} \\circ \\cdots \\circ f_1$, allora:\n$$\\frac{df}{dx} = \\frac{df_m}{dx_{m-1}} \\cdot \\frac{df_{m-1}}{dx_{m-2}} \\cdot \\ldots \\cdot \\frac{df_1}{dx}$$</p>\n<h2 id=\"due-modalita-forward-e-reverse\">Due Modalità: Forward e Reverse</h2>\n<h3 id=\"forward-mode-tangent-linear-mode\">Forward Mode (Tangent Linear Mode)</h3>\n<p>Il <strong>forward mode</strong> calcola derivate propagando <strong>perturbazioni infinitesimali</strong> dalla variabile indipendente verso l&rsquo;output.</p>\n<p><strong>Principio</strong>: Ogni variabile $v$ è rappresentata come coppia $(v, \\dot{v})$ dove $\\dot{v} = \\frac{\\partial v}{\\partial x}$.</p>\n<p><strong>Regole di propagazione</strong>:\n- $c + v = (c + v_0, \\dot{v})$ (costante)\n- $u + v = (u_0 + v_0, \\dot{u} + \\dot{v})$ (addizione)\n- $u \\cdot v = (u_0 \\cdot v_0, \\dot{u} \\cdot v_0 + u_0 \\cdot \\dot{v})$ (prodotto)\n- $\\sin(v) = (\\sin(v_0), \\cos(v_0) \\cdot \\dot{v})$ (funzione trascendente)</p>\n<p><strong>Esempio</strong>: Calcolare $\\frac{d}{dx}[x^2 + \\sin(x)]$ in $x = \\pi/4$</p>\n$$\n\n\\begin{align*}\n\\textbf{Inizializzazione:} \\quad\nx   &= \\left(\\tfrac{\\pi}{4}, 1\\right) \n      && \\text{(valore e derivata seme).}\\\\[2ex]\n\n\\textbf{Primo passo:} \\quad\nv_{1} &= x \\cdot x \\\\[0.5ex]\n      &= \\left(\\tfrac{\\pi}{4}, 1\\right) \\cdot \\left(\\tfrac{\\pi}{4}, 1\\right) \\\\[0.5ex]\n      &= \\Bigl(\\tfrac{\\pi}{4}\\cdot\\tfrac{\\pi}{4}, \\;\\tfrac{\\pi}{4}\\cdot 1 + \\tfrac{\\pi}{4}\\cdot 1\\Bigr) \\\\[0.5ex]\n      &= \\left(\\tfrac{\\pi^{2}}{16}, \\tfrac{\\pi}{2}\\right). \\\\[2ex]\n\n\\textbf{Secondo passo:} \\quad\nv_{2} &= \\sin(x) \\\\[0.5ex]\n      &= \\left(\\sin\\!\\left(\\tfrac{\\pi}{4}\\right), \\;\\cos\\!\\left(\\tfrac{\\pi}{4}\\right)\\cdot 1\\right) \\\\[0.5ex]\n      &= \\left(\\tfrac{\\sqrt{2}}{2}, \\tfrac{\\sqrt{2}}{2}\\right). \\\\[2ex]\n\n\\textbf{Combinazione finale:} \\quad\nf     &= v_{1} + v_{2} \\\\[0.5ex]\n      &= \\left(\\tfrac{\\pi^{2}}{16} + \\tfrac{\\sqrt{2}}{2}, \\;\\tfrac{\\pi}{2} + \\tfrac{\\sqrt{2}}{2}\\right). \\\\[2ex]\n\n\\textbf{Risultato:} \\quad\nf'\\!\\left(\\tfrac{\\pi}{4}\\right) &= \\tfrac{\\pi}{2} + \\tfrac{\\sqrt{2}}{2}.\n\\end{align*}\n\n\n$$\n<h3 id=\"reverse-mode-backpropagation\">Reverse Mode (Backpropagation)</h3>\n<p>Il <strong>reverse mode</strong> calcola derivate propagando <strong>moltiplicatori di Lagrange</strong> dall&rsquo;output verso le variabili indipendenti.</p>\n<p><strong>Principio</strong>: \n1. <strong>Forward pass</strong>: Calcola tutti i valori intermedi\n2. <strong>Backward pass</strong>: Propaga le derivate usando la chain rule</p>\n<p><strong>Notazione</strong>: $\\bar{v} = \\frac{\\partial f}{\\partial v}$ (derivata parziale di $f$ rispetto alla variabile intermedia $v$)</p>\n<p><strong>Regole di backpropagation</strong>:\n- Se $w = u + v$, allora $\\bar{u} += \\bar{w}$ e $\\bar{v} += \\bar{w}$\n- Se $w = u \\cdot v$, allora $\\bar{u} += v \\cdot \\bar{w}$ e $\\bar{v} += u \\cdot \\bar{w}$\n- Se $w = \\sin(u)$, allora $\\bar{u} += \\cos(u) \\cdot \\bar{w}$\n<strong>Esempio</strong>: Calcolare $\\frac{d}{dx}[x^2 + \\sin(x)]$ in $x = \\pi/4$  </p>\n<h4 id=\"forward-pass\">Forward pass</h4>\n$$\nx = \\tfrac{\\pi}{4}, \n\\qquad\nv_{1} = x^2 = \\tfrac{\\pi^2}{16}, \n\\qquad\nv_{2} = \\sin(x) = \\tfrac{\\sqrt{2}}{2},\n\\qquad\nf = v_{1} + v_{2} = \\tfrac{\\pi^2}{16} + \\tfrac{\\sqrt{2}}{2}.\n$$\n<hr />\n<h4 id=\"backward-pass\">Backward pass</h4>\n<ul>\n<li>\n<p>Inizializzazione sull’output:\n$$\n\\bar{f} = 1\n$$</p>\n</li>\n<li>\n<p>Per la somma $f = v_{1} + v_{2}$:\n$$\n\\bar{v}_{1} += \\bar{f} = 1,\n\\qquad\n\\bar{v}_{2} += \\bar{f} = 1.\n$$</p>\n</li>\n<li>\n<p>Per il quadrato $v_{1} = x^2$:\n$$\n\\bar{x} += \\frac{\\partial v_{1}}{\\partial x} \\cdot \\bar{v}_{1} \n= (2x) \\cdot 1 \n= 2 \\cdot \\tfrac{\\pi}{4} = \\tfrac{\\pi}{2}.\n$$</p>\n</li>\n<li>\n<p>Per il seno $v_{2} = \\sin(x)$:\n$$\n\\bar{x} += \\frac{\\partial v_{2}}{\\partial x} \\cdot \\bar{v}_{2} \n= \\cos(x) \\cdot 1 \n= \\cos\\!\\left(\\tfrac{\\pi}{4}\\right) \n= \\tfrac{\\sqrt{2}}{2}.\n$$</p>\n</li>\n</ul>\n<hr />\n<h4 id=\"risultato\">Risultato</h4>\n$$\n\\frac{df}{dx}\\Big|_{x=\\pi/4} = \\bar{x} = \\tfrac{\\pi}{2} + \\tfrac{\\sqrt{2}}{2}.\n$$\n<h3 id=\"confronto-computazionale\">Confronto Computazionale</h3>\n<p><strong>Forward Mode</strong>: \n- Costo: $O(n)$ per calcolare $\\nabla f$ quando $f: \\mathbb{R}^n \\to \\mathbb{R}$\n- Ottimale quando $n$ piccolo (poche variabili input)</p>\n<p><strong>Reverse Mode</strong>: \n- Costo: $O(m)$ per calcolare $\\nabla f$ quando $f: \\mathbb{R}^n \\to \\mathbb{R}^m$\n- Ottimale quando $m$ piccolo (pochi output)\n- <strong>Machine Learning</strong>: $m = 1$ (loss function) → reverse mode dominante</p>\n<h2 id=\"implementazione-forward-mode\">Implementazione Forward Mode</h2>\n<details class=\"code-container\">\n<summary>Code</summary>\n<div class=\"code-wrapper\">\n<button class=\"copy-button\" onclick=\"\n                const code = this.parentElement.querySelector('pre');\n                if (code) {\n                    navigator.clipboard.writeText(code.innerText);\n                    this.textContent = 'Copied!';\n                    setTimeout(() => this.textContent = 'Copy', 2000);\n                }\n            \">Copy</button>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">numpy</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"nn\">np</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">math</span>\n\n<span class=\"k\">class</span><span class=\"w\"> </span><span class=\"nc\">Dual</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Numero duale per forward mode AD&quot;&quot;&quot;</span>\n    <span class=\"k\">def</span><span class=\"w\"> </span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">derivative</span><span class=\"o\">=</span><span class=\"mf\">0.0</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">der</span> <span class=\"o\">=</span> <span class=\"n\">derivative</span>\n\n    <span class=\"k\">def</span><span class=\"w\"> </span><span class=\"fm\">__add__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">)):</span>\n            <span class=\"k\">return</span> <span class=\"n\">Dual</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">val</span> <span class=\"o\">+</span> <span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">der</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">Dual</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">val</span> <span class=\"o\">+</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">val</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">der</span> <span class=\"o\">+</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">der</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span><span class=\"w\"> </span><span class=\"fm\">__radd__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"fm\">__add__</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span><span class=\"w\"> </span><span class=\"fm\">__mul__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">)):</span>\n            <span class=\"k\">return</span> <span class=\"n\">Dual</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">val</span> <span class=\"o\">*</span> <span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">der</span> <span class=\"o\">*</span> <span class=\"n\">other</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Regola del prodotto: (uv)&#39; = u&#39;v + uv&#39;</span>\n        <span class=\"k\">return</span> <span class=\"n\">Dual</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">val</span> <span class=\"o\">*</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">val</span><span class=\"p\">,</span> \n                   <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">der</span> <span class=\"o\">*</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">val</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">val</span> <span class=\"o\">*</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">der</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span><span class=\"w\"> </span><span class=\"fm\">__rmul__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"fm\">__mul__</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span><span class=\"w\"> </span><span class=\"fm\">__pow__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">)):</span>\n            <span class=\"c1\"># (u^n)&#39; = n·u^(n-1)·u&#39;</span>\n            <span class=\"k\">return</span> <span class=\"n\">Dual</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">val</span> <span class=\"o\">**</span> <span class=\"n\">other</span><span class=\"p\">,</span> \n                       <span class=\"n\">other</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">val</span> <span class=\"o\">**</span> <span class=\"p\">(</span><span class=\"n\">other</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">))</span> <span class=\"o\">*</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">der</span><span class=\"p\">)</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Dual^Dual non implementato&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">sin</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">Dual</span><span class=\"p\">(</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">val</span><span class=\"p\">),</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">val</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">der</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">cos</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">Dual</span><span class=\"p\">(</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">val</span><span class=\"p\">),</span> <span class=\"o\">-</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">val</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">der</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">exp</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">exp_val</span> <span class=\"o\">=</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">val</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">Dual</span><span class=\"p\">(</span><span class=\"n\">exp_val</span><span class=\"p\">,</span> <span class=\"n\">exp_val</span> <span class=\"o\">*</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">der</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span><span class=\"w\"> </span><span class=\"fm\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;Dual(</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">val</span><span class=\"si\">:</span><span class=\"s2\">.6f</span><span class=\"si\">}</span><span class=\"s2\">, </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">der</span><span class=\"si\">:</span><span class=\"s2\">.6f</span><span class=\"si\">}</span><span class=\"s2\">)&quot;</span>\n\n<span class=\"c1\"># Funzioni helper</span>\n<span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">sin</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">Dual</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">cos</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">cos</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">Dual</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">exp</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">exp</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">Dual</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Esempio di utilizzo</span>\n<span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;f(x) = x² + sin(x) + exp(x)&quot;&quot;&quot;</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span><span class=\"o\">**</span><span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Calcolo della derivata in x = 1.0</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">Dual</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">)</span>  <span class=\"c1\"># seme: df/dx</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;f(1) = </span><span class=\"si\">{</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">val</span><span class=\"si\">:</span><span class=\"s2\">.6f</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;f&#39;(1) = </span><span class=\"si\">{</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">der</span><span class=\"si\">:</span><span class=\"s2\">.6f</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Verifica analitica: f&#39;(x) = 2x + cos(x) + exp(x)</span>\n<span class=\"n\">analytical</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"mf\">1.0</span> <span class=\"o\">+</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Analitico: f&#39;(1) = </span><span class=\"si\">{</span><span class=\"n\">analytical</span><span class=\"si\">:</span><span class=\"s2\">.6f</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n</code></pre></div>\n</div>\n</details>\n\n<h2 id=\"implementazione-reverse-mode\">Implementazione Reverse Mode</h2>\n<details class=\"code-container\">\n<summary>Code</summary>\n<div class=\"code-wrapper\">\n<button class=\"copy-button\" onclick=\"\n                const code = this.parentElement.querySelector('pre');\n                if (code) {\n                    navigator.clipboard.writeText(code.innerText);\n                    this.textContent = 'Copied!';\n                    setTimeout(() => this.textContent = 'Copy', 2000);\n                }\n            \">Copy</button>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">numpy</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"nn\">np</span>\n\n<span class=\"k\">class</span><span class=\"w\"> </span><span class=\"nc\">Variable</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Variabile per reverse mode AD&quot;&quot;&quot;</span>\n\n    <span class=\"c1\"># Contatore globale per ID univoci</span>\n    <span class=\"n\">_id_counter</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n    <span class=\"k\">def</span><span class=\"w\"> </span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">grad</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">backward_fn</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">children</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n\n        <span class=\"c1\"># ID univoco per debug</span>\n        <span class=\"n\">Variable</span><span class=\"o\">.</span><span class=\"n\">_id_counter</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"n\">Variable</span><span class=\"o\">.</span><span class=\"n\">_id_counter</span>\n\n    <span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">backward</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">gradient</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Backpropagation&quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">gradient</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">gradient</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones_like</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">grad</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">grad</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros_like</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">grad</span> <span class=\"o\">+=</span> <span class=\"n\">gradient</span>\n\n        <span class=\"c1\"># Propaga ai figli</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">backward_fn</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">backward_fn</span><span class=\"p\">(</span><span class=\"n\">gradient</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">zero_grad</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Reset gradienti&quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">grad</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n    <span class=\"k\">def</span><span class=\"w\"> </span><span class=\"fm\">__add__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"n\">Variable</span><span class=\"p\">):</span>\n            <span class=\"n\">other</span> <span class=\"o\">=</span> <span class=\"n\">Variable</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">)</span>\n\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">Variable</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">+</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">)</span>\n\n        <span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">backward_fn</span><span class=\"p\">(</span><span class=\"n\">grad</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">backward</span><span class=\"p\">(</span><span class=\"n\">grad</span><span class=\"p\">)</span>\n            <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">backward</span><span class=\"p\">(</span><span class=\"n\">grad</span><span class=\"p\">)</span>\n\n        <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">backward_fn</span> <span class=\"o\">=</span> <span class=\"n\">backward_fn</span>\n        <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">children</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">result</span>\n\n    <span class=\"k\">def</span><span class=\"w\"> </span><span class=\"fm\">__radd__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"fm\">__add__</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span><span class=\"w\"> </span><span class=\"fm\">__mul__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"n\">Variable</span><span class=\"p\">):</span>\n            <span class=\"n\">other</span> <span class=\"o\">=</span> <span class=\"n\">Variable</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">)</span>\n\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">Variable</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">*</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">)</span>\n\n        <span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">backward_fn</span><span class=\"p\">(</span><span class=\"n\">grad</span><span class=\"p\">):</span>\n            <span class=\"c1\"># ∂(uv)/∂u = v, ∂(uv)/∂v = u</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">backward</span><span class=\"p\">(</span><span class=\"n\">grad</span> <span class=\"o\">*</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">)</span>\n            <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">backward</span><span class=\"p\">(</span><span class=\"n\">grad</span> <span class=\"o\">*</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">)</span>\n\n        <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">backward_fn</span> <span class=\"o\">=</span> <span class=\"n\">backward_fn</span>\n        <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">children</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">result</span>\n\n    <span class=\"k\">def</span><span class=\"w\"> </span><span class=\"fm\">__rmul__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"fm\">__mul__</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span><span class=\"w\"> </span><span class=\"fm\">__pow__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">)):</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">()</span>\n\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">Variable</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">**</span> <span class=\"n\">other</span><span class=\"p\">)</span>\n\n        <span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">backward_fn</span><span class=\"p\">(</span><span class=\"n\">grad</span><span class=\"p\">):</span>\n            <span class=\"c1\"># ∂(u^n)/∂u = n·u^(n-1)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">backward</span><span class=\"p\">(</span><span class=\"n\">grad</span> <span class=\"o\">*</span> <span class=\"n\">other</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">**</span> <span class=\"p\">(</span><span class=\"n\">other</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)))</span>\n\n        <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">backward_fn</span> <span class=\"o\">=</span> <span class=\"n\">backward_fn</span>\n        <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">children</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">result</span>\n\n    <span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">sin</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">Variable</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">))</span>\n\n        <span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">backward_fn</span><span class=\"p\">(</span><span class=\"n\">grad</span><span class=\"p\">):</span>\n            <span class=\"c1\"># ∂sin(u)/∂u = cos(u)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">backward</span><span class=\"p\">(</span><span class=\"n\">grad</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">))</span>\n\n        <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">backward_fn</span> <span class=\"o\">=</span> <span class=\"n\">backward_fn</span>\n        <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">children</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">result</span>\n\n    <span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">exp</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">exp_val</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">)</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">Variable</span><span class=\"p\">(</span><span class=\"n\">exp_val</span><span class=\"p\">)</span>\n\n        <span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">backward_fn</span><span class=\"p\">(</span><span class=\"n\">grad</span><span class=\"p\">):</span>\n            <span class=\"c1\"># ∂exp(u)/∂u = exp(u)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">backward</span><span class=\"p\">(</span><span class=\"n\">grad</span> <span class=\"o\">*</span> <span class=\"n\">exp_val</span><span class=\"p\">)</span>\n\n        <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">backward_fn</span> <span class=\"o\">=</span> <span class=\"n\">backward_fn</span>\n        <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">children</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">result</span>\n\n    <span class=\"k\">def</span><span class=\"w\"> </span><span class=\"fm\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;Variable(</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"si\">}</span><span class=\"s2\">, grad=</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">grad</span><span class=\"si\">}</span><span class=\"s2\">, id=</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"si\">}</span><span class=\"s2\">)&quot;</span>\n\n<span class=\"c1\"># Funzioni helper</span>\n<span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">sin</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">exp</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">exp</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Esempio: f(x,y) = x²y + sin(x) + exp(y)</span>\n<span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">f_multivariate</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span><span class=\"o\">**</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">y</span> <span class=\"o\">+</span> <span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Calcolo gradienti</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">Variable</span><span class=\"p\">(</span><span class=\"mf\">2.0</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;x&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">Variable</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;y&#39;</span><span class=\"p\">)</span>\n\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">f_multivariate</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">backward</span><span class=\"p\">()</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;f(2,1) = </span><span class=\"si\">{</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"si\">:</span><span class=\"s2\">.6f</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;∂f/∂x = </span><span class=\"si\">{</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">grad</span><span class=\"si\">:</span><span class=\"s2\">.6f</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;∂f/∂y = </span><span class=\"si\">{</span><span class=\"n\">y</span><span class=\"o\">.</span><span class=\"n\">grad</span><span class=\"si\">:</span><span class=\"s2\">.6f</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Verifica analitica</span>\n<span class=\"c1\"># ∂f/∂x = 2xy + cos(x), ∂f/∂y = x² + exp(y)</span>\n<span class=\"n\">analytical_dx</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"mf\">2.0</span><span class=\"o\">*</span><span class=\"mf\">1.0</span> <span class=\"o\">+</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"mf\">2.0</span><span class=\"p\">)</span>  <span class=\"c1\"># = 4 + cos(2)</span>\n<span class=\"n\">analytical_dy</span> <span class=\"o\">=</span> <span class=\"mf\">2.0</span><span class=\"o\">**</span><span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">)</span>     <span class=\"c1\"># = 4 + e</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Analitico: ∂f/∂x = </span><span class=\"si\">{</span><span class=\"n\">analytical_dx</span><span class=\"si\">:</span><span class=\"s2\">.6f</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Analitico: ∂f/∂y = </span><span class=\"si\">{</span><span class=\"n\">analytical_dy</span><span class=\"si\">:</span><span class=\"s2\">.6f</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n</code></pre></div>\n</div>\n</details>\n\n<h2 id=\"computational-graph-e-topological-sort\">Computational Graph e Topological Sort</h2>\n<p>Il <strong>computational graph</strong> è un grafo diretto aciclico (DAG) che rappresenta le operazioni:</p>\n<ul>\n<li><strong>Nodi</strong>: Variabili e operazioni</li>\n<li><strong>Archi</strong>: Dipendenze tra operazioni</li>\n</ul>\n<p>Per il reverse mode, è essenziale attraversare il grafo in <strong>ordine topologico inverso</strong>.</p>\n<p><img src=\"/images/tikz/Computational_graph.svg\" alt=\"Computational Graph\" style=\"width: 50%; height: 50%;\"></p>\n<h2 id=\"analisi-della-complessita\">Analisi della Complessità</h2>\n<h3 id=\"forward-mode\">Forward Mode</h3>\n<ul>\n<li><strong>Spazio</strong>: $O(n)$ per memorizzare derivate parziali</li>\n<li><strong>Tempo</strong>: $O(n \\cdot \\text{costo}(f))$ per calcolare gradiente completo</li>\n<li><strong>Ottimale per</strong>: $n \\ll m$ (poche variabili input, molti output)</li>\n</ul>\n<h3 id=\"reverse-mode\">Reverse Mode</h3>\n<ul>\n<li><strong>Spazio</strong>: $O(\\text{grafo})$ per memorizzare computational graph</li>\n<li><strong>Tempo</strong>: $O(m + \\text{costo}(f))$ per calcolare gradiente</li>\n<li><strong>Ottimale per</strong>: $m \\ll n$ (molte variabili input, pochi output)</li>\n</ul>\n<h3 id=\"esempio-comparativo-timing\">Esempio Comparativo: Timing</h3>\n<details class=\"code-container\">\n<summary>Code</summary>\n<div class=\"code-wrapper\">\n<button class=\"copy-button\" onclick=\"\n                const code = this.parentElement.querySelector('pre');\n                if (code) {\n                    navigator.clipboard.writeText(code.innerText);\n                    this.textContent = 'Copied!';\n                    setTimeout(() => this.textContent = 'Copy', 2000);\n                }\n            \">Copy</button>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">time</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">numpy</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"nn\">np</span>\n\n<span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">timing_comparison</span><span class=\"p\">():</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Confronto prestazioni Forward vs Reverse mode&quot;&quot;&quot;</span>\n\n    <span class=\"c1\"># Funzione di test: f(x) = sum(x[i]² * sin(x[i]))</span>\n    <span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">test_function_forward</span><span class=\"p\">(</span><span class=\"n\">x_dual</span><span class=\"p\">):</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">Dual</span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">xi</span> <span class=\"ow\">in</span> <span class=\"n\">x_dual</span><span class=\"p\">:</span>\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">result</span> <span class=\"o\">+</span> <span class=\"n\">xi</span><span class=\"o\">**</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">xi</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">result</span>\n\n    <span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">test_function_reverse</span><span class=\"p\">(</span><span class=\"n\">x_vars</span><span class=\"p\">):</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">Variable</span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">xi</span> <span class=\"ow\">in</span> <span class=\"n\">x_vars</span><span class=\"p\">:</span>\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">result</span> <span class=\"o\">+</span> <span class=\"n\">xi</span><span class=\"o\">**</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">xi</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">result</span>\n\n    <span class=\"n\">dimensions</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">500</span><span class=\"p\">]</span>\n    <span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">&#39;forward&#39;</span><span class=\"p\">:</span> <span class=\"p\">[],</span> <span class=\"s1\">&#39;reverse&#39;</span><span class=\"p\">:</span> <span class=\"p\">[]}</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"n\">dimensions</span><span class=\"p\">:</span>\n        <span class=\"n\">x_val</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Forward mode timing</span>\n        <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>  <span class=\"c1\"># Calcola ogni componente del gradiente</span>\n            <span class=\"n\">x_dual</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">Dual</span><span class=\"p\">(</span><span class=\"n\">x_val</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">],</span> <span class=\"mf\">1.0</span> <span class=\"k\">if</span> <span class=\"n\">j</span> <span class=\"o\">==</span> <span class=\"n\">i</span> <span class=\"k\">else</span> <span class=\"mf\">0.0</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)]</span>\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">test_function_forward</span><span class=\"p\">(</span><span class=\"n\">x_dual</span><span class=\"p\">)</span>\n        <span class=\"n\">forward_time</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">start</span>\n\n        <span class=\"c1\"># Reverse mode timing</span>\n        <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n        <span class=\"n\">x_vars</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">Variable</span><span class=\"p\">(</span><span class=\"n\">x_val</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)]</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">test_function_reverse</span><span class=\"p\">(</span><span class=\"n\">x_vars</span><span class=\"p\">)</span>\n        <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">backward</span><span class=\"p\">()</span>\n        <span class=\"n\">reverse_time</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">start</span>\n\n        <span class=\"n\">results</span><span class=\"p\">[</span><span class=\"s1\">&#39;forward&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">forward_time</span><span class=\"p\">)</span>\n        <span class=\"n\">results</span><span class=\"p\">[</span><span class=\"s1\">&#39;reverse&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">reverse_time</span><span class=\"p\">)</span>\n\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;n=</span><span class=\"si\">{</span><span class=\"n\">n</span><span class=\"si\">:</span><span class=\"s2\">3d</span><span class=\"si\">}</span><span class=\"s2\">: Forward=</span><span class=\"si\">{</span><span class=\"n\">forward_time</span><span class=\"si\">:</span><span class=\"s2\">.4f</span><span class=\"si\">}</span><span class=\"s2\">s, Reverse=</span><span class=\"si\">{</span><span class=\"n\">reverse_time</span><span class=\"si\">:</span><span class=\"s2\">.4f</span><span class=\"si\">}</span><span class=\"s2\">s&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Plotting</span>\n    <span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">matplotlib.pyplot</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"nn\">plt</span>\n    <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">(</span><span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">))</span>\n    <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">loglog</span><span class=\"p\">(</span><span class=\"n\">dimensions</span><span class=\"p\">,</span> <span class=\"n\">results</span><span class=\"p\">[</span><span class=\"s1\">&#39;forward&#39;</span><span class=\"p\">],</span> <span class=\"s1\">&#39;bo-&#39;</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">&#39;Forward Mode&#39;</span><span class=\"p\">,</span> <span class=\"n\">linewidth</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">loglog</span><span class=\"p\">(</span><span class=\"n\">dimensions</span><span class=\"p\">,</span> <span class=\"n\">results</span><span class=\"p\">[</span><span class=\"s1\">&#39;reverse&#39;</span><span class=\"p\">],</span> <span class=\"s1\">&#39;ro-&#39;</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">&#39;Reverse Mode&#39;</span><span class=\"p\">,</span> <span class=\"n\">linewidth</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">xlabel</span><span class=\"p\">(</span><span class=\"s1\">&#39;Numero di variabili (n)&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">ylabel</span><span class=\"p\">(</span><span class=\"s1\">&#39;Tempo (secondi)&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">(</span><span class=\"s1\">&#39;Confronto Prestazioni: Forward vs Reverse Mode&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">legend</span><span class=\"p\">()</span>\n    <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">grid</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"o\">=</span><span class=\"mf\">0.3</span><span class=\"p\">)</span>\n    <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Esegui solo se si vuole testare le prestazioni</span>\n<span class=\"c1\"># timing_comparison()</span>\n</code></pre></div>\n</div>\n</details>\n\n<h2 id=\"teoremi-di-complessita\">Teoremi di Complessità</h2>\n<h3 id=\"teorema-1-ottimalita-forward-mode\">Teorema 1 (Ottimalità Forward Mode)</h3>\n<p>Per funzioni $f: \\mathbb{R}^n \\to \\mathbb{R}^m$ con $n \\leq m$, il forward mode calcola la matrice Jacobiana completa in tempo $O(n \\cdot \\text{costo}(f))$, che è ottimale.</p>\n<h3 id=\"teorema-2-ottimalita-reverse-mode\">Teorema 2 (Ottimalità Reverse Mode)</h3>\n<p>Per funzioni $f: \\mathbb{R}^n \\to \\mathbb{R}^m$ con $m \\leq n$, il reverse mode calcola la matrice Jacobiana completa in tempo $O(m \\cdot \\text{costo}(f))$, che è ottimale.</p>\n<h3 id=\"corollario-machine-learning\">Corollario (Machine Learning)</h3>\n<p>Nel deep learning, tipicamente $m = 1$ (loss function), quindi il reverse mode è asintoticamente superiore: $O(\\text{costo}(f))$ vs $O(n \\cdot \\text{costo}(f))$.</p>\n<h2 id=\"differenziazione-di-ordine-superiore\">Differenziazione di Ordine Superiore</h2>\n<p>L&rsquo;AD può essere esteso per calcolare <strong>derivate di ordine superiore</strong>:</p>\n<h3 id=\"forward-on-forward-hessiano\">Forward-on-Forward (Hessiano)</h3>\n<p>Per calcolare $\\frac{\\partial^2 f}{\\partial x_i \\partial x_j}$:</p>\n<details class=\"code-container\">\n<summary>Code</summary>\n<div class=\"code-wrapper\">\n<button class=\"copy-button\" onclick=\"\n                const code = this.parentElement.querySelector('pre');\n                if (code) {\n                    navigator.clipboard.writeText(code.innerText);\n                    this.textContent = 'Copied!';\n                    setTimeout(() => this.textContent = 'Copy', 2000);\n                }\n            \">Copy</button>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">class</span><span class=\"w\"> </span><span class=\"nc\">HyperDual</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Numero iper-duale per derivate seconde&quot;&quot;&quot;</span>\n    <span class=\"k\">def</span><span class=\"w\"> </span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">f_x</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">f_y</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">f_xy</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">f</span>      <span class=\"c1\"># f(x,y)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">f_x</span> <span class=\"o\">=</span> <span class=\"n\">f_x</span>  <span class=\"c1\"># ∂f/∂x</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">f_y</span> <span class=\"o\">=</span> <span class=\"n\">f_y</span>  <span class=\"c1\"># ∂f/∂y</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">f_xy</span> <span class=\"o\">=</span> <span class=\"n\">f_xy</span> <span class=\"c1\"># ∂²f/∂x∂y</span>\n\n    <span class=\"k\">def</span><span class=\"w\"> </span><span class=\"fm\">__add__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">)):</span>\n            <span class=\"k\">return</span> <span class=\"n\">HyperDual</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">f</span> <span class=\"o\">+</span> <span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">f_x</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">f_y</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">f_xy</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">HyperDual</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">f</span> <span class=\"o\">+</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">f</span><span class=\"p\">,</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">f_x</span> <span class=\"o\">+</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">f_x</span><span class=\"p\">,</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">f_y</span> <span class=\"o\">+</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">f_y</span><span class=\"p\">,</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">f_xy</span> <span class=\"o\">+</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">f_xy</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span><span class=\"w\"> </span><span class=\"fm\">__mul__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">)):</span>\n            <span class=\"k\">return</span> <span class=\"n\">HyperDual</span><span class=\"p\">(</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">f</span> <span class=\"o\">*</span> <span class=\"n\">other</span><span class=\"p\">,</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">f_x</span> <span class=\"o\">*</span> <span class=\"n\">other</span><span class=\"p\">,</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">f_y</span> <span class=\"o\">*</span> <span class=\"n\">other</span><span class=\"p\">,</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">f_xy</span> <span class=\"o\">*</span> <span class=\"n\">other</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"c1\"># (uv)&#39;&#39; = u&#39;&#39;v + 2u&#39;v&#39; + uv&#39;&#39;</span>\n        <span class=\"k\">return</span> <span class=\"n\">HyperDual</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">f</span> <span class=\"o\">*</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">f</span><span class=\"p\">,</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">f_x</span> <span class=\"o\">*</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">f</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">f</span> <span class=\"o\">*</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">f_x</span><span class=\"p\">,</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">f_y</span> <span class=\"o\">*</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">f</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">f</span> <span class=\"o\">*</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">f_y</span><span class=\"p\">,</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">f_xy</span> <span class=\"o\">*</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">f</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">f_x</span> <span class=\"o\">*</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">f_y</span> <span class=\"o\">+</span> \n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">f_y</span> <span class=\"o\">*</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">f_x</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">f</span> <span class=\"o\">*</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">f_xy</span>\n        <span class=\"p\">)</span>\n\n<span class=\"c1\"># Esempio: Hessiano di f(x,y) = x²y</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">HyperDual</span><span class=\"p\">(</span><span class=\"mf\">2.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">)</span>  <span class=\"c1\"># seme per ∂/∂x</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">HyperDual</span><span class=\"p\">(</span><span class=\"mf\">3.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">)</span>  <span class=\"c1\"># seme per ∂/∂y</span>\n\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"n\">y</span>  <span class=\"c1\"># f(x,y) = x²y</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;f(2,3) = </span><span class=\"si\">{</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">f</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;∂f/∂x = </span><span class=\"si\">{</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">f_x</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>    <span class=\"c1\"># 2xy = 12</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;∂f/∂y = </span><span class=\"si\">{</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">f_y</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>    <span class=\"c1\"># x² = 4  </span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;∂²f/∂x∂y = </span><span class=\"si\">{</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">f_xy</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># 2x = 4</span>\n</code></pre></div>\n</div>\n</details>\n\n<h2 id=\"applicazioni-e-estensioni\">Applicazioni e Estensioni</h2>\n<h3 id=\"1-ottimizzazione\">1. Ottimizzazione</h3>\n<p>L&rsquo;AD è fondamentale per algoritmi di ottimizzazione che richiedono gradienti esatti:\n- <strong>Newton-Raphson</strong>: Richiede Hessiano\n- <strong>BFGS</strong>: Beneficia di gradienti precisi\n- <strong>Constraint Optimization</strong>: Jacobiani di vincoli</p>\n<h3 id=\"2-risoluzione-di-edoedp\">2. Risoluzione di EDO/EDP</h3>\n<p>Per sistemi differenziali con parametri:\n$$\\frac{dy}{dt} = f(y, \\theta, t)$$</p>\n<p>L&rsquo;AD calcola $\\frac{\\partial y}{\\partial \\theta}$ (sensibilità ai parametri).</p>\n<h3 id=\"3-probabilita-e-statistica\">3. Probabilità e Statistica</h3>\n<ul>\n<li><strong>Maximum Likelihood</strong>: Gradiente della log-likelihood</li>\n<li><strong>Bayesian Inference</strong>: MCMC con gradienti (HMC, NUTS)</li>\n<li><strong>Variational Inference</strong>: Ottimizzazione di bound variazionali</li>\n</ul>\n<h3 id=\"4-fisica-computazionale\">4. Fisica Computazionale</h3>\n<ul>\n<li><strong>Simulazioni Molecular Dynamics</strong>: Forze da potenziali</li>\n<li><strong>Finite Element Methods</strong>: Assemblaggio automatico di matrici</li>\n<li><strong>Optimal Control</strong>: Condizioni di ottimalità</li>\n</ul>\n<h2 id=\"limitazioni-e-considerazioni\">Limitazioni e Considerazioni</h2>\n<h3 id=\"1-memoria\">1. Memoria</h3>\n<p>Il reverse mode richiede memorizzazione dell&rsquo;intero computational graph:\n- <strong>Checkpointing</strong>: Trade-off tempo/memoria\n- <strong>Recompute</strong>: Ricalcola invece di memorizzare</p>\n<h3 id=\"2-funzioni-non-differenziabili\">2. Funzioni Non-Differenziabili</h3>\n<details class=\"code-container\">\n<summary>Code</summary>\n<div class=\"code-wrapper\">\n<button class=\"copy-button\" onclick=\"\n                const code = this.parentElement.querySelector('pre');\n                if (code) {\n                    navigator.clipboard.writeText(code.innerText);\n                    this.textContent = 'Copied!';\n                    setTimeout(() => this.textContent = 'Copy', 2000);\n                }\n            \">Copy</button>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">non_smooth_function</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"c1\"># |x| non è differenziabile in x=0</span>\n    <span class=\"k\">return</span> <span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"s1\">&#39;value&#39;</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n</code></pre></div>\n</div>\n</details>\n\n<p>L&rsquo;AD può dare risultati inconsistenti per funzioni non differenziabili.</p>\n<h3 id=\"3-controllo-di-flusso\">3. Controllo di Flusso</h3>\n<details class=\"code-container\">\n<summary>Code</summary>\n<div class=\"code-wrapper\">\n<button class=\"copy-button\" onclick=\"\n                const code = this.parentElement.querySelector('pre');\n                if (code) {\n                    navigator.clipboard.writeText(code.innerText);\n                    this.textContent = 'Copied!';\n                    setTimeout(() => this.textContent = 'Copy', 2000);\n                }\n            \">Copy</button>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">conditional_function</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">x</span><span class=\"o\">**</span><span class=\"mi\">2</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"n\">x</span><span class=\"o\">**</span><span class=\"mi\">3</span>\n</code></pre></div>\n</div>\n</details>\n\n<p>Il controllo di flusso data-dependent complica l&rsquo;AD.</p>\n<h2 id=\"note-storiche-e-sviluppi\">Note Storiche e Sviluppi</h2>\n<h3 id=\"origini-1960s-1970s\">Origini (1960s-1970s)</h3>\n<ul>\n<li><strong>Wengert (1964)</strong>: Prima formulazione dell&rsquo;AD</li>\n<li><strong>Rall (1981)</strong>: Teoria matematica rigorosa</li>\n</ul>\n<h3 id=\"rinascimento-1980s-1990s\">Rinascimento (1980s-1990s)</h3>\n<ul>\n<li><strong>ADIFOR, ADIC</strong>: Primi compilatori AD</li>\n<li><strong>Griewank</strong>: Teoria della complessità</li>\n</ul>\n<h3 id=\"era-moderna-2000s-present\">Era Moderna (2000s-present)</h3>\n<ul>\n<li><strong>Machine Learning</strong>: Esplosione dell&rsquo;interesse</li>\n<li><strong>JAX, Autograd</strong>: Librerie moderne</li>\n<li><strong>Differentiable Programming</strong>: Nuovo paradigma</li>\n</ul>\n<hr />\n<h2 id=\"tags\">Tags</h2>\n<h1 id=\"automatic-differentiation-calcolo-gradiente-machine-learning-ottimizzazione-computational-graph\">automatic-differentiation #calcolo #gradiente #machine-learning #ottimizzazione #computational-graph</h1>\n<h2 id=\"collegamenti\">Collegamenti</h2>\n<ul>\n<li><a href=\"/theory/math-for-ml/Calcolo/Chain Rule\" class=\"text-blue-600 hover:underline\">Chain Rule</a></li>\n<li><span class=\"text-gray-600\">Gradiente e Ottimizzazione</span></li>\n<li><span class=\"text-gray-600\">Backpropagation</span></li>\n<li><span class=\"text-gray-600\">Computational Graphs</span></li>\n<li><span class=\"text-gray-600\">Numerical Methods</span></li>\n</ul>"
}