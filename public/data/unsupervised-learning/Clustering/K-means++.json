{
  "title": "Untitled",
  "content": "<style>pre { line-height: 125%; }\ntd.linenos .normal { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }\nspan.linenos { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }\ntd.linenos .special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }\nspan.linenos.special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }\n.codehilite .hll { background-color: #ffffcc }\n.codehilite { background: #f8f8f8; }\n.codehilite .c { color: #3D7B7B; font-style: italic } /* Comment */\n.codehilite .err { border: 1px solid #F00 } /* Error */\n.codehilite .k { color: #008000; font-weight: bold } /* Keyword */\n.codehilite .o { color: #666 } /* Operator */\n.codehilite .ch { color: #3D7B7B; font-style: italic } /* Comment.Hashbang */\n.codehilite .cm { color: #3D7B7B; font-style: italic } /* Comment.Multiline */\n.codehilite .cp { color: #9C6500 } /* Comment.Preproc */\n.codehilite .cpf { color: #3D7B7B; font-style: italic } /* Comment.PreprocFile */\n.codehilite .c1 { color: #3D7B7B; font-style: italic } /* Comment.Single */\n.codehilite .cs { color: #3D7B7B; font-style: italic } /* Comment.Special */\n.codehilite .gd { color: #A00000 } /* Generic.Deleted */\n.codehilite .ge { font-style: italic } /* Generic.Emph */\n.codehilite .ges { font-weight: bold; font-style: italic } /* Generic.EmphStrong */\n.codehilite .gr { color: #E40000 } /* Generic.Error */\n.codehilite .gh { color: #000080; font-weight: bold } /* Generic.Heading */\n.codehilite .gi { color: #008400 } /* Generic.Inserted */\n.codehilite .go { color: #717171 } /* Generic.Output */\n.codehilite .gp { color: #000080; font-weight: bold } /* Generic.Prompt */\n.codehilite .gs { font-weight: bold } /* Generic.Strong */\n.codehilite .gu { color: #800080; font-weight: bold } /* Generic.Subheading */\n.codehilite .gt { color: #04D } /* Generic.Traceback */\n.codehilite .kc { color: #008000; font-weight: bold } /* Keyword.Constant */\n.codehilite .kd { color: #008000; font-weight: bold } /* Keyword.Declaration */\n.codehilite .kn { color: #008000; font-weight: bold } /* Keyword.Namespace */\n.codehilite .kp { color: #008000 } /* Keyword.Pseudo */\n.codehilite .kr { color: #008000; font-weight: bold } /* Keyword.Reserved */\n.codehilite .kt { color: #B00040 } /* Keyword.Type */\n.codehilite .m { color: #666 } /* Literal.Number */\n.codehilite .s { color: #BA2121 } /* Literal.String */\n.codehilite .na { color: #687822 } /* Name.Attribute */\n.codehilite .nb { color: #008000 } /* Name.Builtin */\n.codehilite .nc { color: #00F; font-weight: bold } /* Name.Class */\n.codehilite .no { color: #800 } /* Name.Constant */\n.codehilite .nd { color: #A2F } /* Name.Decorator */\n.codehilite .ni { color: #717171; font-weight: bold } /* Name.Entity */\n.codehilite .ne { color: #CB3F38; font-weight: bold } /* Name.Exception */\n.codehilite .nf { color: #00F } /* Name.Function */\n.codehilite .nl { color: #767600 } /* Name.Label */\n.codehilite .nn { color: #00F; font-weight: bold } /* Name.Namespace */\n.codehilite .nt { color: #008000; font-weight: bold } /* Name.Tag */\n.codehilite .nv { color: #19177C } /* Name.Variable */\n.codehilite .ow { color: #A2F; font-weight: bold } /* Operator.Word */\n.codehilite .w { color: #BBB } /* Text.Whitespace */\n.codehilite .mb { color: #666 } /* Literal.Number.Bin */\n.codehilite .mf { color: #666 } /* Literal.Number.Float */\n.codehilite .mh { color: #666 } /* Literal.Number.Hex */\n.codehilite .mi { color: #666 } /* Literal.Number.Integer */\n.codehilite .mo { color: #666 } /* Literal.Number.Oct */\n.codehilite .sa { color: #BA2121 } /* Literal.String.Affix */\n.codehilite .sb { color: #BA2121 } /* Literal.String.Backtick */\n.codehilite .sc { color: #BA2121 } /* Literal.String.Char */\n.codehilite .dl { color: #BA2121 } /* Literal.String.Delimiter */\n.codehilite .sd { color: #BA2121; font-style: italic } /* Literal.String.Doc */\n.codehilite .s2 { color: #BA2121 } /* Literal.String.Double */\n.codehilite .se { color: #AA5D1F; font-weight: bold } /* Literal.String.Escape */\n.codehilite .sh { color: #BA2121 } /* Literal.String.Heredoc */\n.codehilite .si { color: #A45A77; font-weight: bold } /* Literal.String.Interpol */\n.codehilite .sx { color: #008000 } /* Literal.String.Other */\n.codehilite .sr { color: #A45A77 } /* Literal.String.Regex */\n.codehilite .s1 { color: #BA2121 } /* Literal.String.Single */\n.codehilite .ss { color: #19177C } /* Literal.String.Symbol */\n.codehilite .bp { color: #008000 } /* Name.Builtin.Pseudo */\n.codehilite .fm { color: #00F } /* Name.Function.Magic */\n.codehilite .vc { color: #19177C } /* Name.Variable.Class */\n.codehilite .vg { color: #19177C } /* Name.Variable.Global */\n.codehilite .vi { color: #19177C } /* Name.Variable.Instance */\n.codehilite .vm { color: #19177C } /* Name.Variable.Magic */\n.codehilite .il { color: #666 } /* Literal.Number.Integer.Long */\n\n/* Styling per blocchi di codice */\n.codehilite {\n    background: transparent !important;\n    border-radius: 8px;\n    overflow: hidden;\n}\n.codehilite pre {\n    background: transparent !important;\n    margin: 0 !important;\n    padding: 20px !important;\n    font-family: 'Monaco', 'Menlo', 'Consolas', monospace !important;\n    font-size: 14px !important;\n    line-height: 1.5 !important;\n    white-space: pre !important;\n    overflow-x: auto !important;\n    color: inherit !important;\n}\n.codehilite code {\n    background: transparent !important;\n    padding: 0 !important;\n    font-family: inherit !important;\n}\n\n\n.code-wrapper { \n    position: relative; \n}\n.copy-button {\n    position: absolute; \n    top: 12px; \n    right: 12px; \n    padding: 6px 12px; \n    font-size: 12px;\n    cursor: pointer; \n    border: none; \n    border-radius: 4px; \n    background: rgba(255,255,255,0.9);\n    color: #374151; \n    transition: all 0.2s ease;\n    font-weight: 500;\n}\n.copy-button:hover { \n    background: rgba(255,255,255,1);\n    transform: translateY(-1px);\n}\n\n\ndetails.code-container {\n    border: 1px solid #e5e7eb; \n    border-radius: 12px; \n    background: #f9fafb;\n    margin: 16px 0;\n    transition: all 0.3s ease;\n}\ndetails.code-container summary {\n    padding: 12px 16px;\n    font-size: 14px; \n    color: #6b7280; \n    cursor: pointer; \n    outline: none; \n    user-select: none;\n    font-weight: 500;\n}\ndetails.code-container[open] summary::after { \n    content: \" (Hide Code)\"; \n    color: #9ca3af; \n}\ndetails.code-container:not([open]) summary::after { \n    content: \" (Show Code)\"; \n    color: #d1d5db; \n}\ndetails.code-container .code-wrapper {\n    padding: 0;\n    margin: 0;\n}\n</style>\n<h2 id=\"introduzione\">Introduzione</h2>\n<p>L&rsquo;algoritmo <strong>K-Means++</strong> è una variante del classico <strong><a href=\"/theory/unsupervised-learning/Clustering/K-Means\" class=\"text-blue-600 hover:underline\">K-Means</a></strong> progettata per migliorare la scelta iniziale dei centroidi. Questo approccio riduce il rischio di convergenza a un minimo locale sub-ottimale e migliora la qualità del clustering.</p>\n<p>Invece di scegliere i centroidi iniziali casualmente, <strong>K-Means++</strong> seleziona strategicamente i centroidi iniziali in modo da massimizzare la distanza tra di essi. Questo metodo aumenta la probabilità di ottenere una buona separazione iniziale tra i cluster e, di conseguenza, risultati migliori.</p>\n<h2 id=\"algoritmo\">Algoritmo</h2>\n<p>Il processo di <strong>K-Means++</strong> può essere descritto nei seguenti passi:</p>\n<ol>\n<li>Scegli il primo centroide $\\vec \\Theta_1$ casualmente tra i punti del dataset $\\{\\vec x_1, \\vec x_2, \\cdots, \\vec x_N\\}$. Quindi ora il set dei centroidi è $\\{\\vec \\Theta_1\\}$.</li>\n<li>Per ogni punto $\\vec x_n$, calcola la distanza quadrata dal centroide più vicino già selezionato:<br />\n   $$\n   D(\\vec x_n) = \\min_{j \\in [K]} ||\\vec x_n - \\vec \\Theta_j||^2\n   $$</li>\n<li>Seleziona il prossimo centroide $\\vec \\Theta_{m+1}$ con probabilità proporzionale a $D(\\vec x_n)$:<br />\n   $$\n   P(\\vec x_n) = \\frac{D(\\vec x_n)}{\\sum_{i=1}^N D(\\vec x_i)}.\n   $$</li>\n<li>Ripeti i passi 2 e 3 finché non avremo selezionato $K$ centroidi.</li>\n<li>Esegui l&rsquo;algoritmo <a href=\"/theory/unsupervised-learning/Clustering/K-Means\" class=\"text-blue-600 hover:underline\">K-Means</a> classico partendo dai centroidi iniziali selezionati (step 3.).</li>\n</ol>\n<h2 id=\"vantaggi\">Vantaggi</h2>\n<ol>\n<li><strong>Minore sensibilità all&rsquo;inizializzazione</strong>: I centroidi iniziali sono scelti per essere ben distribuiti nello spazio, riducendo i rischi di convergenza sub-ottimale, come avviene nella versione vanilla <a href=\"/theory/unsupervised-learning/Clustering/K-Means\" class=\"text-blue-600 hover:underline\">K-Means</a>.</li>\n<li><strong>Migliore approssimazione</strong>: garantisce un upper-bound all&rsquo;approssimazione ottenuta rispetto alla soluzione ottimale. Infatti, un clustering ottenuto con K-means++ è al massimo $O(\\log K)$ peggiore di un clustering ottimale.</li>\n<li><strong>Miglior convergenza</strong>: Converge spesso più rapidamente rispetto al <a href=\"/theory/unsupervised-learning/Clustering/K-Means\" class=\"text-blue-600 hover:underline\">K-Means</a> tradizionale poiché parte da un&rsquo;inizializzazione migliore.</li>\n</ol>\n<h2 id=\"complessita\">Complessità</h2>\n<p>La fase di inizializzazione di <strong>K-Means++</strong> introduce un overhead rispetto al K-Means classico:\n- Calcolare $D(\\vec x_n)$ per tutti i punti ha complessità $O(Nd)$.\n- Ripetere questo calcolo per selezionare $K$ centroidi richiede complessivamente $O(KNd)$.</p>\n<p>Tuttavia, grazie alla migliore inizializzazione, spesso sono necessarie meno iterazioni per raggiungere la convergenza, compensando il costo aggiuntivo.</p>\n<h2 id=\"conclusioni\">Conclusioni</h2>\n<p>L&rsquo;algoritmo <strong>K-Means++</strong> è una scelta preferibile rispetto al K-Means tradizionale per dataset complessi o con una distribuzione eterogenea. La sua inizializzazione migliorata riduce il rischio di ottenere risultati sub-ottimali, rendendolo particolarmente utile in applicazioni pratiche.</p>"
}